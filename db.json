{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1488348310000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1488348310000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1488348310000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1488348310000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1488348310000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1488348310000},{"_id":"source/_posts/Hexo-First-Post.md","hash":"44c7ff38d3265cd6df03f1f378ed7f072dc0925e","modified":1488349029000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1488348295000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1488348310000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1488348310000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1488348310000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1488348310000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1488348310000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1488348310000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1488348310000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1488348310000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1488348310000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1488348310000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1488348310000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1488348310000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1488348310000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1488348310000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1488348310000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1488348310000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1488348310000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1488348310000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1488348310000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1488348310000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1488348310000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1488348310000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1488348310000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488348310000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488348310000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488348310000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488348310000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488348310000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488348310000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1488348310000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1488348310000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1488348310000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1488348310000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1488348310000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1488348310000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1488348310000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1488348310000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1488348310000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1488348310000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1488348310000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1488348310000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1488348310000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1488348310000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1488348310000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1488348310000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1488348310000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1488348310000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1488348310000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1488348310000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488348310000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488348310000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1488348310000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1488348310000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488348310000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1488348310000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1488348310000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1488348310000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1488348310000},{"_id":"source/_posts/2015-07-17-%eb%b8%94%eb%a1%9c%ea%b7%b8-%eb%b0%8f-%ec%9a%b4%ec%98%81%ec%9e%90-%ec%86%8c%ea%b0%9c.md","hash":"615faa5dc829d26ee58166fee1eaf1b0340c71dd","modified":1485962048000},{"_id":"source/_posts/2015-07-17-javascript_intro_1.md","hash":"2990ab55fcaeac458e3452d5404a35b544acf06e","modified":1485962048000},{"_id":"source/_posts/2015-07-21-javasrcipt_intro_2.md","hash":"36b71605ac41be0e4bea846bbc93481058c60ec9","modified":1485962048000},{"_id":"source/_posts/2015-07-28-%ec%9a%b0%ec%97%b0%ed%9e%88-%ec%b0%be%ec%95%84%ec%98%a8-%ea%b8%b0%ed%9a%8c.md","hash":"fdfc35d0e05783f058c624d17a0abeb9b0fe0030","modified":1485962048000},{"_id":"source/_posts/2015-07-28-%ed%8e%98%eb%b8%94-%ed%83%80%ec%9e%84-pebble-time.md","hash":"1045d534ec9665adad9d0609032f6b6dca0babad","modified":1485962048000},{"_id":"source/_posts/2015-08-31-%eb%8b%a4%ec%8b%9c-%ea%b8%b0%ec%b4%88-%ea%b3%b5%ec%82%ac-%ec%8b%9c%ec%9e%91%ed%95%a9%eb%8b%88%eb%8b%a4.md","hash":"7e9c65a44be6adb8262e28af55fad6770d19434c","modified":1485962048000},{"_id":"source/_posts/2015-09-01-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8%ec%9d%98-%ec%98%88%ec%95%bd%ec%96%b4.md","hash":"03a41fc9e72ba9a399b06be1f469c75da4836a1f","modified":1485962048000},{"_id":"source/_posts/2015-09-10-%ec%b6%9c%ec%9e%a5-%ed%95%9c%eb%8f%99%eb%8c%80-%ec%b6%9c%ec%9e%a5.md","hash":"f303191b5571677390e6372db3b86a5004ce1166","modified":1485962048000},{"_id":"source/_posts/2015-09-12-%ec%b6%9c%ec%9e%a5-tyd-academy.md","hash":"48c15949c6fecca49edf15f215c6624539c89cc5","modified":1485962048000},{"_id":"source/_posts/2015-09-15-%ea%b0%9c%eb%b0%9c-ux-%ea%b8%b0%ed%9a%8dmock-up-%ec%a0%9c%ec%9e%91.md","hash":"2e36bd317afdcd51d79288b62b444e548fa11e31","modified":1485962048000},{"_id":"source/_posts/2015-09-22-%ea%b0%9c%eb%b0%9c-%ec%83%88%eb%a1%9c%ec%9a%b4-%ea%b8%b0%ec%88%a0%ec%9d%84-%ec%9d%b5%ed%9e%88%eb%8b%a4.md","hash":"e2d68968a15a26e69a85d8877d4d80a6aa999241","modified":1485962048000},{"_id":"source/_posts/2015-09-12-%ec%b6%9c%ec%9e%a5-%ed%95%9c%eb%8f%99%eb%8c%80%ed%95%99%ea%b5%90-%eb%af%b8%ed%8c%85-%eb%b0%8f-%ed%95%98%ea%b3%84-%ec%9b%8c%ed%81%ac%ec%88%8d.md","hash":"4ed3de586165bf7c690fed09ee937894fb4a9317","modified":1485962048000},{"_id":"source/_posts/2015-09-25-%ec%82%ac%ec%83%89-r-vd.md","hash":"e32b8dce14161585441642f4fc0c3e1b4a18deaf","modified":1485962048000},{"_id":"source/_posts/2015-09-25-%ec%9d%bc%ea%b8%b0-%ec%8b%9c%eb%82%98%eb%a6%ac%ec%98%a4-%ea%b2%bd%ec%98%81-%ea%b8%b0%eb%b2%95%ea%b3%bc-%ed%94%84%eb%a1%9c%ec%9d%98-%ec%9e%90%ec%84%b8.md","hash":"8514c2baa1df9206c4caf41f36588f020612fa64","modified":1485962048000},{"_id":"source/_posts/2015-09-30-%ea%b2%bd%ec%98%81-%ec%bb%a4%eb%ae%a4%eb%8b%88%ec%bc%80%ec%9d%b4%ec%85%98%ec%9d%b4-%ec%a4%91%ec%9a%94%ec%84%b1.md","hash":"a3883d6ccaa1a0d8d365cc4b672a3eabb7d525c6","modified":1485962048000},{"_id":"source/_posts/2015-10-04-%ec%b6%9c%ec%9e%a5-%ed%95%9c%eb%8f%99%eb%8c%80%ed%95%99%ea%b5%90-ceo-%eb%aa%a8%ec%9e%84.md","hash":"fbdc061cd9536f5997970be9022769490ffc5c03","modified":1485962048000},{"_id":"source/_posts/2015-10-02-%ec%9d%bc%ea%b8%b0-%ea%b7%bc%eb%ac%b4%ed%99%98%ea%b2%bd.md","hash":"b9c9469004b7f62b09f34311892cb6d743113f22","modified":1485962048000},{"_id":"source/_posts/2015-10-07-%ea%b2%bd%ec%98%81-%ec%8b%9c%eb%82%98%eb%a6%ac%ec%98%a4-%ea%b2%bd%ec%98%81-%ea%b8%b0%eb%b2%95%ea%b3%bc-%ec%9d%b8%ec%82%ac-%ea%b4%80%eb%a6%ac%ec%9d%98-%ec%a4%91%ec%9a%94%ec%84%b1.md","hash":"a97f9ee7b4f734cb31cf637695275b44f42e9ef8","modified":1485962048000},{"_id":"source/_posts/2015-10-08-%ea%b0%9c%eb%b0%9c-%ea%b0%9c%eb%b0%9c%ed%99%98%ea%b2%bd.md","hash":"2f784630be58a529981b91aaf8a9a6f944d1838b","modified":1485962048000},{"_id":"source/_posts/2015-10-13-%ea%b0%9c%eb%b0%9c-%ea%b0%9c%eb%b0%9c%ec%9e%90%ec%9d%98-%ec%8b%9c%ea%b0%84.md","hash":"2d8f512e3147491563e812d24a54970318ba2ca7","modified":1485962048000},{"_id":"source/_posts/2015-10-17-%ec%9d%bc%ea%b8%b0-%ec%8a%ac%eb%9f%bc%ed%94%84.md","hash":"fb630aa72ecfd7fe66f943d0d5e0e6d727e97ac7","modified":1485962048000},{"_id":"source/_posts/2015-10-20-%ea%b2%bd%ec%98%81-%eb%b6%88%ed%95%a9%eb%a6%ac%ed%95%9c-%ec%9d%98%ec%82%ac%ea%b2%b0%ec%a0%95.md","hash":"d84809befb41be5110fb8a6a9e3ac39500fb8862","modified":1485962048000},{"_id":"source/_posts/2015-10-21-%ea%b2%bd%ec%98%81-%ed%95%a9%eb%a6%ac%ec%a0%81%ec%9d%b8-%ec%9d%98%ec%82%ac%ea%b2%b0%ec%a0%95.md","hash":"a93ce30aee82b12d64757ef35bce0dc5b6a49390","modified":1485962048000},{"_id":"source/_posts/2015-10-22-from-flipboard-dot%eb%8b%b7-%ec%9d%b4%ec%95%bc%ea%b8%b0.md","hash":"364b17cb421567ac91cc45ccac7ee165b22a8248","modified":1485962048000},{"_id":"source/_posts/2015-10-23-%ea%b2%bd%ec%98%81-%ec%8a%a4%ed%83%80%ed%8a%b8%ec%97%85%ec%97%90%ec%84%9c-%ec%82%b4%ec%95%84%eb%82%a8%ea%b8%b0.md","hash":"994a160c3e334a82d961d7855bc84a507271b246","modified":1485962048000},{"_id":"source/_posts/2015-10-24-%ec%9e%a1%eb%8b%b4-%ec%8a%a4%ed%83%80%ed%8a%b8%ec%97%85%ec%97%90%ec%84%9c-%ec%9d%b8%ed%84%b4%ec%9d%98-%ec%97%85%eb%ac%b4.md","hash":"7cdd69eacd0f9d50bae0d9c36f618946abdcb807","modified":1485962048000},{"_id":"source/_posts/2015-10-25-%ea%b0%9c%eb%b0%9c-%eb%a3%a8%eb%b9%84-%ec%98%a8-%eb%a0%88%ec%9d%bc%ec%a6%88-ruby-on-rails.md","hash":"35742101c8b6796419cce332109ecebab20272ce","modified":1485962048000},{"_id":"source/_posts/2015-10-26-%ea%b0%9c%eb%b0%9c-%ec%9b%b9-%ea%b0%9c%eb%b0%9c-%ec%96%b8%ec%96%b4-%ec%82%bc%ed%98%95%ec%a0%9c-html-css-javascript.md","hash":"195bb99914cb053db2c9b795ec2365d9454b30b0","modified":1485962048000},{"_id":"source/_posts/2015-10-27-%ec%9d%bc%ea%b8%b0-%ec%83%88%eb%a1%9c%ec%9a%b4-%ec%9d%bc%ec%9d%84-%eb%b0%b0%ec%9a%b0%eb%a9%b4%ec%84%9c.md","hash":"74a2f47ed7ebb51951dd860c3f81f63bb86b0c54","modified":1485962048000},{"_id":"source/_posts/2015-10-28-%ea%b0%9c%eb%b0%9c-%ed%8e%8c%ec%bd%94%eb%8d%b1%ec%a0%84%ec%9f%81.md","hash":"376d779bc3667f0e71e4aea49746af4fa02762a4","modified":1485962048000},{"_id":"source/_posts/2015-10-28-%ec%9e%a1%eb%8b%b4-%ec%8a%a4%ed%83%80%ed%8a%b8%ec%97%85%ec%97%90%ec%84%9c-%ec%9a%94%ea%b5%ac%ed%95%98%eb%8a%94-%eb%8a%a5%eb%a0%a5.md","hash":"7c76fa4c1738bcf0e2723dcd0fb8eb0747736632","modified":1485962048000},{"_id":"source/_posts/2015-10-29-%ea%b0%9c%eb%b0%9c-%ec%9e%90%eb%a7%89-%ed%8c%8c%ec%9d%bc-%ed%98%95%ec%8b%9d.md","hash":"a9147bf3951ce25c48da90b332b1af0f2bc7f822","modified":1485962048000},{"_id":"source/_posts/2015-10-30-%ec%9e%a1%eb%8b%b4-%eb%91%90%ea%b0%80%ec%a7%80-%ec%a0%84%ec%8b%9c%ed%9a%8c.md","hash":"852aaf9b41d7cedca5f119ddbb80f3e0ff646002","modified":1485962048000},{"_id":"source/_posts/2015-11-03-%ec%9e%a1%eb%8b%b4-%ed%8c%81-after-effect-%eb%b0%b0%ec%9a%b0%ea%b8%b0%ec%97%90-%ec%a2%8b%ec%9d%80-%ea%b0%95%ec%a2%8c.md","hash":"ad8f853b728da5637a7bdfeb983574513b8469e2","modified":1485962048000},{"_id":"source/_posts/2015-10-31-%ea%b2%bd%ec%98%81-%ed%8c%81-%ec%8a%a4%ed%83%80%ed%8a%b8%ec%97%85%ec%97%90-%ea%b4%80%ec%8b%ac%ec%9d%b4-%ec%9e%88%eb%8b%a4%eb%a9%b4-%ec%95%8c%ec%95%84%eb%91%90%ec%96%b4%ec%95%bc%ed%95%a0-%ec%82%ac.md","hash":"3e48dd1e469e6426a37135be5886941f20aa306b","modified":1485962048000},{"_id":"source/_posts/2015-11-05-%ea%b3%b5%ec%9c%a0-%ec%97%90%ed%94%84%ed%84%b0%ec%9d%b4%ed%8e%99%ed%8a%b8%eb%a5%bc-%eb%b0%b0%ec%9b%8c-%eb%a7%8c%eb%93%a0-%ec%b2%ab%eb%b2%88%ec%a7%b8-%ec%98%81%ec%83%81.md","hash":"b07c4eb583022873296f0aa25b875272bf04a490","modified":1485962048000},{"_id":"source/_posts/2015-11-06-%ea%b0%9c%eb%b0%9c-angularjs.md","hash":"36ac3639f2fc8b7c528a786bb9bd7e899ab39b36","modified":1485962048000},{"_id":"source/_posts/2015-11-09-%ea%b0%9c%eb%b0%9c-%ed%8e%8c-%ec%86%8c%ed%94%84%ed%8a%b8%ec%9b%a8%ec%96%b4-%ea%b0%9c%eb%b0%9c%ec%9e%90%ec%9d%98-%eb%82%98%ec%95%84%ea%b0%88-%ea%b8%b8.md","hash":"6be91ecf167cfd4cdad7952b7e7491c2565dc27b","modified":1485962048000},{"_id":"source/_posts/2015-11-11-%ec%9e%a1%eb%8b%b4-%ec%9d%bc%ea%b8%b0-%ec%95%bc%ea%b7%bc-%eb%ac%b4%ec%9d%98%eb%af%b8.md","hash":"55ec5288a2c8349991ab5a37e8e58f5e6e19f18d","modified":1485962048000},{"_id":"source/_posts/2015-11-12-%ea%b0%9c%eb%b0%9c-%ec%bd%94%eb%94%a9%ec%9d%98-%ec%9e%ac%eb%af%b8.md","hash":"583e4a23ab0aeda1991b368bebb7307af4cf7125","modified":1485962048000},{"_id":"source/_posts/2015-11-16-%ec%9e%a1%eb%8b%b4-%ec%9d%b4%eb%b2%88%ec%a3%bc%ec%97%90%eb%8a%94-%eb%a1%a0%ec%b9%ad%ec%9d%b4-%ea%b0%80%eb%8a%a5%ed%95%a0%ea%b9%8c%ec%9a%94.md","hash":"2bc789ab763e4430d50ac680517c6b5db05bbb3e","modified":1485962048000},{"_id":"source/_posts/2015-11-17-from-flipboard-%ed%8e%8c-%ec%95%84%ec%a7%81%eb%8f%84-%ec%a4%91%ea%b5%ad%ec%97%90%ea%b2%8c-%eb%94%b0%eb%9d%bc%ec%9e%a1%ed%9e%90-%ea%b1%b1%ec%a0%95%ed%95%98%eb%8a%94-%eb%b0%94%eb%b3%b4%eb%93%a4.md","hash":"a21a8943e39eb19523ec0e27659acf13324e49f2","modified":1485962048000},{"_id":"source/_posts/2015-11-18-%ec%9e%a1%eb%8b%b4%ea%b0%9c%eb%b0%9c-%ea%b0%81%ec%9e%90%ec%9d%98-%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8.md","hash":"b26a8aa76e5993501f48a25b608c46fb91251936","modified":1485962048000},{"_id":"source/_posts/2015-11-19-%ea%b0%9c%eb%b0%9c-taleline-project.md","hash":"956e3fe21580b783e090d5add57ccfe4b6f767cb","modified":1485962048000},{"_id":"source/_posts/2015-11-23-%ea%b0%9c%eb%b0%9c-taleline-project-%ea%b0%9c%eb%b0%9c-%ed%99%98%ea%b2%bd-%ec%84%a4%ec%a0%95.md","hash":"07046cf94a7450f34b028001a80352298114bfe8","modified":1485962048000},{"_id":"source/_posts/2015-11-24-%ea%b8%b0%ed%9a%8d-taleline-project-%ea%b8%b0%ed%9a%8d%ed%8e%b8-%ec%83%88%eb%a1%9c%ec%9a%b4-%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8%eb%a1%9c%ec%9d%98-%ec%a0%84%ed%99%98.md","hash":"e4c69c7ccf07c12477deb001dc506b78187dbbfd","modified":1485962048000},{"_id":"source/_posts/2015-11-24-%ec%9e%a1%eb%8b%b4-%ea%b7%b8%eb%a6%ac%ea%b3%a0-%ea%b7%b8-%ec%9d%bc%ec%9d%b4-%eb%98%90-%ec%9d%bc%ec%96%b4%eb%82%ac%ec%8a%b5%eb%8b%88%eb%8b%a4.md","hash":"b628b7886e2e2874aab6b01a40d8827781fdab6f","modified":1485962048000},{"_id":"source/_posts/2015-11-25-%ec%9d%bc%ea%b8%b0-%ed%95%9c%eb%aa%85%ec%9d%98-%ea%b0%9c%eb%b0%9c%ec%9e%90%eb%a1%9c-%ec%9d%b8%ec%a0%95%eb%b0%9b%ec%9d%80-%ea%b8%b0%eb%b6%84.md","hash":"7521eddcc972a03b71ac24dc1f9e994b28fc2cf4","modified":1485962048000},{"_id":"source/_posts/2015-11-30-%ec%9d%b8%ed%84%b0%eb%b7%b0-%eb%a9%98%ed%86%a0-%ec%9d%b8%ed%84%b0%eb%b7%b0-%ec%8a%a4%ed%83%80%ed%8a%b8%ec%97%85-%ea%b0%9c%eb%b0%9c%ec%9e%90-%ea%b5%ad%eb%82%b4-%ec%8a%a4%ed%83%80%ed%8a%b8.md","hash":"766a17b0cf5c91307336d3c46f195cc7c7e9e946","modified":1485962048000},{"_id":"source/_posts/2015-12-02-%ec%84%9c%ed%8f%89-evd-%ea%b2%bd%ec%98%81-mit-%ec%8a%a4%ed%83%80%ed%8a%b8%ec%97%85-%eb%b0%94%ec%9d%b4%eb%b8%94.md","hash":"24e28072e4924a0cee62c80011cf1756f798b13e","modified":1485962048000},{"_id":"source/_posts/2015-12-02-%ec%9e%a1%eb%8b%b4-%ea%b2%bd%ec%98%81-%ea%b2%b0%ea%b5%ad-%ec%82%ac%eb%9e%8c.md","hash":"1da4ba661007155306d5e608358feb3ff93fbcf3","modified":1485962048000},{"_id":"source/_posts/2015-12-07-%ec%84%9c%ed%8f%89-evd-%ea%b0%9c%eb%b0%9c-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%a8%b8%eb%a1%9c-%ec%82%ac%eb%8a%94-%eb%b2%95.md","hash":"88bf4fc9bbe2daac7024e989145fba3637d13a98","modified":1485962048000},{"_id":"source/_posts/2015-12-09-%ea%b0%9c%eb%b0%9c-%ec%b5%9c%ec%a0%81%ed%99%94%ec%9d%98-%eb%8a%aa.md","hash":"6af1c7e331f4bbe748c5f7aae3e5c033c9ef222c","modified":1485962048000},{"_id":"source/_posts/2015-12-11-%ec%84%9c%ed%8f%89-evd-%ea%b0%9c%eb%b0%9c-%ea%b0%9c%eb%b0%9c%ec%9e%90-%ec%84%9c%eb%b0%94%ec%9d%b4%eb%b2%8c-%ea%b0%80%ec%9d%b4%eb%93%9c.md","hash":"0510453069a2055a6d92b3817479164cdada782f","modified":1485962048000},{"_id":"source/_posts/2015-12-14-%eb%b0%9c%ed%91%9c%ec%9e%90%eb%a3%8c-er-edr-%ec%b5%9c%ec%a2%85%eb%b3%b4%ea%b3%a0-%ec%9e%90%eb%a3%8c.md","hash":"640875b733403bf7e1a74639f515fda240e887f4","modified":1485962048000},{"_id":"source/_posts/2015-12-17-%eb%b0%9c%ed%91%9c%ec%9e%90%eb%a3%8c-2014-%ec%8a%a4%ed%83%80%ed%8a%b8%ec%97%85%ec%ba%a0%ed%94%84-%ec%b5%9c%ec%a2%85%eb%b0%9c%ed%91%9c%ec%9e%90%eb%a3%8c.md","hash":"203ea510d162c8ebacaed39e7d9362bb7fa95576","modified":1485962048000},{"_id":"source/_posts/2016-01-21-3d-%ed%94%84%eb%a6%b0%ed%84%b0%eb%a1%9c-%eb%a7%8c%eb%93%a0-%eb%a7%a5%eb%b6%81-%ec%8a%a4%ed%83%a0%eb%93%9c.md","hash":"9235f24a1b25aabeee9e9429cd002454c1f52662","modified":1485962048000},{"_id":"source/_posts/2016-02-01-%ed%86%a0%ec%9d%b5%ec%8a%a4%ed%94%bc%ed%82%b9-part-tip.md","hash":"0dda213d693b7a0f01efa770325735209561deb7","modified":1485962048000},{"_id":"source/_posts/2016-02-25-%ec%98%81%ec%83%81-tyd-academy-in-handong-univ.md","hash":"84856acf921a2c4574fa1b227c2c419bc4d56e43","modified":1485962048000},{"_id":"source/_posts/2016-02-25-%ed%86%a0%ec%9d%b5%ec%8a%a4%ed%94%bc%ed%82%b9-%ea%b2%b0%ea%b3%bc.md","hash":"7dd95be86e8eb308dbb75d396fdafe04757623a6","modified":1485962048000},{"_id":"source/_posts/2016-02-25-learn-about-mean-stack.md","hash":"a10e75b03b8d804e745360db15f681b4778f90fb","modified":1485962048000},{"_id":"source/_posts/2016-03-01-%ea%b0%9d%ec%b2%b4-1.md","hash":"2a41bf386d6dd5661fd53ca656c7c0c562b8f255","modified":1485962048000},{"_id":"source/_posts/2016-03-02-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%a8-%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4-%ec%8a%a4%eb%a0%88%eb%93%9c.md","hash":"6f883a84f40da67577a6bbd2f5441bdf8f2b7849","modified":1485962048000},{"_id":"source/_posts/2016-03-26-fork-execlp-wait-%ed%95%a8%ec%88%98.md","hash":"ee4c96569c772e494edc3278d98571c20bce6092","modified":1485962048000},{"_id":"source/_posts/2016-03-26-practice-1.md","hash":"7e5e743be9e624d5d490a7fe94bf17ead4420def","modified":1485962048000},{"_id":"source/_posts/2016-03-27-coin-%ed%95%a8%ea%bb%98-%ec%84%b1%ec%9e%a5%ed%95%98%ea%b8%b0.md","hash":"93cc239c22ffd214253f9397f4edfad9940226a0","modified":1485962048000},{"_id":"source/_posts/2016-03-30-%ea%b0%9d%ec%b2%b4-2.md","hash":"6f55fdd6bfaacc2137047cffc78ee76b0e30294b","modified":1485962048000},{"_id":"source/_posts/2016-04-28-prato-%ea%b0%9c%eb%b0%9c%ea%b8%b0-1.md","hash":"b42e594506cf3affa4d6be7beddad11a5a01b3d3","modified":1485962048000},{"_id":"source/_posts/2016-04-02-practice-animal-shelter.md","hash":"f06aa1b9a988bf82bf0c6a785de1ce529e7155d1","modified":1485962048000},{"_id":"source/_posts/2016-05-11-css-style-override.md","hash":"f9c12c3db6557ab19c0f79298ed3247c506752d9","modified":1485962048000},{"_id":"source/_posts/2016-05-12-css-color-hex-code-and-rgb.md","hash":"c39d382be65fa0297daf5f5492be4c8fcc9de1b1","modified":1485962048000},{"_id":"source/_posts/2016-05-23-prato-%ea%b0%9c%eb%b0%9c%ea%b8%b0-2.md","hash":"7be2fae16c74c257905aef11a92644b2269c9fd6","modified":1485962048000},{"_id":"source/_posts/2016-05-26-project-tribute-page-%eb%a7%8c%eb%93%a4%ea%b8%b0.md","hash":"ef39a2d1b662d29afce48d91b4082ba96e3da923","modified":1485962048000},{"_id":"source/_posts/2016-06-05-challenge-portfolio-page-%eb%a7%8c%eb%93%a4%ea%b8%b0.md","hash":"3aa1bbabf28af7182d9299b47fe8f95dc3fe61ca","modified":1485962048000},{"_id":"source/_posts/2016-07-05-%ec%b7%a8%eb%af%b8%ec%9d%98-%ec%8b%9c%ec%9e%91-%ec%82%ac%ec%a7%84.md","hash":"2606d2b3e3bdc7b3fa5722d32cc31579dfab51d6","modified":1485962048000},{"_id":"source/_posts/2016-07-17-daily-commit-today-i-learned.md","hash":"33dfb104c308e3840cbe5fd77d23def2688be127","modified":1485962048000},{"_id":"source/.DS_Store","hash":"3ee0c2d486e62df57491e5bd72bbd8117000643e","modified":1488349791000},{"_id":"public/2017/03/01/Hexo-First-Post/index.html","hash":"bc87fc3a814e56b7e07cbbb665f9fcf17c7ec42a","modified":1488350392023},{"_id":"public/2017/03/01/hello-world/index.html","hash":"c9ce5338f4b257c6842861138901967de9591e1f","modified":1488350392170},{"_id":"public/archives/index.html","hash":"ac04492853dbb58540717e962e39cea91d4684ca","modified":1488350392188},{"_id":"public/archives/2017/index.html","hash":"d94c922be74485cf082f487251ba2cba569c1714","modified":1488350392189},{"_id":"public/archives/2017/03/index.html","hash":"aab16a1a6a1fe26286970438345567066ee34530","modified":1488350392189},{"_id":"public/index.html","hash":"6b2a65f712e7a38da1fb5a1b5bbe6b1de61be6e6","modified":1488350392189},{"_id":"source/_posts/daily-commit-today-i-learned.md","hash":"33dfb104c308e3840cbe5fd77d23def2688be127","modified":1485962048000},{"_id":"public/2016/07/17//daily-commit-today-i-learned//index.html","hash":"aff8d6a404c56ffc2c3bd735775d3ce1669317eb","modified":1488350392188},{"_id":"public/archives/2016/index.html","hash":"149f9337fe8e31d01a535262966f11ce283c76f4","modified":1488350392188},{"_id":"public/archives/2016/07/index.html","hash":"46ae1ae49a513717c1c589065202051afe68e6ee","modified":1488350392189},{"_id":"public/categories/freecodecamp/index.html","hash":"d795970c37e7c6a790be8a2edb4bd7a08a9efc02","modified":1488350392189},{"_id":"public/categories/freecodecamp/study/index.html","hash":"dd0e963cd7f29ee8f1f5692e40f941425a05272c","modified":1488350392189},{"_id":"source/_posts/challenge-portfolio-page.md","hash":"3aa1bbabf28af7182d9299b47fe8f95dc3fe61ca","modified":1488350140000},{"_id":"source/_posts/coin.md","hash":"93cc239c22ffd214253f9397f4edfad9940226a0","modified":1488350300000},{"_id":"source/_posts/css-color-hex-code-and-rgb.md","hash":"c39d382be65fa0297daf5f5492be4c8fcc9de1b1","modified":1488350101000},{"_id":"source/_posts/css-style-override.md","hash":"f9c12c3db6557ab19c0f79298ed3247c506752d9","modified":1488350164000},{"_id":"source/_posts/fork-execlp-wait.md","hash":"ee4c96569c772e494edc3278d98571c20bce6092","modified":1488350316000},{"_id":"source/_posts/introduction-to-blog.md","hash":"615faa5dc829d26ee58166fee1eaf1b0340c71dd","modified":1488349900000},{"_id":"source/_posts/javascript-keywords.md","hash":"03a41fc9e72ba9a399b06be1f469c75da4836a1f","modified":1488350342000},{"_id":"source/_posts/learn-about-mean-stack.md","hash":"a10e75b03b8d804e745360db15f681b4778f90fb","modified":1488350275000},{"_id":"source/_posts/practice-animal-shelter.md","hash":"f06aa1b9a988bf82bf0c6a785de1ce529e7155d1","modified":1488350221000},{"_id":"source/_posts/prato-1.md","hash":"b42e594506cf3affa4d6be7beddad11a5a01b3d3","modified":1488350181000},{"_id":"source/_posts/prato-2.md","hash":"7be2fae16c74c257905aef11a92644b2269c9fd6","modified":1488350194000},{"_id":"source/_posts/project-tribute-page.md","hash":"ef39a2d1b662d29afce48d91b4082ba96e3da923","modified":1488350153000},{"_id":"source/_posts/practice-1.md","hash":"7e5e743be9e624d5d490a7fe94bf17ead4420def","modified":1485962048000},{"_id":"source/_posts/javascript-intro-1.md","hash":"2990ab55fcaeac458e3452d5404a35b544acf06e","modified":1485962048000},{"_id":"source/_posts/javasrcipt-intro-2.md","hash":"36b71605ac41be0e4bea846bbc93481058c60ec9","modified":1485962048000},{"_id":"public/2016/05/26//project-tribute-page-%eb%a7%8c%eb%93%a4%ea%b8%b0//index.html","hash":"6d6d7108d42a32ad7de6db8ffde45c7ddb22a977","modified":1488350392198},{"_id":"public/2016/05/23//prato-%ea%b0%9c%eb%b0%9c%ea%b8%b0-2//index.html","hash":"f98a61b3a8233e16a563fe8cf6c3721a58807574","modified":1488350392198},{"_id":"public/2016/05/12//css-color-hex-code-and-rgb//index.html","hash":"b5f69417f1f4ea28a5bcf1f56c3fb33f65165d30","modified":1488350392198},{"_id":"public/2016/05/11//css-style-override//index.html","hash":"0c5ca1782ad9ba0c1291dcd447ba63f2053a81b0","modified":1488350392198},{"_id":"public/2016/04/28//prato-%ea%b0%9c%eb%b0%9c%ea%b8%b0-1//index.html","hash":"2f46835bc03ca4d34bb4d0a8749a44ede74ec1e3","modified":1488350392198},{"_id":"public/2016/03/27//coin-%ed%95%a8%ea%bb%98-%ec%84%b1%ec%9e%a5%ed%95%98%ea%b8%b0//index.html","hash":"d2b38ec715dafcb4fd87c92d26f6638c31731de1","modified":1488350392198},{"_id":"public/2016/02/25//learn-about-mean-stack//index.html","hash":"8609ee25020b9a00a19da2ac6fb5cccefe857e52","modified":1488350392198},{"_id":"public/2015/09/01//%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8%ec%9d%98-%ec%98%88%ec%95%bd%ec%96%b4//index.html","hash":"5f67323caa113ce21132260d408067455d91e796","modified":1488350392199},{"_id":"public/2015/07/17//%eb%b8%94%eb%a1%9c%ea%b7%b8-%eb%b0%8f-%ec%9a%b4%ec%98%81%ec%9e%90-%ec%86%8c%ea%b0%9c//index.html","hash":"9c32113396e37ae3672b34ccbe7076dff0a4e288","modified":1488350392199},{"_id":"public/archives/page/2/index.html","hash":"bca8cc1fc64d2c7bfeb111bb1a75e00439a35ed8","modified":1488350392199},{"_id":"public/archives/2015/index.html","hash":"298c993a93f8e2d215c962dbde71b104af47d0d0","modified":1488350392199},{"_id":"public/archives/2015/07/index.html","hash":"cd464167bbfa64b5b9dd8e4746973b88c35c1b9a","modified":1488350392199},{"_id":"public/archives/2015/09/index.html","hash":"ae6c503d7629c3632928000f136dfd948e25735a","modified":1488350392199},{"_id":"public/archives/2016/page/2/index.html","hash":"f336da8fb191879799303ab31b79de5ef215cd4d","modified":1488350392199},{"_id":"public/archives/2016/02/index.html","hash":"923ec1a9cf29e7a40f875ccc8395bec325923530","modified":1488350392199},{"_id":"public/archives/2016/03/index.html","hash":"f0b128a289097238cdbfcf061c252d00ae5a5788","modified":1488350392200},{"_id":"public/archives/2016/04/index.html","hash":"3341c3338ab2b913ada1bb1a292c5537d5611ef0","modified":1488350392200},{"_id":"public/archives/2016/05/index.html","hash":"0ad1284af0b824ee36de081a94e38e2d9bd2a7d1","modified":1488350392200},{"_id":"public/archives/2016/06/index.html","hash":"75fe2490395d08632b52e6941919cc3b5586fb8c","modified":1488350392200},{"_id":"public/categories/javascript/index.html","hash":"ffe1c4e964a683de4de4c5e8705d6a99918f1542","modified":1488350392200},{"_id":"public/categories/rabbylab/index.html","hash":"4d79f634804efce2751e8722cf243ef3bb483609","modified":1488350392200},{"_id":"public/categories/javascript/study/index.html","hash":"1a54a61b0ce6f8ac6602472475c4884e99efd143","modified":1488350392200},{"_id":"public/categories/cs-basic/index.html","hash":"c5288dfcbe2f846b51766ffefeba016ea43b10a8","modified":1488350392200},{"_id":"public/categories/cs-basic/study/index.html","hash":"525d77263f2600d02c37932a6508df8ad790c099","modified":1488350392200},{"_id":"public/categories/group/index.html","hash":"1072d9cd141c04e0d61f0d3ab3d2311a721b63dd","modified":1488350392200},{"_id":"public/categories/prato-project/index.html","hash":"4d5b6b20eb9c658264684ba69d889b938b8ceec1","modified":1488350392200},{"_id":"public/tags/javascript/index.html","hash":"12f100acebe3226331adb0b843ee9c8b73f0bb50","modified":1488350392200},{"_id":"public/tags/도서추천/index.html","hash":"3eac6e499a5934836c522612853b4925364498c5","modified":1488350392200},{"_id":"public/tags/자바스크립트/index.html","hash":"aa6b92acf55e226ca6507d27af798c5e3e1121e4","modified":1488350392200},{"_id":"public/tags/about/index.html","hash":"2d8082428774fdea9755a1ebbae2b2a5d84ea139","modified":1488350392200},{"_id":"public/tags/me/index.html","hash":"9aeea057f383b761f1f511f0b5daedad835840c8","modified":1488350392200},{"_id":"public/tags/rabby/index.html","hash":"b3f2d91883f56ad566c30b6de5bc16e5fda3a6bf","modified":1488350392200},{"_id":"public/tags/rabbylab/index.html","hash":"71fd6792df99ac4804982648a8ef35866bb431b9","modified":1488350392200},{"_id":"public/tags/예약어/index.html","hash":"2f027ff7c0de25c3c5aa1000f05386a0ae8ba2a4","modified":1488350392200},{"_id":"public/tags/이름/index.html","hash":"a8c21c0e42faaf9ce846cfdaa62baf4054fccd5d","modified":1488350392200},{"_id":"public/tags/csbasic/index.html","hash":"2f272156022b5002bad4829311a8f11cb09c1e5c","modified":1488350392200},{"_id":"public/tags/operatingsystem/index.html","hash":"01474e95658ba8dcb72c4dd36b6ccd2b5dcee8e7","modified":1488350392200},{"_id":"public/tags/coin/index.html","hash":"2338276c6abad8a199898ca0bb77cde106f5d8cc","modified":1488350392200},{"_id":"public/tags/os/index.html","hash":"6d0b46646c74fe47fc49891046cf034d585f3114","modified":1488350392200},{"_id":"public/tags/practice/index.html","hash":"e52f7d2515e0b16ff483feb6110f6a85736530e2","modified":1488350392200},{"_id":"public/tags/story/index.html","hash":"e72b6a9c531a124527b16403b1dee3a56004a41f","modified":1488350392200},{"_id":"public/tags/stack/index.html","hash":"bc116e850f54a81505a3279fb1b94465e958198d","modified":1488350392200},{"_id":"public/tags/github/index.html","hash":"314ae0099a4c8a4d8522eec03c11133f0a357a8d","modified":1488350392200},{"_id":"public/tags/meanstack/index.html","hash":"042f887f1c0b42542fba5ea0c062347dc4e7ad2f","modified":1488350392200},{"_id":"public/tags/praisetogether/index.html","hash":"32c52753478ceb9b75cdab903b9488c070eab97c","modified":1488350392200},{"_id":"public/tags/prato/index.html","hash":"447adb255e2183fadd3beabece46b5d94a86f7b8","modified":1488350392200},{"_id":"public/tags/css/index.html","hash":"a1246cc413660315151218b530e8c24ee7ab4588","modified":1488350392200},{"_id":"public/tags/fcc/index.html","hash":"80bd4b566b78b8fca811973690105c04514abd1a","modified":1488350392200},{"_id":"public/tags/freecodecamp/index.html","hash":"74b517abaf3ef865aa4118f64a4b2bd5b9978973","modified":1488350392201},{"_id":"public/tags/기획/index.html","hash":"d031c0217af9a2fd5218885b10ed0f5ee16f48d9","modified":1488350392201},{"_id":"public/tags/codepen/index.html","hash":"881c622c47dc4f735be55b13a04ea66b0e5b7d57","modified":1488350392201},{"_id":"public/tags/project/index.html","hash":"2fdf6004a3ca4711e65f41adac3c05b497141618","modified":1488350392201},{"_id":"public/2016/06/05//challenge-portfolio-page-%eb%a7%8c%eb%93%a4%ea%b8%b0//index.html","hash":"1ba8398563b964577dc94e6fd89d0a28e8e6dbb9","modified":1488350392201},{"_id":"public/2016/04/02//practice-animal-shelter//index.html","hash":"6fda73c766c9d6f03d1d338c99a193c76db8f77b","modified":1488350392201},{"_id":"public/2016/03/26//practice-1//index.html","hash":"4e2e15f7cfe3e37f8719e46d3403018d332e8d41","modified":1488350392201},{"_id":"public/2016/03/26//fork-execlp-wait-%ed%95%a8%ec%88%98//index.html","hash":"0d8dcbf3c134e6b7b9d531a1982f3492aace2cf0","modified":1488350392201},{"_id":"public/2015/07/21//javasrcipt_intro_2//index.html","hash":"4b23b8a1027538c6343c3f45b74f7af050ec92c1","modified":1488350392201},{"_id":"public/2015/07/17//javascript_intro_1//index.html","hash":"1428d536dc255fdeeadbe5711328075669b90719","modified":1488350392201},{"_id":"public/page/2/index.html","hash":"78b9beb8dd37c19d8c03c0286075d28ace55a134","modified":1488350392201},{"_id":"themes/landscape/languages/ko.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1488350690000}],"Category":[{"name":"javascript","_id":"cizqkyzma0002dlvg72i2xeo4"},{"name":"rabbylab","_id":"cizqkyzmf0007dlvgv74yrj03"},{"name":"study","parent":"cizqkyzma0002dlvg72i2xeo4","_id":"cizqkyzmq000gdlvg6sgmxjj8"},{"name":"review","_id":"cizqkyzn20010dlvg4c9avdcm"},{"name":"internship 2015-2","_id":"cizqkyzn60017dlvgyx5qz42j"},{"name":"english","_id":"cizqkyzqf004vdlvg57oejsve"},{"name":"cs basic","_id":"cizqkyzqn0056dlvgf3y2292q"},{"name":"study","parent":"cizqkyzqn0056dlvgf3y2292q","_id":"cizqkyzrc005pdlvgu6fto0jh"},{"name":"group","_id":"cizqkyzrh005tdlvgo81qliak"},{"name":"prato project","_id":"cizqkyzrp0061dlvgrbq91uqv"},{"name":"freecodecamp","_id":"cizqkyzrv006bdlvgx4xpme9r"},{"name":"hobby","_id":"cizqkyzsb006sdlvg9vqex6q4"},{"name":"study","parent":"cizqkyzrv006bdlvgx4xpme9r","_id":"cizqkyzsd0070dlvg94gk41dl"},{"name":"photo","parent":"cizqkyzsb006sdlvg9vqex6q4","_id":"cizqkyzse0075dlvg92whz6um"}],"Data":[],"Page":[],"Post":[{"title":"Hexo First Post","date":"2017-03-01T06:10:51.000Z","_content":"# Hexo Blog\n\n- This is Hexo Bolog for Joeun.me\n- this is test post\n\n`console.log()`","source":"_posts/Hexo-First-Post.md","raw":"---\ntitle: Hexo First Post\ndate: 2017-03-01 15:10:51\ntags:\n---\n# Hexo Blog\n\n- This is Hexo Bolog for Joeun.me\n- this is test post\n\n`console.log()`","slug":"Hexo-First-Post","published":1,"updated":"2017-03-01T06:17:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizql101d0000egvg93cygskz","content":"<h1 id=\"Hexo-Blog\"><a href=\"#Hexo-Blog\" class=\"headerlink\" title=\"Hexo Blog\"></a>Hexo Blog</h1><ul>\n<li>This is Hexo Bolog for Joeun.me</li>\n<li>this is test post</li>\n</ul>\n<p><code>console.log()</code></p>\n","excerpt":"","more":"<h1 id=\"Hexo-Blog\"><a href=\"#Hexo-Blog\" class=\"headerlink\" title=\"Hexo Blog\"></a>Hexo Blog</h1><ul>\n<li>This is Hexo Bolog for Joeun.me</li>\n<li>this is test post</li>\n</ul>\n<p><code>console.log()</code></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-03-01T06:04:55.000Z","updated":"2017-03-01T06:04:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizql101n0001egvgnsmbzffs","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"id":"570","title":"[Daily Commit] Today I Learned","date":"2016-07-17T14:19:46.000Z","author":"rabby","layout":"post","guid":"http://rabbylab.xyz/?p=570","_content":"한동안 개발 활동이 뜸했습니다. 취미 관련 글에서 언급한 것처럼 계절학기로 인해 바빴기 때문입니다. 지난 7월 12일 이후로 학교와 관련된 모든 일을 끝냈습니다. 이제 새로운 곳에서 일을 시작할 예정입니다. (바로 내일부터군요!) 앞으로는 조금 더 꾸준히 개발 공부만 할 수 있을 것 같습니다. 직업이 학생에서 개발자로 바뀌는 덕입니다. 그토록 바라던 개발자라는 직업을 갖게된만큼 더 꾸준히, 체계적으로 개발 활동을 하기 위해 주말동안 물밑작업을 좀 했습니다.\n\n이전부터 다른 블로그에서 [&#8216;일일커밋&#8217;에 관한 글](https://blog.outsider.ne.kr/1141)을 보면서 도전해보고 싶다는 생각을 해왔습니다. 그 중에서도 [Jay Jin님의 블로그](https://milooy.wordpress.com/2015/10/08/daily-commit/)를 통해 알게된 TIL(Today I Learned)을 따라 해보고 싶다는 생각을 해왔습니다. 그래서 주말에 [Jay Jin님의 Github](https://github.com/milooy/TIL)을 찾아가 기본 골격을 본따서 [저만의 TIL](https://github.com/joeunha/TIL)을 구성했습니다.\n\nTIL은 말처럼 그날 배운 내용을 정리해서 커밋(commit)하는 저장소입니다. 무의미한 내용은 커밋하지 않는다는 조건에 따라 의미있는 내용을 커밋합니다. 이로써 일일커밋 활동을 해나갈 수 있고 제가 배워나가는 지식을 저장해서 저만의 위키(wiki)를 만들 수 있습니다. 아마 저는 FreeCodeCamp를 통해서 배우는 내용을 정리하는 것으로 커밋하는 경우가 많을 것 같습니다. 더불어 회사에서 일하면서 배우게 되는 내용을 그날 그날 정리하면 커밋할 내용이 제법될 것 같습니다.\n\n우선은 30일로 일일커밋의 목표를 설정하겠습니다. 무작정 100일로 목표를 세우면 미리부터 지칠것 같아 작게 여러번 가겠습니다.","source":"_posts/daily-commit-today-i-learned.md","raw":"---\nid: 570\ntitle: '[Daily Commit] Today I Learned'\ndate: 2016-07-17T23:19:46+00:00\nauthor: rabby\nlayout: post\nguid: http://rabbylab.xyz/?p=570\npermalink: /daily-commit-today-i-learned/\ncategories:\n  - freecodecamp\n  - study\n---\n한동안 개발 활동이 뜸했습니다. 취미 관련 글에서 언급한 것처럼 계절학기로 인해 바빴기 때문입니다. 지난 7월 12일 이후로 학교와 관련된 모든 일을 끝냈습니다. 이제 새로운 곳에서 일을 시작할 예정입니다. (바로 내일부터군요!) 앞으로는 조금 더 꾸준히 개발 공부만 할 수 있을 것 같습니다. 직업이 학생에서 개발자로 바뀌는 덕입니다. 그토록 바라던 개발자라는 직업을 갖게된만큼 더 꾸준히, 체계적으로 개발 활동을 하기 위해 주말동안 물밑작업을 좀 했습니다.\n\n이전부터 다른 블로그에서 [&#8216;일일커밋&#8217;에 관한 글](https://blog.outsider.ne.kr/1141)을 보면서 도전해보고 싶다는 생각을 해왔습니다. 그 중에서도 [Jay Jin님의 블로그](https://milooy.wordpress.com/2015/10/08/daily-commit/)를 통해 알게된 TIL(Today I Learned)을 따라 해보고 싶다는 생각을 해왔습니다. 그래서 주말에 [Jay Jin님의 Github](https://github.com/milooy/TIL)을 찾아가 기본 골격을 본따서 [저만의 TIL](https://github.com/joeunha/TIL)을 구성했습니다.\n\nTIL은 말처럼 그날 배운 내용을 정리해서 커밋(commit)하는 저장소입니다. 무의미한 내용은 커밋하지 않는다는 조건에 따라 의미있는 내용을 커밋합니다. 이로써 일일커밋 활동을 해나갈 수 있고 제가 배워나가는 지식을 저장해서 저만의 위키(wiki)를 만들 수 있습니다. 아마 저는 FreeCodeCamp를 통해서 배우는 내용을 정리하는 것으로 커밋하는 경우가 많을 것 같습니다. 더불어 회사에서 일하면서 배우게 되는 내용을 그날 그날 정리하면 커밋할 내용이 제법될 것 같습니다.\n\n우선은 30일로 일일커밋의 목표를 설정하겠습니다. 무작정 100일로 목표를 세우면 미리부터 지칠것 같아 작게 여러번 가겠습니다.","slug":"/daily-commit-today-i-learned/","published":1,"updated":"2017-02-01T15:14:08.000Z","comments":1,"photos":[],"link":"","_id":"cizql1ryz0000envg7kcycfjb","content":"<p>한동안 개발 활동이 뜸했습니다. 취미 관련 글에서 언급한 것처럼 계절학기로 인해 바빴기 때문입니다. 지난 7월 12일 이후로 학교와 관련된 모든 일을 끝냈습니다. 이제 새로운 곳에서 일을 시작할 예정입니다. (바로 내일부터군요!) 앞으로는 조금 더 꾸준히 개발 공부만 할 수 있을 것 같습니다. 직업이 학생에서 개발자로 바뀌는 덕입니다. 그토록 바라던 개발자라는 직업을 갖게된만큼 더 꾸준히, 체계적으로 개발 활동을 하기 위해 주말동안 물밑작업을 좀 했습니다.</p>\n<p>이전부터 다른 블로그에서 <a href=\"https://blog.outsider.ne.kr/1141\" target=\"_blank\" rel=\"external\">&#8216;일일커밋&#8217;에 관한 글</a>을 보면서 도전해보고 싶다는 생각을 해왔습니다. 그 중에서도 <a href=\"https://milooy.wordpress.com/2015/10/08/daily-commit/\" target=\"_blank\" rel=\"external\">Jay Jin님의 블로그</a>를 통해 알게된 TIL(Today I Learned)을 따라 해보고 싶다는 생각을 해왔습니다. 그래서 주말에 <a href=\"https://github.com/milooy/TIL\" target=\"_blank\" rel=\"external\">Jay Jin님의 Github</a>을 찾아가 기본 골격을 본따서 <a href=\"https://github.com/joeunha/TIL\" target=\"_blank\" rel=\"external\">저만의 TIL</a>을 구성했습니다.</p>\n<p>TIL은 말처럼 그날 배운 내용을 정리해서 커밋(commit)하는 저장소입니다. 무의미한 내용은 커밋하지 않는다는 조건에 따라 의미있는 내용을 커밋합니다. 이로써 일일커밋 활동을 해나갈 수 있고 제가 배워나가는 지식을 저장해서 저만의 위키(wiki)를 만들 수 있습니다. 아마 저는 FreeCodeCamp를 통해서 배우는 내용을 정리하는 것으로 커밋하는 경우가 많을 것 같습니다. 더불어 회사에서 일하면서 배우게 되는 내용을 그날 그날 정리하면 커밋할 내용이 제법될 것 같습니다.</p>\n<p>우선은 30일로 일일커밋의 목표를 설정하겠습니다. 무작정 100일로 목표를 세우면 미리부터 지칠것 같아 작게 여러번 가겠습니다.</p>\n","excerpt":"","more":"<p>한동안 개발 활동이 뜸했습니다. 취미 관련 글에서 언급한 것처럼 계절학기로 인해 바빴기 때문입니다. 지난 7월 12일 이후로 학교와 관련된 모든 일을 끝냈습니다. 이제 새로운 곳에서 일을 시작할 예정입니다. (바로 내일부터군요!) 앞으로는 조금 더 꾸준히 개발 공부만 할 수 있을 것 같습니다. 직업이 학생에서 개발자로 바뀌는 덕입니다. 그토록 바라던 개발자라는 직업을 갖게된만큼 더 꾸준히, 체계적으로 개발 활동을 하기 위해 주말동안 물밑작업을 좀 했습니다.</p>\n<p>이전부터 다른 블로그에서 <a href=\"https://blog.outsider.ne.kr/1141\">&#8216;일일커밋&#8217;에 관한 글</a>을 보면서 도전해보고 싶다는 생각을 해왔습니다. 그 중에서도 <a href=\"https://milooy.wordpress.com/2015/10/08/daily-commit/\">Jay Jin님의 블로그</a>를 통해 알게된 TIL(Today I Learned)을 따라 해보고 싶다는 생각을 해왔습니다. 그래서 주말에 <a href=\"https://github.com/milooy/TIL\">Jay Jin님의 Github</a>을 찾아가 기본 골격을 본따서 <a href=\"https://github.com/joeunha/TIL\">저만의 TIL</a>을 구성했습니다.</p>\n<p>TIL은 말처럼 그날 배운 내용을 정리해서 커밋(commit)하는 저장소입니다. 무의미한 내용은 커밋하지 않는다는 조건에 따라 의미있는 내용을 커밋합니다. 이로써 일일커밋 활동을 해나갈 수 있고 제가 배워나가는 지식을 저장해서 저만의 위키(wiki)를 만들 수 있습니다. 아마 저는 FreeCodeCamp를 통해서 배우는 내용을 정리하는 것으로 커밋하는 경우가 많을 것 같습니다. 더불어 회사에서 일하면서 배우게 되는 내용을 그날 그날 정리하면 커밋할 내용이 제법될 것 같습니다.</p>\n<p>우선은 30일로 일일커밋의 목표를 설정하겠습니다. 무작정 100일로 목표를 세우면 미리부터 지칠것 같아 작게 여러번 가겠습니다.</p>\n"},{"id":"544","title":"[Challenge] Portfolio Page 만들기","date":"2016-06-05T11:17:26.000Z","author":"rabby","layout":"post","guid":"http://rabbylab.xyz/?p=544","_content":"Tribute Page 만들기의 뒤를 잇는 두번째 Challenge는 &#8216;[개인 Portfoilo Page 만들기](https://www.freecodecamp.com/challenges/build-a-personal-portfolio-webpage)&#8216; 입니다. 예전부터 포트폴리오를 만들어야지 하면서 Github에 페이지를 만들어두기도 했는데 뭐부터 해야할지 몰라 시작조차 못했던 일을 FCC를 통해 하게 되었습니다.\n\n이전과 마찬가지로 [CodePen](http://codepen.io/)을 사용합니다. 역시나 [예시](https://codepen.io/FreeCodeCamp/full/YqLyXB/)를 주는데요. 예시의 코드를 볼 순 없습니다. 사실 클릭 한번이면 코드를 다 볼 수 있지만, 양심에 맡깁니다. 그게 실력이 느는 일 이니까요. 이를 만들기 위해 몇가지 기본적으로 갖춰야할 기능에 대해 설명합니다. 기본적으로 단일 페이지를 스크롤해서 모든 컨텐츠를 볼 수 있도록 만들어야합니다. Bootstrap 이외의 라이브러리를 사용해도 괜찮다고 합니다. 클릭해서 다른 소셜 미디어로의 이동이 가능한  버튼을 만들어야합니다.\n\n며칠간 바빠서 미루다가 하루정도 마음 잡고 이것 저것 찾아가며 허접한 [포트폴리오](http://codepen.io/rabbylab/full/gMOOBK/)를 만들었습니다. 사실 마땅히 들어갈 작업물이 없어서 그냥 형태만 갖췄습니다. 이후에 작업물이 생기면 업데이트할 생각입니다. 전반적인 기능도 미흡합니다. 예시를 보면 스크롤하면 특정 세션에 이를때 버튼이 자동으로 활성화/비활성화 되는데, 저는 그 부분은 구현하지 않았습니다. 또 Contact Me 파트를 통해 연락하는 기능도 없습니다.정말 기본으로 해야할 것만 했습니다.\n\n이번 과제를 통해 배운 것이 있다면 <section> 이라는 태그가 있다는 점, 이를 이용해서 단일 페이지 내에서 링크로 이동이 가능하다는 점입니다. 그리고 Bootstrap의 스크립트 기능을 사용하기 위해선 .js 파일을 따로 추가해줘야한다는&#8230;상식적인 부분도 깨쳤습니다. (이 부분을 몰라서 navbar의 collapse 기능이 동작하지 않아서 제법 오래 당황했었습니다. 부끄럽네요.)\n\n아직도 모르겠는 부분은 페이지 구조를 구성할 때 얼마나 조밀하게 짜야하는가 하는 부분입니다. 또 얼마나 CSS 를 사용해서 커스텀 해야하고 얼마나 기본의 라이브러리를 활용해야하는 부분입니다. 실컷 CSS 로 스타일을 지정 했는데 막상 더 예쁜 기본값을 라이브러리에서 발견할 때면 어디까지 라이브러리를 써야하고 어디까지 직접 코딩 해야하는지 잘 모르겠습니다.\n\n이제부터는 Javascript를 사용하는 방법을 배울 것 같습니다. 기초가 되는 부분은 빨리 진행하고 조금 깊은 자바스크립트를 다뤄보고 싶네요. 이후에 객체지향도 다루고 기초적인 알고리즘도 다루는 것 같아 기대가 됩니다.","source":"_posts/challenge-portfolio-page.md","raw":"---\nid: 544\ntitle: '[Challenge] Portfolio Page 만들기'\ndate: 2016-06-05T20:17:26+00:00\nauthor: rabby\nlayout: post\nguid: http://rabbylab.xyz/?p=544\npermalink: /challenge-portfolio-page-%eb%a7%8c%eb%93%a4%ea%b8%b0/\ncategories:\n  - freecodecamp\ntags:\n  - codepen\n  - fcc\n  - freecodecamp\n  - practice\n---\nTribute Page 만들기의 뒤를 잇는 두번째 Challenge는 &#8216;[개인 Portfoilo Page 만들기](https://www.freecodecamp.com/challenges/build-a-personal-portfolio-webpage)&#8216; 입니다. 예전부터 포트폴리오를 만들어야지 하면서 Github에 페이지를 만들어두기도 했는데 뭐부터 해야할지 몰라 시작조차 못했던 일을 FCC를 통해 하게 되었습니다.\n\n이전과 마찬가지로 [CodePen](http://codepen.io/)을 사용합니다. 역시나 [예시](https://codepen.io/FreeCodeCamp/full/YqLyXB/)를 주는데요. 예시의 코드를 볼 순 없습니다. 사실 클릭 한번이면 코드를 다 볼 수 있지만, 양심에 맡깁니다. 그게 실력이 느는 일 이니까요. 이를 만들기 위해 몇가지 기본적으로 갖춰야할 기능에 대해 설명합니다. 기본적으로 단일 페이지를 스크롤해서 모든 컨텐츠를 볼 수 있도록 만들어야합니다. Bootstrap 이외의 라이브러리를 사용해도 괜찮다고 합니다. 클릭해서 다른 소셜 미디어로의 이동이 가능한  버튼을 만들어야합니다.\n\n며칠간 바빠서 미루다가 하루정도 마음 잡고 이것 저것 찾아가며 허접한 [포트폴리오](http://codepen.io/rabbylab/full/gMOOBK/)를 만들었습니다. 사실 마땅히 들어갈 작업물이 없어서 그냥 형태만 갖췄습니다. 이후에 작업물이 생기면 업데이트할 생각입니다. 전반적인 기능도 미흡합니다. 예시를 보면 스크롤하면 특정 세션에 이를때 버튼이 자동으로 활성화/비활성화 되는데, 저는 그 부분은 구현하지 않았습니다. 또 Contact Me 파트를 통해 연락하는 기능도 없습니다.정말 기본으로 해야할 것만 했습니다.\n\n이번 과제를 통해 배운 것이 있다면 <section> 이라는 태그가 있다는 점, 이를 이용해서 단일 페이지 내에서 링크로 이동이 가능하다는 점입니다. 그리고 Bootstrap의 스크립트 기능을 사용하기 위해선 .js 파일을 따로 추가해줘야한다는&#8230;상식적인 부분도 깨쳤습니다. (이 부분을 몰라서 navbar의 collapse 기능이 동작하지 않아서 제법 오래 당황했었습니다. 부끄럽네요.)\n\n아직도 모르겠는 부분은 페이지 구조를 구성할 때 얼마나 조밀하게 짜야하는가 하는 부분입니다. 또 얼마나 CSS 를 사용해서 커스텀 해야하고 얼마나 기본의 라이브러리를 활용해야하는 부분입니다. 실컷 CSS 로 스타일을 지정 했는데 막상 더 예쁜 기본값을 라이브러리에서 발견할 때면 어디까지 라이브러리를 써야하고 어디까지 직접 코딩 해야하는지 잘 모르겠습니다.\n\n이제부터는 Javascript를 사용하는 방법을 배울 것 같습니다. 기초가 되는 부분은 빨리 진행하고 조금 깊은 자바스크립트를 다뤄보고 싶네요. 이후에 객체지향도 다루고 기초적인 알고리즘도 다루는 것 같아 기대가 됩니다.","slug":"/challenge-portfolio-page-%eb%a7%8c%eb%93%a4%ea%b8%b0/","published":1,"updated":"2017-03-01T06:35:40.000Z","comments":1,"photos":[],"link":"","_id":"cizqle7q40000hyvgswxew5we","content":"<p>Tribute Page 만들기의 뒤를 잇는 두번째 Challenge는 &#8216;<a href=\"https://www.freecodecamp.com/challenges/build-a-personal-portfolio-webpage\" target=\"_blank\" rel=\"external\">개인 Portfoilo Page 만들기</a>&#8216; 입니다. 예전부터 포트폴리오를 만들어야지 하면서 Github에 페이지를 만들어두기도 했는데 뭐부터 해야할지 몰라 시작조차 못했던 일을 FCC를 통해 하게 되었습니다.</p>\n<p>이전과 마찬가지로 <a href=\"http://codepen.io/\" target=\"_blank\" rel=\"external\">CodePen</a>을 사용합니다. 역시나 <a href=\"https://codepen.io/FreeCodeCamp/full/YqLyXB/\" target=\"_blank\" rel=\"external\">예시</a>를 주는데요. 예시의 코드를 볼 순 없습니다. 사실 클릭 한번이면 코드를 다 볼 수 있지만, 양심에 맡깁니다. 그게 실력이 느는 일 이니까요. 이를 만들기 위해 몇가지 기본적으로 갖춰야할 기능에 대해 설명합니다. 기본적으로 단일 페이지를 스크롤해서 모든 컨텐츠를 볼 수 있도록 만들어야합니다. Bootstrap 이외의 라이브러리를 사용해도 괜찮다고 합니다. 클릭해서 다른 소셜 미디어로의 이동이 가능한  버튼을 만들어야합니다.</p>\n<p>며칠간 바빠서 미루다가 하루정도 마음 잡고 이것 저것 찾아가며 허접한 <a href=\"http://codepen.io/rabbylab/full/gMOOBK/\" target=\"_blank\" rel=\"external\">포트폴리오</a>를 만들었습니다. 사실 마땅히 들어갈 작업물이 없어서 그냥 형태만 갖췄습니다. 이후에 작업물이 생기면 업데이트할 생각입니다. 전반적인 기능도 미흡합니다. 예시를 보면 스크롤하면 특정 세션에 이를때 버튼이 자동으로 활성화/비활성화 되는데, 저는 그 부분은 구현하지 않았습니다. 또 Contact Me 파트를 통해 연락하는 기능도 없습니다.정말 기본으로 해야할 것만 했습니다.</p>\n<p>이번 과제를 통해 배운 것이 있다면 <section> 이라는 태그가 있다는 점, 이를 이용해서 단일 페이지 내에서 링크로 이동이 가능하다는 점입니다. 그리고 Bootstrap의 스크립트 기능을 사용하기 위해선 .js 파일을 따로 추가해줘야한다는&#8230;상식적인 부분도 깨쳤습니다. (이 부분을 몰라서 navbar의 collapse 기능이 동작하지 않아서 제법 오래 당황했었습니다. 부끄럽네요.)</section></p>\n<p>아직도 모르겠는 부분은 페이지 구조를 구성할 때 얼마나 조밀하게 짜야하는가 하는 부분입니다. 또 얼마나 CSS 를 사용해서 커스텀 해야하고 얼마나 기본의 라이브러리를 활용해야하는 부분입니다. 실컷 CSS 로 스타일을 지정 했는데 막상 더 예쁜 기본값을 라이브러리에서 발견할 때면 어디까지 라이브러리를 써야하고 어디까지 직접 코딩 해야하는지 잘 모르겠습니다.</p>\n<p>이제부터는 Javascript를 사용하는 방법을 배울 것 같습니다. 기초가 되는 부분은 빨리 진행하고 조금 깊은 자바스크립트를 다뤄보고 싶네요. 이후에 객체지향도 다루고 기초적인 알고리즘도 다루는 것 같아 기대가 됩니다.</p>\n","excerpt":"","more":"<p>Tribute Page 만들기의 뒤를 잇는 두번째 Challenge는 &#8216;<a href=\"https://www.freecodecamp.com/challenges/build-a-personal-portfolio-webpage\">개인 Portfoilo Page 만들기</a>&#8216; 입니다. 예전부터 포트폴리오를 만들어야지 하면서 Github에 페이지를 만들어두기도 했는데 뭐부터 해야할지 몰라 시작조차 못했던 일을 FCC를 통해 하게 되었습니다.</p>\n<p>이전과 마찬가지로 <a href=\"http://codepen.io/\">CodePen</a>을 사용합니다. 역시나 <a href=\"https://codepen.io/FreeCodeCamp/full/YqLyXB/\">예시</a>를 주는데요. 예시의 코드를 볼 순 없습니다. 사실 클릭 한번이면 코드를 다 볼 수 있지만, 양심에 맡깁니다. 그게 실력이 느는 일 이니까요. 이를 만들기 위해 몇가지 기본적으로 갖춰야할 기능에 대해 설명합니다. 기본적으로 단일 페이지를 스크롤해서 모든 컨텐츠를 볼 수 있도록 만들어야합니다. Bootstrap 이외의 라이브러리를 사용해도 괜찮다고 합니다. 클릭해서 다른 소셜 미디어로의 이동이 가능한  버튼을 만들어야합니다.</p>\n<p>며칠간 바빠서 미루다가 하루정도 마음 잡고 이것 저것 찾아가며 허접한 <a href=\"http://codepen.io/rabbylab/full/gMOOBK/\">포트폴리오</a>를 만들었습니다. 사실 마땅히 들어갈 작업물이 없어서 그냥 형태만 갖췄습니다. 이후에 작업물이 생기면 업데이트할 생각입니다. 전반적인 기능도 미흡합니다. 예시를 보면 스크롤하면 특정 세션에 이를때 버튼이 자동으로 활성화/비활성화 되는데, 저는 그 부분은 구현하지 않았습니다. 또 Contact Me 파트를 통해 연락하는 기능도 없습니다.정말 기본으로 해야할 것만 했습니다.</p>\n<p>이번 과제를 통해 배운 것이 있다면 <section> 이라는 태그가 있다는 점, 이를 이용해서 단일 페이지 내에서 링크로 이동이 가능하다는 점입니다. 그리고 Bootstrap의 스크립트 기능을 사용하기 위해선 .js 파일을 따로 추가해줘야한다는&#8230;상식적인 부분도 깨쳤습니다. (이 부분을 몰라서 navbar의 collapse 기능이 동작하지 않아서 제법 오래 당황했었습니다. 부끄럽네요.)</p>\n<p>아직도 모르겠는 부분은 페이지 구조를 구성할 때 얼마나 조밀하게 짜야하는가 하는 부분입니다. 또 얼마나 CSS 를 사용해서 커스텀 해야하고 얼마나 기본의 라이브러리를 활용해야하는 부분입니다. 실컷 CSS 로 스타일을 지정 했는데 막상 더 예쁜 기본값을 라이브러리에서 발견할 때면 어디까지 라이브러리를 써야하고 어디까지 직접 코딩 해야하는지 잘 모르겠습니다.</p>\n<p>이제부터는 Javascript를 사용하는 방법을 배울 것 같습니다. 기초가 되는 부분은 빨리 진행하고 조금 깊은 자바스크립트를 다뤄보고 싶네요. 이후에 객체지향도 다루고 기초적인 알고리즘도 다루는 것 같아 기대가 됩니다.</p>\n"},{"id":"479","title":"COIN, 함께 성장하기","date":"2016-03-26T17:08:18.000Z","author":"rabby","layout":"post","guid":"http://rabbylab.xyz/?p=479","_content":"학기의 시작을 앞두고 평소 함께 진로를 고민하던 <a href=\"http://oyabun.xyz\" target=\"_blank\">친한 형님</a>과 이야기를 나눌 기회가 있었습니다. 둘다 졸업을 앞둔 시기라 취업에 관한 이야기가 주를 이뤘죠. 어떻게 준비하면 개발자로 일을 시작할 수 있을까하고 이야기를 나누다보니 나름대로 비슷한 것을 준비하고 있다는 것을 알게되었습니다. 블로그를 운영하고 기술면접(코딩인터뷰)을 준비하고 있다는 사실이 그랬죠. 그리고 학교에서 제공하는 취업 관련 컨설팅이 저희 같은 개발자에게 부족한 부분이 많다는 것을 서로 공감했습니다. 이에 함께 이런 이야기를 할 수 있는 자리를 만들고 비슷한 고민을 하는 친구들을 모아서 동아리를 운영해보자는 이야기까지 나왔습니다. 마침 학교에서 취업 관련 동아리를 지원해주고 있었기에 저희는 각자 사람을 모으고 일을 추진했습니다.\n\n1주일 후인 3월 4일에 여섯명이 첫모임을 가졌습니다. 그 모임의 이름이 &#8216;**COIN(코인)**&#8216; 입니다. **코**딩**인**터뷰 준비하는 사람들의 모임 혹은 **코**딩하는 **인**간들의 모임이라는 의미를 갖습니다. 저희는 모여서 함께 데이터구조, 알고리즘을 중점적으로 복습 및 학습하고 교재인 <코딩인터뷰 완전분석>이라는 책에 등장하는 예제를 풀어볼 생각입니다. 취업 관련 정보/팁 공유는 덤입니다. 저희 모임을 위해 교내 경력개발실에서도 지원해주고 있습니다.\n\nCOIN 덕분에 저희는 함께 성장할 것 같습니다. 블로그가 풍성해지는 것은 덤이겠지요. 조금씩 더 성장하는 모습 계속 지켜봐주세요. 감사합니다.","source":"_posts/coin.md","raw":"---\nid: 479\ntitle: COIN, 함께 성장하기\ndate: 2016-03-27T02:08:18+00:00\nauthor: rabby\nlayout: post\nguid: http://rabbylab.xyz/?p=479\npermalink: /coin-%ed%95%a8%ea%bb%98-%ec%84%b1%ec%9e%a5%ed%95%98%ea%b8%b0/\ncategories:\n  - group\ntags:\n  - about\n  - coin\n  - story\n---\n학기의 시작을 앞두고 평소 함께 진로를 고민하던 <a href=\"http://oyabun.xyz\" target=\"_blank\">친한 형님</a>과 이야기를 나눌 기회가 있었습니다. 둘다 졸업을 앞둔 시기라 취업에 관한 이야기가 주를 이뤘죠. 어떻게 준비하면 개발자로 일을 시작할 수 있을까하고 이야기를 나누다보니 나름대로 비슷한 것을 준비하고 있다는 것을 알게되었습니다. 블로그를 운영하고 기술면접(코딩인터뷰)을 준비하고 있다는 사실이 그랬죠. 그리고 학교에서 제공하는 취업 관련 컨설팅이 저희 같은 개발자에게 부족한 부분이 많다는 것을 서로 공감했습니다. 이에 함께 이런 이야기를 할 수 있는 자리를 만들고 비슷한 고민을 하는 친구들을 모아서 동아리를 운영해보자는 이야기까지 나왔습니다. 마침 학교에서 취업 관련 동아리를 지원해주고 있었기에 저희는 각자 사람을 모으고 일을 추진했습니다.\n\n1주일 후인 3월 4일에 여섯명이 첫모임을 가졌습니다. 그 모임의 이름이 &#8216;**COIN(코인)**&#8216; 입니다. **코**딩**인**터뷰 준비하는 사람들의 모임 혹은 **코**딩하는 **인**간들의 모임이라는 의미를 갖습니다. 저희는 모여서 함께 데이터구조, 알고리즘을 중점적으로 복습 및 학습하고 교재인 <코딩인터뷰 완전분석>이라는 책에 등장하는 예제를 풀어볼 생각입니다. 취업 관련 정보/팁 공유는 덤입니다. 저희 모임을 위해 교내 경력개발실에서도 지원해주고 있습니다.\n\nCOIN 덕분에 저희는 함께 성장할 것 같습니다. 블로그가 풍성해지는 것은 덤이겠지요. 조금씩 더 성장하는 모습 계속 지켜봐주세요. 감사합니다.","slug":"/coin-%ed%95%a8%ea%bb%98-%ec%84%b1%ec%9e%a5%ed%95%98%ea%b8%b0/","published":1,"updated":"2017-03-01T06:38:20.000Z","comments":1,"photos":[],"link":"","_id":"cizqle7qb0001hyvgf77wn5sx","content":"<p>학기의 시작을 앞두고 평소 함께 진로를 고민하던 <a href=\"http://oyabun.xyz\" target=\"_blank\">친한 형님</a>과 이야기를 나눌 기회가 있었습니다. 둘다 졸업을 앞둔 시기라 취업에 관한 이야기가 주를 이뤘죠. 어떻게 준비하면 개발자로 일을 시작할 수 있을까하고 이야기를 나누다보니 나름대로 비슷한 것을 준비하고 있다는 것을 알게되었습니다. 블로그를 운영하고 기술면접(코딩인터뷰)을 준비하고 있다는 사실이 그랬죠. 그리고 학교에서 제공하는 취업 관련 컨설팅이 저희 같은 개발자에게 부족한 부분이 많다는 것을 서로 공감했습니다. 이에 함께 이런 이야기를 할 수 있는 자리를 만들고 비슷한 고민을 하는 친구들을 모아서 동아리를 운영해보자는 이야기까지 나왔습니다. 마침 학교에서 취업 관련 동아리를 지원해주고 있었기에 저희는 각자 사람을 모으고 일을 추진했습니다.</p>\n<p>1주일 후인 3월 4일에 여섯명이 첫모임을 가졌습니다. 그 모임의 이름이 &#8216;<strong>COIN(코인)</strong>&#8216; 입니다. <strong>코</strong>딩<strong>인</strong>터뷰 준비하는 사람들의 모임 혹은 <strong>코</strong>딩하는 <strong>인</strong>간들의 모임이라는 의미를 갖습니다. 저희는 모여서 함께 데이터구조, 알고리즘을 중점적으로 복습 및 학습하고 교재인 &lt;코딩인터뷰 완전분석&gt;이라는 책에 등장하는 예제를 풀어볼 생각입니다. 취업 관련 정보/팁 공유는 덤입니다. 저희 모임을 위해 교내 경력개발실에서도 지원해주고 있습니다.</p>\n<p>COIN 덕분에 저희는 함께 성장할 것 같습니다. 블로그가 풍성해지는 것은 덤이겠지요. 조금씩 더 성장하는 모습 계속 지켜봐주세요. 감사합니다.</p>\n","excerpt":"","more":"<p>학기의 시작을 앞두고 평소 함께 진로를 고민하던 <a href=\"http://oyabun.xyz\" target=\"_blank\">친한 형님</a>과 이야기를 나눌 기회가 있었습니다. 둘다 졸업을 앞둔 시기라 취업에 관한 이야기가 주를 이뤘죠. 어떻게 준비하면 개발자로 일을 시작할 수 있을까하고 이야기를 나누다보니 나름대로 비슷한 것을 준비하고 있다는 것을 알게되었습니다. 블로그를 운영하고 기술면접(코딩인터뷰)을 준비하고 있다는 사실이 그랬죠. 그리고 학교에서 제공하는 취업 관련 컨설팅이 저희 같은 개발자에게 부족한 부분이 많다는 것을 서로 공감했습니다. 이에 함께 이런 이야기를 할 수 있는 자리를 만들고 비슷한 고민을 하는 친구들을 모아서 동아리를 운영해보자는 이야기까지 나왔습니다. 마침 학교에서 취업 관련 동아리를 지원해주고 있었기에 저희는 각자 사람을 모으고 일을 추진했습니다.</p>\n<p>1주일 후인 3월 4일에 여섯명이 첫모임을 가졌습니다. 그 모임의 이름이 &#8216;<strong>COIN(코인)</strong>&#8216; 입니다. <strong>코</strong>딩<strong>인</strong>터뷰 준비하는 사람들의 모임 혹은 <strong>코</strong>딩하는 <strong>인</strong>간들의 모임이라는 의미를 갖습니다. 저희는 모여서 함께 데이터구조, 알고리즘을 중점적으로 복습 및 학습하고 교재인 &lt;코딩인터뷰 완전분석&gt;이라는 책에 등장하는 예제를 풀어볼 생각입니다. 취업 관련 정보/팁 공유는 덤입니다. 저희 모임을 위해 교내 경력개발실에서도 지원해주고 있습니다.</p>\n<p>COIN 덕분에 저희는 함께 성장할 것 같습니다. 블로그가 풍성해지는 것은 덤이겠지요. 조금씩 더 성장하는 모습 계속 지켜봐주세요. 감사합니다.</p>\n"},{"id":"531","title":"[CSS] Color, Hex Code and RGB","date":"2016-05-12T06:21:07.000Z","author":"rabby","layout":"post","guid":"http://rabbylab.xyz/?p=531","_content":"CSS에서 색을 표현할 때 간단하게 &#8216;red&#8217;, &#8216;white&#8217;, &#8216;black&#8217;등으로 표기하기도 합니다. 하지만 실제로는 다양한 색을 표현하기 위해 다른 방식을 더 자주 쓰게 됩니다. &#8216;#FF0000&#8217; 혹은 &#8216;rgb(255, 0, 0)&#8217;처럼 표기하는 경우입니다. 이 두가지 표현 방법에 대해 다루겠습니다.\n\n**Hex Code &#8211; #<span style=\"color: #ff0000;\">00</span><span style=\"color: #00ff00;\">00</span><span style=\"color: #0000ff;\">00</span>**\n  \n우선은 Hexadecimal Code의 준말인 Hex Code로 `#FF0000`처럼 표기하는 방법입니다. Hexadecimal은 16진법을 의미합니다. 일반적으로 표기하는 방식은 10진법입니다. 16진법은 0부터 15까지의 수를 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F로 표기합니다. A는 10을 의미하게 되는 것이죠. 이 방식을 이용하면 한자리 수로 16까지 표기 가능하고 두자리로 255까지 표기 가능합니다.\n\n해당 표기법으로 색을 표현할 때는 단순한 규칙을 가집니다.\n\n  * 샵(#)기호 이후의 여섯자리의 숫자가 온다.\n  * 첫번째,두번째 숫자는 빨간색(RED)의 정도를 의미한다.\n  * 세번째,네번째 숫자는 초록색(GREEN)의 정도를 의미한다.\n  * 다섯번째,여섯번째 숫자는 파란색(BLUE)의 정도를 의미한다.\n  * 숫자가 클수록 정도(색의 농도)가 높아(짙어)진다.\n\n예를 들어 `#FF0000`의 경우 빨간색입니다. 왜냐하면 가장 앞의 두자리가 FF로 가장 높은 정도를 가지고 뒤의 네자리는 0이기 때문입니다. 같은 원리로 `#00FF00`는 초록색입니다. 이때 색을 섞어서 다양한 색을 표현할 수 있는데 그 표현의 가지수는 256\\*256\\*256 만큼입니다. 약 1,600만개입니다.\n\n**RGB Code &#8211; rgb(<span style=\"color: #ff0000;\">255</span>, <span style=\"color: #00ff00;\">255</span>, <span style=\"color: #0000ff;\">255</span>)**\n  \n다음은 RGB Code인데 Red, Green, Blue의 정도를 숫자(10진법)으로 `rgb(255, 0, 0)`처럼 표기하는 방법입니다. 쉼표로 각 색의 정도를 구분짓습니다. 앞선 Hex Code를 이해하셨다면 쉽게 사용하실 수 있습니다. 위의 표기는 빨간색이겠죠?","source":"_posts/css-color-hex-code-and-rgb.md","raw":"---\nid: 531\ntitle: '[CSS] Color, Hex Code and RGB'\ndate: 2016-05-12T15:21:07+00:00\nauthor: rabby\nlayout: post\nguid: http://rabbylab.xyz/?p=531\npermalink: /css-color-hex-code-and-rgb/\ncategories:\n  - freecodecamp\ntags:\n  - css\n  - fcc\n  - freecodecamp\n---\nCSS에서 색을 표현할 때 간단하게 &#8216;red&#8217;, &#8216;white&#8217;, &#8216;black&#8217;등으로 표기하기도 합니다. 하지만 실제로는 다양한 색을 표현하기 위해 다른 방식을 더 자주 쓰게 됩니다. &#8216;#FF0000&#8217; 혹은 &#8216;rgb(255, 0, 0)&#8217;처럼 표기하는 경우입니다. 이 두가지 표현 방법에 대해 다루겠습니다.\n\n**Hex Code &#8211; #<span style=\"color: #ff0000;\">00</span><span style=\"color: #00ff00;\">00</span><span style=\"color: #0000ff;\">00</span>**\n  \n우선은 Hexadecimal Code의 준말인 Hex Code로 `#FF0000`처럼 표기하는 방법입니다. Hexadecimal은 16진법을 의미합니다. 일반적으로 표기하는 방식은 10진법입니다. 16진법은 0부터 15까지의 수를 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F로 표기합니다. A는 10을 의미하게 되는 것이죠. 이 방식을 이용하면 한자리 수로 16까지 표기 가능하고 두자리로 255까지 표기 가능합니다.\n\n해당 표기법으로 색을 표현할 때는 단순한 규칙을 가집니다.\n\n  * 샵(#)기호 이후의 여섯자리의 숫자가 온다.\n  * 첫번째,두번째 숫자는 빨간색(RED)의 정도를 의미한다.\n  * 세번째,네번째 숫자는 초록색(GREEN)의 정도를 의미한다.\n  * 다섯번째,여섯번째 숫자는 파란색(BLUE)의 정도를 의미한다.\n  * 숫자가 클수록 정도(색의 농도)가 높아(짙어)진다.\n\n예를 들어 `#FF0000`의 경우 빨간색입니다. 왜냐하면 가장 앞의 두자리가 FF로 가장 높은 정도를 가지고 뒤의 네자리는 0이기 때문입니다. 같은 원리로 `#00FF00`는 초록색입니다. 이때 색을 섞어서 다양한 색을 표현할 수 있는데 그 표현의 가지수는 256\\*256\\*256 만큼입니다. 약 1,600만개입니다.\n\n**RGB Code &#8211; rgb(<span style=\"color: #ff0000;\">255</span>, <span style=\"color: #00ff00;\">255</span>, <span style=\"color: #0000ff;\">255</span>)**\n  \n다음은 RGB Code인데 Red, Green, Blue의 정도를 숫자(10진법)으로 `rgb(255, 0, 0)`처럼 표기하는 방법입니다. 쉼표로 각 색의 정도를 구분짓습니다. 앞선 Hex Code를 이해하셨다면 쉽게 사용하실 수 있습니다. 위의 표기는 빨간색이겠죠?","slug":"/css-color-hex-code-and-rgb/","published":1,"updated":"2017-03-01T06:35:01.000Z","comments":1,"photos":[],"link":"","_id":"cizqle7qf0003hyvgj3nk87xq","content":"<p>CSS에서 색을 표현할 때 간단하게 &#8216;red&#8217;, &#8216;white&#8217;, &#8216;black&#8217;등으로 표기하기도 합니다. 하지만 실제로는 다양한 색을 표현하기 위해 다른 방식을 더 자주 쓰게 됩니다. &#8216;#FF0000&#8217; 혹은 &#8216;rgb(255, 0, 0)&#8217;처럼 표기하는 경우입니다. 이 두가지 표현 방법에 대해 다루겠습니다.</p>\n<p><strong>Hex Code &#8211; #<span style=\"color: #ff0000;\">00</span><span style=\"color: #00ff00;\">00</span><span style=\"color: #0000ff;\">00</span></strong></p>\n<p>우선은 Hexadecimal Code의 준말인 Hex Code로 <code>#FF0000</code>처럼 표기하는 방법입니다. Hexadecimal은 16진법을 의미합니다. 일반적으로 표기하는 방식은 10진법입니다. 16진법은 0부터 15까지의 수를 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F로 표기합니다. A는 10을 의미하게 되는 것이죠. 이 방식을 이용하면 한자리 수로 16까지 표기 가능하고 두자리로 255까지 표기 가능합니다.</p>\n<p>해당 표기법으로 색을 표현할 때는 단순한 규칙을 가집니다.</p>\n<ul>\n<li>샵(#)기호 이후의 여섯자리의 숫자가 온다.</li>\n<li>첫번째,두번째 숫자는 빨간색(RED)의 정도를 의미한다.</li>\n<li>세번째,네번째 숫자는 초록색(GREEN)의 정도를 의미한다.</li>\n<li>다섯번째,여섯번째 숫자는 파란색(BLUE)의 정도를 의미한다.</li>\n<li>숫자가 클수록 정도(색의 농도)가 높아(짙어)진다.</li>\n</ul>\n<p>예를 들어 <code>#FF0000</code>의 경우 빨간색입니다. 왜냐하면 가장 앞의 두자리가 FF로 가장 높은 정도를 가지고 뒤의 네자리는 0이기 때문입니다. 같은 원리로 <code>#00FF00</code>는 초록색입니다. 이때 색을 섞어서 다양한 색을 표현할 수 있는데 그 표현의 가지수는 256*256*256 만큼입니다. 약 1,600만개입니다.</p>\n<p><strong>RGB Code &#8211; rgb(<span style=\"color: #ff0000;\">255</span>, <span style=\"color: #00ff00;\">255</span>, <span style=\"color: #0000ff;\">255</span>)</strong></p>\n<p>다음은 RGB Code인데 Red, Green, Blue의 정도를 숫자(10진법)으로 <code>rgb(255, 0, 0)</code>처럼 표기하는 방법입니다. 쉼표로 각 색의 정도를 구분짓습니다. 앞선 Hex Code를 이해하셨다면 쉽게 사용하실 수 있습니다. 위의 표기는 빨간색이겠죠?</p>\n","excerpt":"","more":"<p>CSS에서 색을 표현할 때 간단하게 &#8216;red&#8217;, &#8216;white&#8217;, &#8216;black&#8217;등으로 표기하기도 합니다. 하지만 실제로는 다양한 색을 표현하기 위해 다른 방식을 더 자주 쓰게 됩니다. &#8216;#FF0000&#8217; 혹은 &#8216;rgb(255, 0, 0)&#8217;처럼 표기하는 경우입니다. 이 두가지 표현 방법에 대해 다루겠습니다.</p>\n<p><strong>Hex Code &#8211; #<span style=\"color: #ff0000;\">00</span><span style=\"color: #00ff00;\">00</span><span style=\"color: #0000ff;\">00</span></strong></p>\n<p>우선은 Hexadecimal Code의 준말인 Hex Code로 <code>#FF0000</code>처럼 표기하는 방법입니다. Hexadecimal은 16진법을 의미합니다. 일반적으로 표기하는 방식은 10진법입니다. 16진법은 0부터 15까지의 수를 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F로 표기합니다. A는 10을 의미하게 되는 것이죠. 이 방식을 이용하면 한자리 수로 16까지 표기 가능하고 두자리로 255까지 표기 가능합니다.</p>\n<p>해당 표기법으로 색을 표현할 때는 단순한 규칙을 가집니다.</p>\n<ul>\n<li>샵(#)기호 이후의 여섯자리의 숫자가 온다.</li>\n<li>첫번째,두번째 숫자는 빨간색(RED)의 정도를 의미한다.</li>\n<li>세번째,네번째 숫자는 초록색(GREEN)의 정도를 의미한다.</li>\n<li>다섯번째,여섯번째 숫자는 파란색(BLUE)의 정도를 의미한다.</li>\n<li>숫자가 클수록 정도(색의 농도)가 높아(짙어)진다.</li>\n</ul>\n<p>예를 들어 <code>#FF0000</code>의 경우 빨간색입니다. 왜냐하면 가장 앞의 두자리가 FF로 가장 높은 정도를 가지고 뒤의 네자리는 0이기 때문입니다. 같은 원리로 <code>#00FF00</code>는 초록색입니다. 이때 색을 섞어서 다양한 색을 표현할 수 있는데 그 표현의 가지수는 256*256*256 만큼입니다. 약 1,600만개입니다.</p>\n<p><strong>RGB Code &#8211; rgb(<span style=\"color: #ff0000;\">255</span>, <span style=\"color: #00ff00;\">255</span>, <span style=\"color: #0000ff;\">255</span>)</strong></p>\n<p>다음은 RGB Code인데 Red, Green, Blue의 정도를 숫자(10진법)으로 <code>rgb(255, 0, 0)</code>처럼 표기하는 방법입니다. 쉼표로 각 색의 정도를 구분짓습니다. 앞선 Hex Code를 이해하셨다면 쉽게 사용하실 수 있습니다. 위의 표기는 빨간색이겠죠?</p>\n"},{"id":"520","title":"[CSS] Style Override","date":"2016-05-11T06:52:47.000Z","author":"rabby","layout":"post","guid":"http://rabbylab.xyz/?p=520","_content":"CSS Style Override는 컴포넌트, 라이브러리를 커스텀하기 위해 사용됩니다. 어떤 식으로 Override가 가능한지 살펴보겠습니다.\n\nCSS 파일은 위에서 아래로 순차적으로 실행됩니다. 때문에 동일한 Element에 동시에 적용되는 경우, 가장 마지막에 선언된 Style이 가장 높은 우선순위를 갖습니다.\n\n예를 들어 아래와 같은 상황에서 h1은 blue-text 속성 값을 지니고 파란색으로 표기되죠.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">&lt;style&gt;\n  body {\n    background-color: black;\n    font-family: Monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n&lt;/style&gt;\n\n\n&lt;h1 class=\"pink-text blue-text\"&gt;Hello World!&lt;/h1&gt; //파란색\n\n</pre>\n\n다만 id로 속성을 지정할 경우에는 어떤 class보다 높은 우선순위를 가집니다. 결국 아래와 같은 코드는 h1이 주황색으로 표기됩니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">&lt;style&gt;\n  body {\n    background-color: black;\n    font-family: Monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n&lt;/style&gt;\n\n\n&lt;h1 id=\"orange-text\" class=\"pink-text blue-text\"&gt;Hello World!&lt;/h1&gt; //주황색\n\n</pre>\n\nid 값보다 높은 우선순위를 갖는 방법은 in-line으로 스타일을 지정하는 방법입니다. 위의 코드에서 h1에 `style=\"color: white\"`를 추가해주면 다른 class/id보다 높은 우선순위를 가진 in-line style에 의해 h1는 흰색으로 표기됩니다.\n\n하지만 이 모든 방법보다 우위의 순위를 가질 수 있는 방법이 있습니다. 바로 `!important`를 추가하는 것이죠. 예를들어 모든 class와 id 그리고 in-line style에 의해 가장 마지막으로 밀린 pink-text를 최상위 스타일로 적용하고 싶다면, `color: pink !important;`를 적용해주면 된다. 이 결과로 h1은 분홍색으로 표기됩니다.\n\n**정리하자면 CSS Style의 우선순위는**\n\n  1. **동일한 class일 경우 가장 마지막에 선언된 Style이 높다.**\n  2. **(1번을 포함하고) class보다 id가 높다.**\n  3. **id보다 in-line style이 높다.**\n  4. **!important는 앞선 모든 것보다 높다.**\n\n**라고 정의할 수 있습니다.**","source":"_posts/css-style-override.md","raw":"---\nid: 520\ntitle: '[CSS] Style Override'\ndate: 2016-05-11T15:52:47+00:00\nauthor: rabby\nlayout: post\nguid: http://rabbylab.xyz/?p=520\npermalink: /css-style-override/\ncategories:\n  - freecodecamp\ntags:\n  - css\n  - fcc\n  - freecodecamp\n---\nCSS Style Override는 컴포넌트, 라이브러리를 커스텀하기 위해 사용됩니다. 어떤 식으로 Override가 가능한지 살펴보겠습니다.\n\nCSS 파일은 위에서 아래로 순차적으로 실행됩니다. 때문에 동일한 Element에 동시에 적용되는 경우, 가장 마지막에 선언된 Style이 가장 높은 우선순위를 갖습니다.\n\n예를 들어 아래와 같은 상황에서 h1은 blue-text 속성 값을 지니고 파란색으로 표기되죠.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">&lt;style&gt;\n  body {\n    background-color: black;\n    font-family: Monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n&lt;/style&gt;\n\n\n&lt;h1 class=\"pink-text blue-text\"&gt;Hello World!&lt;/h1&gt; //파란색\n\n</pre>\n\n다만 id로 속성을 지정할 경우에는 어떤 class보다 높은 우선순위를 가집니다. 결국 아래와 같은 코드는 h1이 주황색으로 표기됩니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">&lt;style&gt;\n  body {\n    background-color: black;\n    font-family: Monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n&lt;/style&gt;\n\n\n&lt;h1 id=\"orange-text\" class=\"pink-text blue-text\"&gt;Hello World!&lt;/h1&gt; //주황색\n\n</pre>\n\nid 값보다 높은 우선순위를 갖는 방법은 in-line으로 스타일을 지정하는 방법입니다. 위의 코드에서 h1에 `style=\"color: white\"`를 추가해주면 다른 class/id보다 높은 우선순위를 가진 in-line style에 의해 h1는 흰색으로 표기됩니다.\n\n하지만 이 모든 방법보다 우위의 순위를 가질 수 있는 방법이 있습니다. 바로 `!important`를 추가하는 것이죠. 예를들어 모든 class와 id 그리고 in-line style에 의해 가장 마지막으로 밀린 pink-text를 최상위 스타일로 적용하고 싶다면, `color: pink !important;`를 적용해주면 된다. 이 결과로 h1은 분홍색으로 표기됩니다.\n\n**정리하자면 CSS Style의 우선순위는**\n\n  1. **동일한 class일 경우 가장 마지막에 선언된 Style이 높다.**\n  2. **(1번을 포함하고) class보다 id가 높다.**\n  3. **id보다 in-line style이 높다.**\n  4. **!important는 앞선 모든 것보다 높다.**\n\n**라고 정의할 수 있습니다.**","slug":"/css-style-override/","published":1,"updated":"2017-03-01T06:36:04.000Z","comments":1,"photos":[],"link":"","_id":"cizqle7qi0006hyvg8ku02sdv","content":"<p>CSS Style Override는 컴포넌트, 라이브러리를 커스텀하기 위해 사용됩니다. 어떤 식으로 Override가 가능한지 살펴보겠습니다.</p>\n<p>CSS 파일은 위에서 아래로 순차적으로 실행됩니다. 때문에 동일한 Element에 동시에 적용되는 경우, 가장 마지막에 선언된 Style이 가장 높은 우선순위를 갖습니다.</p>\n<p>예를 들어 아래와 같은 상황에서 h1은 blue-text 속성 값을 지니고 파란색으로 표기되죠.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">&lt;style&gt;\n  body {\n    background-color: black;\n    font-family: Monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n&lt;/style&gt;\n\n\n&lt;h1 class=\"pink-text blue-text\"&gt;Hello World!&lt;/h1&gt; //파란색\n\n</pre>\n\n<p>다만 id로 속성을 지정할 경우에는 어떤 class보다 높은 우선순위를 가집니다. 결국 아래와 같은 코드는 h1이 주황색으로 표기됩니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">&lt;style&gt;\n  body {\n    background-color: black;\n    font-family: Monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n&lt;/style&gt;\n\n\n&lt;h1 id=\"orange-text\" class=\"pink-text blue-text\"&gt;Hello World!&lt;/h1&gt; //주황색\n\n</pre>\n\n<p>id 값보다 높은 우선순위를 갖는 방법은 in-line으로 스타일을 지정하는 방법입니다. 위의 코드에서 h1에 <code>style=&quot;color: white&quot;</code>를 추가해주면 다른 class/id보다 높은 우선순위를 가진 in-line style에 의해 h1는 흰색으로 표기됩니다.</p>\n<p>하지만 이 모든 방법보다 우위의 순위를 가질 수 있는 방법이 있습니다. 바로 <code>!important</code>를 추가하는 것이죠. 예를들어 모든 class와 id 그리고 in-line style에 의해 가장 마지막으로 밀린 pink-text를 최상위 스타일로 적용하고 싶다면, <code>color: pink !important;</code>를 적용해주면 된다. 이 결과로 h1은 분홍색으로 표기됩니다.</p>\n<p><strong>정리하자면 CSS Style의 우선순위는</strong></p>\n<ol>\n<li><strong>동일한 class일 경우 가장 마지막에 선언된 Style이 높다.</strong></li>\n<li><strong>(1번을 포함하고) class보다 id가 높다.</strong></li>\n<li><strong>id보다 in-line style이 높다.</strong></li>\n<li><strong>!important는 앞선 모든 것보다 높다.</strong></li>\n</ol>\n<p><strong>라고 정의할 수 있습니다.</strong></p>\n","excerpt":"","more":"<p>CSS Style Override는 컴포넌트, 라이브러리를 커스텀하기 위해 사용됩니다. 어떤 식으로 Override가 가능한지 살펴보겠습니다.</p>\n<p>CSS 파일은 위에서 아래로 순차적으로 실행됩니다. 때문에 동일한 Element에 동시에 적용되는 경우, 가장 마지막에 선언된 Style이 가장 높은 우선순위를 갖습니다.</p>\n<p>예를 들어 아래와 같은 상황에서 h1은 blue-text 속성 값을 지니고 파란색으로 표기되죠.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">&lt;style&gt;\n  body {\n    background-color: black;\n    font-family: Monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n&lt;/style&gt;\n\n\n&lt;h1 class=\"pink-text blue-text\"&gt;Hello World!&lt;/h1&gt; //파란색\n\n</pre>\n\n<p>다만 id로 속성을 지정할 경우에는 어떤 class보다 높은 우선순위를 가집니다. 결국 아래와 같은 코드는 h1이 주황색으로 표기됩니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">&lt;style&gt;\n  body {\n    background-color: black;\n    font-family: Monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n&lt;/style&gt;\n\n\n&lt;h1 id=\"orange-text\" class=\"pink-text blue-text\"&gt;Hello World!&lt;/h1&gt; //주황색\n\n</pre>\n\n<p>id 값보다 높은 우선순위를 갖는 방법은 in-line으로 스타일을 지정하는 방법입니다. 위의 코드에서 h1에 <code>style=&quot;color: white&quot;</code>를 추가해주면 다른 class/id보다 높은 우선순위를 가진 in-line style에 의해 h1는 흰색으로 표기됩니다.</p>\n<p>하지만 이 모든 방법보다 우위의 순위를 가질 수 있는 방법이 있습니다. 바로 <code>!important</code>를 추가하는 것이죠. 예를들어 모든 class와 id 그리고 in-line style에 의해 가장 마지막으로 밀린 pink-text를 최상위 스타일로 적용하고 싶다면, <code>color: pink !important;</code>를 적용해주면 된다. 이 결과로 h1은 분홍색으로 표기됩니다.</p>\n<p><strong>정리하자면 CSS Style의 우선순위는</strong></p>\n<ol>\n<li><strong>동일한 class일 경우 가장 마지막에 선언된 Style이 높다.</strong></li>\n<li><strong>(1번을 포함하고) class보다 id가 높다.</strong></li>\n<li><strong>id보다 in-line style이 높다.</strong></li>\n<li><strong>!important는 앞선 모든 것보다 높다.</strong></li>\n</ol>\n<p><strong>라고 정의할 수 있습니다.</strong></p>\n"},{"id":"25","title":"블로그 및 운영자 소개","date":"2015-07-17T11:19:54.000Z","author":"rabby","layout":"post","guid":"https://rabbylab.wordpress.com/?p=25","geo_public":[0],"_content":"<h5 style=\"text-align: center;\">\n  <img class=\"alignnone size-medium wp-image-11\" src=\"http://52.79.121.91/blog/wp-content/uploads/2015/07/profile_1-259x300.png\" alt=\"profile_1\" width=\"259\" height=\"300\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/profile_1-259x300.png 259w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/profile_1.png 299w\" sizes=\"(max-width: 259px) 100vw, 259px\" />\n</h5>\n\n<h5 style=\"text-align: center;\">\n  RABBY LAB에 오신 걸 환영합니다.\n</h5>\n\n<p style=\"text-align: center;\">\n  RABBY LAB은 대학생인 제가 개발자로 성장해나가는 과정을 담고 있습니다.\n</p>\n\n<p style=\"text-align: center;\">\n  앞으로 본 블로그에는 저의 학업적, 직업적 성장과정이 담길 것입니다.<br /> 이를 통해 제 자신은 정리하는 습관과 성장이 배가되는 효과를<br /> 독자분들은 소소한 재미와 위로를 얻어가실 수 있길 기대해봅니다.\n</p>\n\n<p style=\"text-align: center;\">\n  부족한 점에 대한 조언은 언제나 환영합니다.<br /> 아래의 메일로 연락주시기 바랍니다.<br /> imjoeunha@gmail.com\n</p>","source":"_posts/introduction-to-blog.md","raw":"---\nid: 25\ntitle: 블로그 및 운영자 소개\ndate: 2015-07-17T20:19:54+00:00\nauthor: rabby\nlayout: post\nguid: https://rabbylab.wordpress.com/?p=25\npermalink: /%eb%b8%94%eb%a1%9c%ea%b7%b8-%eb%b0%8f-%ec%9a%b4%ec%98%81%ec%9e%90-%ec%86%8c%ea%b0%9c/\ngeo_public:\n  - 0\ncategories:\n  - rabbylab\ntags:\n  - about\n  - me\n  - rabby\n  - rabbylab\n---\n<h5 style=\"text-align: center;\">\n  <img class=\"alignnone size-medium wp-image-11\" src=\"http://52.79.121.91/blog/wp-content/uploads/2015/07/profile_1-259x300.png\" alt=\"profile_1\" width=\"259\" height=\"300\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/profile_1-259x300.png 259w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/profile_1.png 299w\" sizes=\"(max-width: 259px) 100vw, 259px\" />\n</h5>\n\n<h5 style=\"text-align: center;\">\n  RABBY LAB에 오신 걸 환영합니다.\n</h5>\n\n<p style=\"text-align: center;\">\n  RABBY LAB은 대학생인 제가 개발자로 성장해나가는 과정을 담고 있습니다.\n</p>\n\n<p style=\"text-align: center;\">\n  앞으로 본 블로그에는 저의 학업적, 직업적 성장과정이 담길 것입니다.<br /> 이를 통해 제 자신은 정리하는 습관과 성장이 배가되는 효과를<br /> 독자분들은 소소한 재미와 위로를 얻어가실 수 있길 기대해봅니다.\n</p>\n\n<p style=\"text-align: center;\">\n  부족한 점에 대한 조언은 언제나 환영합니다.<br /> 아래의 메일로 연락주시기 바랍니다.<br /> imjoeunha@gmail.com\n</p>","slug":"/%eb%b8%94%eb%a1%9c%ea%b7%b8-%eb%b0%8f-%ec%9a%b4%ec%98%81%ec%9e%90-%ec%86%8c%ea%b0%9c/","published":1,"updated":"2017-03-01T06:31:40.000Z","comments":1,"photos":[],"link":"","_id":"cizqle7qo0009hyvgfm5rx1r8","content":"<h5 style=\"text-align: center;\"><br>  <img class=\"alignnone size-medium wp-image-11\" src=\"http://52.79.121.91/blog/wp-content/uploads/2015/07/profile_1-259x300.png\" alt=\"profile_1\" width=\"259\" height=\"300\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/profile_1-259x300.png 259w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/profile_1.png 299w\" sizes=\"(max-width: 259px) 100vw, 259px\"><br></h5>\n\n<h5 style=\"text-align: center;\"><br>  RABBY LAB에 오신 걸 환영합니다.<br></h5>\n\n<p style=\"text-align: center;\"><br>  RABBY LAB은 대학생인 제가 개발자로 성장해나가는 과정을 담고 있습니다.<br></p>\n\n<p style=\"text-align: center;\"><br>  앞으로 본 블로그에는 저의 학업적, 직업적 성장과정이 담길 것입니다.<br> 이를 통해 제 자신은 정리하는 습관과 성장이 배가되는 효과를<br> 독자분들은 소소한 재미와 위로를 얻어가실 수 있길 기대해봅니다.<br></p>\n\n<p style=\"text-align: center;\"><br>  부족한 점에 대한 조언은 언제나 환영합니다.<br> 아래의 메일로 연락주시기 바랍니다.<br> imjoeunha@gmail.com<br></p>","excerpt":"","more":"<h5 style=\"text-align: center;\"><br>  <img class=\"alignnone size-medium wp-image-11\" src=\"http://52.79.121.91/blog/wp-content/uploads/2015/07/profile_1-259x300.png\" alt=\"profile_1\" width=\"259\" height=\"300\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/profile_1-259x300.png 259w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/profile_1.png 299w\" sizes=\"(max-width: 259px) 100vw, 259px\" /><br></h5>\n\n<h5 style=\"text-align: center;\"><br>  RABBY LAB에 오신 걸 환영합니다.<br></h5>\n\n<p style=\"text-align: center;\"><br>  RABBY LAB은 대학생인 제가 개발자로 성장해나가는 과정을 담고 있습니다.<br></p>\n\n<p style=\"text-align: center;\"><br>  앞으로 본 블로그에는 저의 학업적, 직업적 성장과정이 담길 것입니다.<br /> 이를 통해 제 자신은 정리하는 습관과 성장이 배가되는 효과를<br /> 독자분들은 소소한 재미와 위로를 얻어가실 수 있길 기대해봅니다.<br></p>\n\n<p style=\"text-align: center;\"><br>  부족한 점에 대한 조언은 언제나 환영합니다.<br /> 아래의 메일로 연락주시기 바랍니다.<br /> imjoeunha@gmail.com<br></p>"},{"id":"87","title":"자바스크립트의 예약어","date":"2015-08-31T22:30:00.000Z","author":"rabby","layout":"post","guid":"https://rabbylab.wordpress.com/?p=87","_content":"다른 언어들과 마찬가지로 자바스크립트 역시 문장, 변수, 매개변수, 연산자, 라벨 등에 사용하는 이름을 정하는데 있어서 문자, 숫자, _(under bar)만을 사용하도록 허용하고 있습니다.\n\n모든 것이 가능하지만 특별히 사용할 수 없는  &#8216;예약어&#8217;가 존재합니다. 예약어는 말 그대로 예약된 단어입니다. 다른 용도로 사용되거나 사용될 여지가 있는 단어를 의미합니다. 그 목록은 아래와 같습니다.\n\n<p style=\"padding-left:30px;\">\n  A &#8211; abstract\n</p>\n\n<p style=\"padding-left:30px;\">\n  B &#8211; boolean, break, byte\n</p>\n\n<p style=\"padding-left:30px;\">\n  C &#8211; case, catch, char, class, const, continue\n</p>\n\n<p style=\"padding-left:30px;\">\n  D &#8211; debugger, default, delete, do, double\n</p>\n\n<p style=\"padding-left:30px;\">\n  E &#8211; else, enum, export, extends\n</p>\n\n<p style=\"padding-left:30px;\">\n  F &#8211; false, final, finally, float, for, function\n</p>\n\n<p style=\"padding-left:30px;\">\n  G &#8211; goto\n</p>\n\n<p style=\"padding-left:30px;\">\n  I &#8211; if, implements, import, in, instanceof, int, interface\n</p>\n\n<p style=\"padding-left:30px;\">\n  L &#8211; long\n</p>\n\n<p style=\"padding-left:30px;\">\n  N &#8211; native, new, null\n</p>\n\n<p style=\"padding-left:30px;\">\n  P &#8211; package, private, protected, public\n</p>\n\n<p style=\"padding-left:30px;\">\n  R &#8211; return\n</p>\n\n<p style=\"padding-left:30px;\">\n  S &#8211; short, static, super, switch, synchronized\n</p>\n\n<p style=\"padding-left:30px;\">\n  T &#8211; this, throw, throws, transient, true, try, typeof\n</p>\n\n<p style=\"padding-left:30px;\">\n  V &#8211; var, volatile, void\n</p>\n\n<p style=\"padding-left:30px;\">\n  W &#8211; while, with\n</p>\n\n이상 55개의 예약어가 있습니다. 예약어는 변수 이름이나 매겨변수 이름으로 사용할 수 없습니다.","source":"_posts/javascript-keywords.md","raw":"---\nid: 87\ntitle: 자바스크립트의 예약어\ndate: 2015-09-01T07:30:00+00:00\nauthor: rabby\nlayout: post\nguid: https://rabbylab.wordpress.com/?p=87\npermalink: /%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8%ec%9d%98-%ec%98%88%ec%95%bd%ec%96%b4/\ncategories:\n  - javascript\ntags:\n  - javascript\n  - 예약어\n  - 이름\n---\n다른 언어들과 마찬가지로 자바스크립트 역시 문장, 변수, 매개변수, 연산자, 라벨 등에 사용하는 이름을 정하는데 있어서 문자, 숫자, _(under bar)만을 사용하도록 허용하고 있습니다.\n\n모든 것이 가능하지만 특별히 사용할 수 없는  &#8216;예약어&#8217;가 존재합니다. 예약어는 말 그대로 예약된 단어입니다. 다른 용도로 사용되거나 사용될 여지가 있는 단어를 의미합니다. 그 목록은 아래와 같습니다.\n\n<p style=\"padding-left:30px;\">\n  A &#8211; abstract\n</p>\n\n<p style=\"padding-left:30px;\">\n  B &#8211; boolean, break, byte\n</p>\n\n<p style=\"padding-left:30px;\">\n  C &#8211; case, catch, char, class, const, continue\n</p>\n\n<p style=\"padding-left:30px;\">\n  D &#8211; debugger, default, delete, do, double\n</p>\n\n<p style=\"padding-left:30px;\">\n  E &#8211; else, enum, export, extends\n</p>\n\n<p style=\"padding-left:30px;\">\n  F &#8211; false, final, finally, float, for, function\n</p>\n\n<p style=\"padding-left:30px;\">\n  G &#8211; goto\n</p>\n\n<p style=\"padding-left:30px;\">\n  I &#8211; if, implements, import, in, instanceof, int, interface\n</p>\n\n<p style=\"padding-left:30px;\">\n  L &#8211; long\n</p>\n\n<p style=\"padding-left:30px;\">\n  N &#8211; native, new, null\n</p>\n\n<p style=\"padding-left:30px;\">\n  P &#8211; package, private, protected, public\n</p>\n\n<p style=\"padding-left:30px;\">\n  R &#8211; return\n</p>\n\n<p style=\"padding-left:30px;\">\n  S &#8211; short, static, super, switch, synchronized\n</p>\n\n<p style=\"padding-left:30px;\">\n  T &#8211; this, throw, throws, transient, true, try, typeof\n</p>\n\n<p style=\"padding-left:30px;\">\n  V &#8211; var, volatile, void\n</p>\n\n<p style=\"padding-left:30px;\">\n  W &#8211; while, with\n</p>\n\n이상 55개의 예약어가 있습니다. 예약어는 변수 이름이나 매겨변수 이름으로 사용할 수 없습니다.","slug":"/%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8%ec%9d%98-%ec%98%88%ec%95%bd%ec%96%b4/","published":1,"updated":"2017-03-01T06:39:02.000Z","comments":1,"photos":[],"link":"","_id":"cizqle7qr000chyvg6lcf1jd4","content":"<p>다른 언어들과 마찬가지로 자바스크립트 역시 문장, 변수, 매개변수, 연산자, 라벨 등에 사용하는 이름을 정하는데 있어서 문자, 숫자, _(under bar)만을 사용하도록 허용하고 있습니다.</p>\n<p>모든 것이 가능하지만 특별히 사용할 수 없는  &#8216;예약어&#8217;가 존재합니다. 예약어는 말 그대로 예약된 단어입니다. 다른 용도로 사용되거나 사용될 여지가 있는 단어를 의미합니다. 그 목록은 아래와 같습니다.</p>\n<p style=\"padding-left:30px;\"><br>  A &#8211; abstract<br></p>\n\n<p style=\"padding-left:30px;\"><br>  B &#8211; boolean, break, byte<br></p>\n\n<p style=\"padding-left:30px;\"><br>  C &#8211; case, catch, char, class, const, continue<br></p>\n\n<p style=\"padding-left:30px;\"><br>  D &#8211; debugger, default, delete, do, double<br></p>\n\n<p style=\"padding-left:30px;\"><br>  E &#8211; else, enum, export, extends<br></p>\n\n<p style=\"padding-left:30px;\"><br>  F &#8211; false, final, finally, float, for, function<br></p>\n\n<p style=\"padding-left:30px;\"><br>  G &#8211; goto<br></p>\n\n<p style=\"padding-left:30px;\"><br>  I &#8211; if, implements, import, in, instanceof, int, interface<br></p>\n\n<p style=\"padding-left:30px;\"><br>  L &#8211; long<br></p>\n\n<p style=\"padding-left:30px;\"><br>  N &#8211; native, new, null<br></p>\n\n<p style=\"padding-left:30px;\"><br>  P &#8211; package, private, protected, public<br></p>\n\n<p style=\"padding-left:30px;\"><br>  R &#8211; return<br></p>\n\n<p style=\"padding-left:30px;\"><br>  S &#8211; short, static, super, switch, synchronized<br></p>\n\n<p style=\"padding-left:30px;\"><br>  T &#8211; this, throw, throws, transient, true, try, typeof<br></p>\n\n<p style=\"padding-left:30px;\"><br>  V &#8211; var, volatile, void<br></p>\n\n<p style=\"padding-left:30px;\"><br>  W &#8211; while, with<br></p>\n\n<p>이상 55개의 예약어가 있습니다. 예약어는 변수 이름이나 매겨변수 이름으로 사용할 수 없습니다.</p>\n","excerpt":"","more":"<p>다른 언어들과 마찬가지로 자바스크립트 역시 문장, 변수, 매개변수, 연산자, 라벨 등에 사용하는 이름을 정하는데 있어서 문자, 숫자, _(under bar)만을 사용하도록 허용하고 있습니다.</p>\n<p>모든 것이 가능하지만 특별히 사용할 수 없는  &#8216;예약어&#8217;가 존재합니다. 예약어는 말 그대로 예약된 단어입니다. 다른 용도로 사용되거나 사용될 여지가 있는 단어를 의미합니다. 그 목록은 아래와 같습니다.</p>\n<p style=\"padding-left:30px;\"><br>  A &#8211; abstract<br></p>\n\n<p style=\"padding-left:30px;\"><br>  B &#8211; boolean, break, byte<br></p>\n\n<p style=\"padding-left:30px;\"><br>  C &#8211; case, catch, char, class, const, continue<br></p>\n\n<p style=\"padding-left:30px;\"><br>  D &#8211; debugger, default, delete, do, double<br></p>\n\n<p style=\"padding-left:30px;\"><br>  E &#8211; else, enum, export, extends<br></p>\n\n<p style=\"padding-left:30px;\"><br>  F &#8211; false, final, finally, float, for, function<br></p>\n\n<p style=\"padding-left:30px;\"><br>  G &#8211; goto<br></p>\n\n<p style=\"padding-left:30px;\"><br>  I &#8211; if, implements, import, in, instanceof, int, interface<br></p>\n\n<p style=\"padding-left:30px;\"><br>  L &#8211; long<br></p>\n\n<p style=\"padding-left:30px;\"><br>  N &#8211; native, new, null<br></p>\n\n<p style=\"padding-left:30px;\"><br>  P &#8211; package, private, protected, public<br></p>\n\n<p style=\"padding-left:30px;\"><br>  R &#8211; return<br></p>\n\n<p style=\"padding-left:30px;\"><br>  S &#8211; short, static, super, switch, synchronized<br></p>\n\n<p style=\"padding-left:30px;\"><br>  T &#8211; this, throw, throws, transient, true, try, typeof<br></p>\n\n<p style=\"padding-left:30px;\"><br>  V &#8211; var, volatile, void<br></p>\n\n<p style=\"padding-left:30px;\"><br>  W &#8211; while, with<br></p>\n\n<p>이상 55개의 예약어가 있습니다. 예약어는 변수 이름이나 매겨변수 이름으로 사용할 수 없습니다.</p>\n"},{"id":"464","title":"fork(), execlp(), wait() 함수","date":"2016-03-25T15:27:03.000Z","author":"rabby","layout":"post","guid":"http://rabbylab.xyz/?p=464","_content":"운영체제를 배우고 있습니다. <a href=\"http://rabbylab.xyz/%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%a8-%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4-%ec%8a%a4%eb%a0%88%eb%93%9c/\" target=\"_blank\">이전 글</a>에서 프로그램, 프로세스 그리고 스레드에 대해 다뤘습니다. 오늘은 fork(), execlp(), wait() 함수를 살펴보겠습니다.\n\n이 세 함수는 앞서 살펴본 프로세스와 연관을 맺고 있는 함수입니다. 각각 복사, 대체, 대기를 담당하는 함수들입니다. 오늘은 예시와 함께 살펴보도록 하겠습니다. 예시는 C 언어로 작성되었습니다.\n\n먼저 fork() 함수 입니다. 이 함수는 프로세스를 복사(duplicate)합니다. 이때 복사가 되어지는 원본을 parent 라고 부르고 복사가 된 복사본을 child 라고 부릅니다. 자식은 부모의 판박이라 복사본인 프로세스는 부모와 동일한 코드를 가집니다. 다만 자식이 부모의 자리를 넘봐선 안되겠죠? 이쪽 세계에도 질서가 있습니다. Process ID(PID)를 부여해서 자식과 부모를 구분짓습니다. 부모의 PID는 다양하게 형성됩니다. 하지만 자식의 경우는 ID가 항상 0 입니다. 구분짓기 쉽죠.\n\n이제 아래의 코드를 보겠습니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n\nint main(int argc, char *argv[]) {\n\n   fork();\n   printf(\"Hello, World!\\n\");\n   \n   return 0;\n}\n</pre>\n\n우리에게 너무나 익숙한 Hello, World! 를 출력하는 코드입니다. printf 앞에 fork 함수가 자리하고 있습니다. 이 코드의 결과물은 Hello, World! 가 두번 출력되는 것으로 끝입니다. 그 내용은 그리 어렵지 않습니다. fork 함수는 자신을 포함한 프로세스 전체를 복사하여 새로운 프로세스를 하나 만듭니다. 두개의 프로세스가 Hello, World!를 출력하고 종료됩니다. 그렇다면 메세지를 여덟번 출력하기 위해선 fork 함수를 몇번 사용해야 할까요? 정답은 세번입니다.\n\n저는 이걸 이해하는데 은근히 오래걸렸습니다. 어떻게 세번일까요? 이렇게 이해하면 쉽습니다. &#8216;1 &#8211; 2 &#8211; 4 &#8211; 8&#8217; 하나가 두개가 되고 두개가 네개가 되고&#8230; 두배씩 커지는거죠. 이 간단한 원리를&#8230; 저는 종이 몇장을 찢어가며 고민했습니다.\n\n이제 exec 식구(family)들을 만나볼 시간입니다. execlp 함수는 가족이 많습니다. exec 가문이죠. 가족 구성원은 execl, execlp, execle, execv, execvp, execvpe 가 있습니다. 이들의 역할은 특정 파일을 실행(execute)하는 것 입니다. 그 파일을 실행하여 현재 프로세스를 대체(replace)해버립니다. 다른 이름을 가지고 있지만 결과적으로 하는 일은 같습니다. 다만 일하는 방식, 사용되는 방식이 각기 이름따라 다릅니다. 저는 execlp 만 다루겠습니다. 코드 보시겠습니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(int argc, char *argv[]) {\n\n   execlp(\"./hello\", \"hello\", NULL);\n   printf(\"This is execlp function test!\\n\");\n\n   return 0;\n} \n</pre>\n\n이 코드도 앞선 fork 예제처럼 Hello, World! 메세지를 출력하게 됩니다. 갑자기 무슨 소리냐고 하실지 모르지만 결과적으론 그렇습니다. 주인공인 execlp 함수를 살펴보기 전에 hello 라는 프로그램을 만들어두었다는 점을 이해하셔야합니다. hello 프로그램은 Hello, world! 라는 메세지를 출력하는 프로그램입니다. 결국 저희는 이 프로그램을 다른 프로세스에서 실행시키고자 하는 중입니다. 그럼 이제 그 주체가 되는 execlp 함수를 살펴보겠습니다. 총 세개의 인자를 가지고 있습니다. 첫번째 인자인 &#8220;./hello&#8221; 는 실행시킬 프로세스의 경로를 의미합니다. 그럼 두번째 인자는 뭘까요? 이는 프로그램의 이름을 의미합니다. 이때 적힌 이름은 지금 경로에 위치한 프로그램의 이름이 아니라 호출하는 프로세스에서 부르게될 이름입니다. 그래서 hello가 아니라 bye라고 해도 무방합니다. 세번째는 옵션입니다. 저희는 특별한 옵션을 넣지 않기로 하고 NULL 값을 넣어주었습니다. 결과적으로 ./hello 경로에 있는 hello 프로그램이 호출되며 기존의 프로세스를 대체하기 때문에 그 이후에 등장하는 메세지를 출력하지 않습니다.\n\n이제 마지막 wait입니다. 이 함수는 이름처럼 특정 프로세스의 종료를 기다립니다(wait). 코드를 보겠습니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(int argc, char *argv[]) {\n\n   int child_pid = fork();\n   if(child_pid == 0) {\n      execlp(\"./hello\", \"bye\", NULL);\n   }\n   else {\n      wait();\n      printf(\"This is wait function test!\\n\");\n   }\n   \n   return 0;\n}\n</pre>\n\n결과부터 생각해볼까요? 위의 if문 안에 있는 execlp는 같은 프로그램을 호출한 것이라면 Hello, World!가 출력될 것입니다. 그리고 다른 출력문인 This is wait function test! 구문도 출력됩니다. 어떻게요? 이제 살펴보죠. 우선 첫번째 줄의 child\\_pid라는 변수는 fork()의 리턴 값을 받습니다. 이때 알아야할 것이 fork()가 어떤 값을 리턴하는가 하는 것이죠. fork는 프로세스의 ID 값을 리턴합니다. 그러니까 앞서 말씀드린 것 처럼 child인 경우에 0을 돌려보내겠죠. 물론 잊지 말아야할 사실은 fork()가 호출되면서 이미 프로세스가 복사되었다는 사실입니다. 그래서 두개의 프로세스에서 같은 코드를 진행해갑니다. 다만 다른 것은 child\\_pid 값 뿐이죠. 그로인해 출력되는 값도 달라집니다. 부모는 else 구문에 있는 메세지를 출력하고, 자식은 execlp를 통해 hello 프로그램을 자신과 대체시킵니다. 결과적으론 자식을 대체한 hello 프로그램이 먼저 실행되고 부모의 메세지가 등장하게 됩니다. wait 함수가 부모 프로세스로 하여금 자식 프로세스가 끝나길 기다리게 만들기 때문입니다. 이해되셨나요?\n\n위의 모든 코드는 vi로 작성되었고 gcc컴파일러를 통해 컴파일하고 리눅스 환경에서 테스트 되었습니다. 오류 혹은 질문은 댓글 주시면 감사하겠습니다. 감사합니다.","source":"_posts/fork-execlp-wait.md","raw":"---\nid: 464\ntitle: fork(), execlp(), wait() 함수\ndate: 2016-03-26T00:27:03+00:00\nauthor: rabby\nlayout: post\nguid: http://rabbylab.xyz/?p=464\npermalink: /fork-execlp-wait-%ed%95%a8%ec%88%98/\ncategories:\n  - cs basic\ntags:\n  - csbasic\n  - operatingsystem\n  - os\n---\n운영체제를 배우고 있습니다. <a href=\"http://rabbylab.xyz/%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%a8-%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4-%ec%8a%a4%eb%a0%88%eb%93%9c/\" target=\"_blank\">이전 글</a>에서 프로그램, 프로세스 그리고 스레드에 대해 다뤘습니다. 오늘은 fork(), execlp(), wait() 함수를 살펴보겠습니다.\n\n이 세 함수는 앞서 살펴본 프로세스와 연관을 맺고 있는 함수입니다. 각각 복사, 대체, 대기를 담당하는 함수들입니다. 오늘은 예시와 함께 살펴보도록 하겠습니다. 예시는 C 언어로 작성되었습니다.\n\n먼저 fork() 함수 입니다. 이 함수는 프로세스를 복사(duplicate)합니다. 이때 복사가 되어지는 원본을 parent 라고 부르고 복사가 된 복사본을 child 라고 부릅니다. 자식은 부모의 판박이라 복사본인 프로세스는 부모와 동일한 코드를 가집니다. 다만 자식이 부모의 자리를 넘봐선 안되겠죠? 이쪽 세계에도 질서가 있습니다. Process ID(PID)를 부여해서 자식과 부모를 구분짓습니다. 부모의 PID는 다양하게 형성됩니다. 하지만 자식의 경우는 ID가 항상 0 입니다. 구분짓기 쉽죠.\n\n이제 아래의 코드를 보겠습니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n\nint main(int argc, char *argv[]) {\n\n   fork();\n   printf(\"Hello, World!\\n\");\n   \n   return 0;\n}\n</pre>\n\n우리에게 너무나 익숙한 Hello, World! 를 출력하는 코드입니다. printf 앞에 fork 함수가 자리하고 있습니다. 이 코드의 결과물은 Hello, World! 가 두번 출력되는 것으로 끝입니다. 그 내용은 그리 어렵지 않습니다. fork 함수는 자신을 포함한 프로세스 전체를 복사하여 새로운 프로세스를 하나 만듭니다. 두개의 프로세스가 Hello, World!를 출력하고 종료됩니다. 그렇다면 메세지를 여덟번 출력하기 위해선 fork 함수를 몇번 사용해야 할까요? 정답은 세번입니다.\n\n저는 이걸 이해하는데 은근히 오래걸렸습니다. 어떻게 세번일까요? 이렇게 이해하면 쉽습니다. &#8216;1 &#8211; 2 &#8211; 4 &#8211; 8&#8217; 하나가 두개가 되고 두개가 네개가 되고&#8230; 두배씩 커지는거죠. 이 간단한 원리를&#8230; 저는 종이 몇장을 찢어가며 고민했습니다.\n\n이제 exec 식구(family)들을 만나볼 시간입니다. execlp 함수는 가족이 많습니다. exec 가문이죠. 가족 구성원은 execl, execlp, execle, execv, execvp, execvpe 가 있습니다. 이들의 역할은 특정 파일을 실행(execute)하는 것 입니다. 그 파일을 실행하여 현재 프로세스를 대체(replace)해버립니다. 다른 이름을 가지고 있지만 결과적으로 하는 일은 같습니다. 다만 일하는 방식, 사용되는 방식이 각기 이름따라 다릅니다. 저는 execlp 만 다루겠습니다. 코드 보시겠습니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(int argc, char *argv[]) {\n\n   execlp(\"./hello\", \"hello\", NULL);\n   printf(\"This is execlp function test!\\n\");\n\n   return 0;\n} \n</pre>\n\n이 코드도 앞선 fork 예제처럼 Hello, World! 메세지를 출력하게 됩니다. 갑자기 무슨 소리냐고 하실지 모르지만 결과적으론 그렇습니다. 주인공인 execlp 함수를 살펴보기 전에 hello 라는 프로그램을 만들어두었다는 점을 이해하셔야합니다. hello 프로그램은 Hello, world! 라는 메세지를 출력하는 프로그램입니다. 결국 저희는 이 프로그램을 다른 프로세스에서 실행시키고자 하는 중입니다. 그럼 이제 그 주체가 되는 execlp 함수를 살펴보겠습니다. 총 세개의 인자를 가지고 있습니다. 첫번째 인자인 &#8220;./hello&#8221; 는 실행시킬 프로세스의 경로를 의미합니다. 그럼 두번째 인자는 뭘까요? 이는 프로그램의 이름을 의미합니다. 이때 적힌 이름은 지금 경로에 위치한 프로그램의 이름이 아니라 호출하는 프로세스에서 부르게될 이름입니다. 그래서 hello가 아니라 bye라고 해도 무방합니다. 세번째는 옵션입니다. 저희는 특별한 옵션을 넣지 않기로 하고 NULL 값을 넣어주었습니다. 결과적으로 ./hello 경로에 있는 hello 프로그램이 호출되며 기존의 프로세스를 대체하기 때문에 그 이후에 등장하는 메세지를 출력하지 않습니다.\n\n이제 마지막 wait입니다. 이 함수는 이름처럼 특정 프로세스의 종료를 기다립니다(wait). 코드를 보겠습니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(int argc, char *argv[]) {\n\n   int child_pid = fork();\n   if(child_pid == 0) {\n      execlp(\"./hello\", \"bye\", NULL);\n   }\n   else {\n      wait();\n      printf(\"This is wait function test!\\n\");\n   }\n   \n   return 0;\n}\n</pre>\n\n결과부터 생각해볼까요? 위의 if문 안에 있는 execlp는 같은 프로그램을 호출한 것이라면 Hello, World!가 출력될 것입니다. 그리고 다른 출력문인 This is wait function test! 구문도 출력됩니다. 어떻게요? 이제 살펴보죠. 우선 첫번째 줄의 child\\_pid라는 변수는 fork()의 리턴 값을 받습니다. 이때 알아야할 것이 fork()가 어떤 값을 리턴하는가 하는 것이죠. fork는 프로세스의 ID 값을 리턴합니다. 그러니까 앞서 말씀드린 것 처럼 child인 경우에 0을 돌려보내겠죠. 물론 잊지 말아야할 사실은 fork()가 호출되면서 이미 프로세스가 복사되었다는 사실입니다. 그래서 두개의 프로세스에서 같은 코드를 진행해갑니다. 다만 다른 것은 child\\_pid 값 뿐이죠. 그로인해 출력되는 값도 달라집니다. 부모는 else 구문에 있는 메세지를 출력하고, 자식은 execlp를 통해 hello 프로그램을 자신과 대체시킵니다. 결과적으론 자식을 대체한 hello 프로그램이 먼저 실행되고 부모의 메세지가 등장하게 됩니다. wait 함수가 부모 프로세스로 하여금 자식 프로세스가 끝나길 기다리게 만들기 때문입니다. 이해되셨나요?\n\n위의 모든 코드는 vi로 작성되었고 gcc컴파일러를 통해 컴파일하고 리눅스 환경에서 테스트 되었습니다. 오류 혹은 질문은 댓글 주시면 감사하겠습니다. 감사합니다.","slug":"/fork-execlp-wait-%ed%95%a8%ec%88%98/","published":1,"updated":"2017-03-01T06:38:36.000Z","comments":1,"photos":[],"link":"","_id":"cizqle7qu000fhyvgqunpjtav","content":"<p>운영체제를 배우고 있습니다. <a href=\"http://rabbylab.xyz/%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%a8-%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4-%ec%8a%a4%eb%a0%88%eb%93%9c/\" target=\"_blank\">이전 글</a>에서 프로그램, 프로세스 그리고 스레드에 대해 다뤘습니다. 오늘은 fork(), execlp(), wait() 함수를 살펴보겠습니다.</p>\n<p>이 세 함수는 앞서 살펴본 프로세스와 연관을 맺고 있는 함수입니다. 각각 복사, 대체, 대기를 담당하는 함수들입니다. 오늘은 예시와 함께 살펴보도록 하겠습니다. 예시는 C 언어로 작성되었습니다.</p>\n<p>먼저 fork() 함수 입니다. 이 함수는 프로세스를 복사(duplicate)합니다. 이때 복사가 되어지는 원본을 parent 라고 부르고 복사가 된 복사본을 child 라고 부릅니다. 자식은 부모의 판박이라 복사본인 프로세스는 부모와 동일한 코드를 가집니다. 다만 자식이 부모의 자리를 넘봐선 안되겠죠? 이쪽 세계에도 질서가 있습니다. Process ID(PID)를 부여해서 자식과 부모를 구분짓습니다. 부모의 PID는 다양하게 형성됩니다. 하지만 자식의 경우는 ID가 항상 0 입니다. 구분짓기 쉽죠.</p>\n<p>이제 아래의 코드를 보겠습니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n\nint main(int argc, char *argv[]) {\n\n   fork();\n   printf(\"Hello, World!\\n\");\n\n   return 0;\n}\n</pre>\n\n<p>우리에게 너무나 익숙한 Hello, World! 를 출력하는 코드입니다. printf 앞에 fork 함수가 자리하고 있습니다. 이 코드의 결과물은 Hello, World! 가 두번 출력되는 것으로 끝입니다. 그 내용은 그리 어렵지 않습니다. fork 함수는 자신을 포함한 프로세스 전체를 복사하여 새로운 프로세스를 하나 만듭니다. 두개의 프로세스가 Hello, World!를 출력하고 종료됩니다. 그렇다면 메세지를 여덟번 출력하기 위해선 fork 함수를 몇번 사용해야 할까요? 정답은 세번입니다.</p>\n<p>저는 이걸 이해하는데 은근히 오래걸렸습니다. 어떻게 세번일까요? 이렇게 이해하면 쉽습니다. &#8216;1 &#8211; 2 &#8211; 4 &#8211; 8&#8217; 하나가 두개가 되고 두개가 네개가 되고&#8230; 두배씩 커지는거죠. 이 간단한 원리를&#8230; 저는 종이 몇장을 찢어가며 고민했습니다.</p>\n<p>이제 exec 식구(family)들을 만나볼 시간입니다. execlp 함수는 가족이 많습니다. exec 가문이죠. 가족 구성원은 execl, execlp, execle, execv, execvp, execvpe 가 있습니다. 이들의 역할은 특정 파일을 실행(execute)하는 것 입니다. 그 파일을 실행하여 현재 프로세스를 대체(replace)해버립니다. 다른 이름을 가지고 있지만 결과적으로 하는 일은 같습니다. 다만 일하는 방식, 사용되는 방식이 각기 이름따라 다릅니다. 저는 execlp 만 다루겠습니다. 코드 보시겠습니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(int argc, char *argv[]) {\n\n   execlp(\"./hello\", \"hello\", NULL);\n   printf(\"This is execlp function test!\\n\");\n\n   return 0;\n} \n</pre>\n\n<p>이 코드도 앞선 fork 예제처럼 Hello, World! 메세지를 출력하게 됩니다. 갑자기 무슨 소리냐고 하실지 모르지만 결과적으론 그렇습니다. 주인공인 execlp 함수를 살펴보기 전에 hello 라는 프로그램을 만들어두었다는 점을 이해하셔야합니다. hello 프로그램은 Hello, world! 라는 메세지를 출력하는 프로그램입니다. 결국 저희는 이 프로그램을 다른 프로세스에서 실행시키고자 하는 중입니다. 그럼 이제 그 주체가 되는 execlp 함수를 살펴보겠습니다. 총 세개의 인자를 가지고 있습니다. 첫번째 인자인 &#8220;./hello&#8221; 는 실행시킬 프로세스의 경로를 의미합니다. 그럼 두번째 인자는 뭘까요? 이는 프로그램의 이름을 의미합니다. 이때 적힌 이름은 지금 경로에 위치한 프로그램의 이름이 아니라 호출하는 프로세스에서 부르게될 이름입니다. 그래서 hello가 아니라 bye라고 해도 무방합니다. 세번째는 옵션입니다. 저희는 특별한 옵션을 넣지 않기로 하고 NULL 값을 넣어주었습니다. 결과적으로 ./hello 경로에 있는 hello 프로그램이 호출되며 기존의 프로세스를 대체하기 때문에 그 이후에 등장하는 메세지를 출력하지 않습니다.</p>\n<p>이제 마지막 wait입니다. 이 함수는 이름처럼 특정 프로세스의 종료를 기다립니다(wait). 코드를 보겠습니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(int argc, char *argv[]) {\n\n   int child_pid = fork();\n   if(child_pid == 0) {\n      execlp(\"./hello\", \"bye\", NULL);\n   }\n   else {\n      wait();\n      printf(\"This is wait function test!\\n\");\n   }\n\n   return 0;\n}\n</pre>\n\n<p>결과부터 생각해볼까요? 위의 if문 안에 있는 execlp는 같은 프로그램을 호출한 것이라면 Hello, World!가 출력될 것입니다. 그리고 다른 출력문인 This is wait function test! 구문도 출력됩니다. 어떻게요? 이제 살펴보죠. 우선 첫번째 줄의 child_pid라는 변수는 fork()의 리턴 값을 받습니다. 이때 알아야할 것이 fork()가 어떤 값을 리턴하는가 하는 것이죠. fork는 프로세스의 ID 값을 리턴합니다. 그러니까 앞서 말씀드린 것 처럼 child인 경우에 0을 돌려보내겠죠. 물론 잊지 말아야할 사실은 fork()가 호출되면서 이미 프로세스가 복사되었다는 사실입니다. 그래서 두개의 프로세스에서 같은 코드를 진행해갑니다. 다만 다른 것은 child_pid 값 뿐이죠. 그로인해 출력되는 값도 달라집니다. 부모는 else 구문에 있는 메세지를 출력하고, 자식은 execlp를 통해 hello 프로그램을 자신과 대체시킵니다. 결과적으론 자식을 대체한 hello 프로그램이 먼저 실행되고 부모의 메세지가 등장하게 됩니다. wait 함수가 부모 프로세스로 하여금 자식 프로세스가 끝나길 기다리게 만들기 때문입니다. 이해되셨나요?</p>\n<p>위의 모든 코드는 vi로 작성되었고 gcc컴파일러를 통해 컴파일하고 리눅스 환경에서 테스트 되었습니다. 오류 혹은 질문은 댓글 주시면 감사하겠습니다. 감사합니다.</p>\n","excerpt":"","more":"<p>운영체제를 배우고 있습니다. <a href=\"http://rabbylab.xyz/%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%a8-%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4-%ec%8a%a4%eb%a0%88%eb%93%9c/\" target=\"_blank\">이전 글</a>에서 프로그램, 프로세스 그리고 스레드에 대해 다뤘습니다. 오늘은 fork(), execlp(), wait() 함수를 살펴보겠습니다.</p>\n<p>이 세 함수는 앞서 살펴본 프로세스와 연관을 맺고 있는 함수입니다. 각각 복사, 대체, 대기를 담당하는 함수들입니다. 오늘은 예시와 함께 살펴보도록 하겠습니다. 예시는 C 언어로 작성되었습니다.</p>\n<p>먼저 fork() 함수 입니다. 이 함수는 프로세스를 복사(duplicate)합니다. 이때 복사가 되어지는 원본을 parent 라고 부르고 복사가 된 복사본을 child 라고 부릅니다. 자식은 부모의 판박이라 복사본인 프로세스는 부모와 동일한 코드를 가집니다. 다만 자식이 부모의 자리를 넘봐선 안되겠죠? 이쪽 세계에도 질서가 있습니다. Process ID(PID)를 부여해서 자식과 부모를 구분짓습니다. 부모의 PID는 다양하게 형성됩니다. 하지만 자식의 경우는 ID가 항상 0 입니다. 구분짓기 쉽죠.</p>\n<p>이제 아래의 코드를 보겠습니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n\nint main(int argc, char *argv[]) {\n\n   fork();\n   printf(\"Hello, World!\\n\");\n\n   return 0;\n}\n</pre>\n\n<p>우리에게 너무나 익숙한 Hello, World! 를 출력하는 코드입니다. printf 앞에 fork 함수가 자리하고 있습니다. 이 코드의 결과물은 Hello, World! 가 두번 출력되는 것으로 끝입니다. 그 내용은 그리 어렵지 않습니다. fork 함수는 자신을 포함한 프로세스 전체를 복사하여 새로운 프로세스를 하나 만듭니다. 두개의 프로세스가 Hello, World!를 출력하고 종료됩니다. 그렇다면 메세지를 여덟번 출력하기 위해선 fork 함수를 몇번 사용해야 할까요? 정답은 세번입니다.</p>\n<p>저는 이걸 이해하는데 은근히 오래걸렸습니다. 어떻게 세번일까요? 이렇게 이해하면 쉽습니다. &#8216;1 &#8211; 2 &#8211; 4 &#8211; 8&#8217; 하나가 두개가 되고 두개가 네개가 되고&#8230; 두배씩 커지는거죠. 이 간단한 원리를&#8230; 저는 종이 몇장을 찢어가며 고민했습니다.</p>\n<p>이제 exec 식구(family)들을 만나볼 시간입니다. execlp 함수는 가족이 많습니다. exec 가문이죠. 가족 구성원은 execl, execlp, execle, execv, execvp, execvpe 가 있습니다. 이들의 역할은 특정 파일을 실행(execute)하는 것 입니다. 그 파일을 실행하여 현재 프로세스를 대체(replace)해버립니다. 다른 이름을 가지고 있지만 결과적으로 하는 일은 같습니다. 다만 일하는 방식, 사용되는 방식이 각기 이름따라 다릅니다. 저는 execlp 만 다루겠습니다. 코드 보시겠습니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(int argc, char *argv[]) {\n\n   execlp(\"./hello\", \"hello\", NULL);\n   printf(\"This is execlp function test!\\n\");\n\n   return 0;\n} \n</pre>\n\n<p>이 코드도 앞선 fork 예제처럼 Hello, World! 메세지를 출력하게 됩니다. 갑자기 무슨 소리냐고 하실지 모르지만 결과적으론 그렇습니다. 주인공인 execlp 함수를 살펴보기 전에 hello 라는 프로그램을 만들어두었다는 점을 이해하셔야합니다. hello 프로그램은 Hello, world! 라는 메세지를 출력하는 프로그램입니다. 결국 저희는 이 프로그램을 다른 프로세스에서 실행시키고자 하는 중입니다. 그럼 이제 그 주체가 되는 execlp 함수를 살펴보겠습니다. 총 세개의 인자를 가지고 있습니다. 첫번째 인자인 &#8220;./hello&#8221; 는 실행시킬 프로세스의 경로를 의미합니다. 그럼 두번째 인자는 뭘까요? 이는 프로그램의 이름을 의미합니다. 이때 적힌 이름은 지금 경로에 위치한 프로그램의 이름이 아니라 호출하는 프로세스에서 부르게될 이름입니다. 그래서 hello가 아니라 bye라고 해도 무방합니다. 세번째는 옵션입니다. 저희는 특별한 옵션을 넣지 않기로 하고 NULL 값을 넣어주었습니다. 결과적으로 ./hello 경로에 있는 hello 프로그램이 호출되며 기존의 프로세스를 대체하기 때문에 그 이후에 등장하는 메세지를 출력하지 않습니다.</p>\n<p>이제 마지막 wait입니다. 이 함수는 이름처럼 특정 프로세스의 종료를 기다립니다(wait). 코드를 보겠습니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(int argc, char *argv[]) {\n\n   int child_pid = fork();\n   if(child_pid == 0) {\n      execlp(\"./hello\", \"bye\", NULL);\n   }\n   else {\n      wait();\n      printf(\"This is wait function test!\\n\");\n   }\n\n   return 0;\n}\n</pre>\n\n<p>결과부터 생각해볼까요? 위의 if문 안에 있는 execlp는 같은 프로그램을 호출한 것이라면 Hello, World!가 출력될 것입니다. 그리고 다른 출력문인 This is wait function test! 구문도 출력됩니다. 어떻게요? 이제 살펴보죠. 우선 첫번째 줄의 child_pid라는 변수는 fork()의 리턴 값을 받습니다. 이때 알아야할 것이 fork()가 어떤 값을 리턴하는가 하는 것이죠. fork는 프로세스의 ID 값을 리턴합니다. 그러니까 앞서 말씀드린 것 처럼 child인 경우에 0을 돌려보내겠죠. 물론 잊지 말아야할 사실은 fork()가 호출되면서 이미 프로세스가 복사되었다는 사실입니다. 그래서 두개의 프로세스에서 같은 코드를 진행해갑니다. 다만 다른 것은 child_pid 값 뿐이죠. 그로인해 출력되는 값도 달라집니다. 부모는 else 구문에 있는 메세지를 출력하고, 자식은 execlp를 통해 hello 프로그램을 자신과 대체시킵니다. 결과적으론 자식을 대체한 hello 프로그램이 먼저 실행되고 부모의 메세지가 등장하게 됩니다. wait 함수가 부모 프로세스로 하여금 자식 프로세스가 끝나길 기다리게 만들기 때문입니다. 이해되셨나요?</p>\n<p>위의 모든 코드는 vi로 작성되었고 gcc컴파일러를 통해 컴파일하고 리눅스 환경에서 테스트 되었습니다. 오류 혹은 질문은 댓글 주시면 감사하겠습니다. 감사합니다.</p>\n"},{"id":"402","title":"Learn about MEAN stack","date":"2016-02-25T06:42:11.000Z","author":"rabby","layout":"post","guid":"https://rabbylab.wordpress.com/?p=402","_content":"자바스크립트 공부로 시작한 블로그인데 자바스크립트 관련 글을 너무 오랫동안 쓰지 않았습니다. 오랜만에 다시 글을 씁니다. 그동안 인턴이다 영어공부다 해서 블로그 관리에 소홀했습니다. 그렇다고 공부를 소홀히 하진 않았습니다. 제목처럼 한동안 <a href=\"http://mean.io/\" target=\"_blank\">MEAN stack</a> 을 공부하고 있었습니다. 아시다시피 MEAN stack 은 MongoDB, Express, Angular, Node 의미합니다. 모두 자바스크립트로 코딩할 수 있습니다. MEAN stack 을 활용하면 저같은 초보 개발자도 풀스택 개발을 할 수 있다기에 시작했습니다. 인턴으로 일하면서 혼자서는 제대로된 서비스를 만들지 못해 늘 아쉬웠던 탓에 풀스택 개발에 대한 욕구가 있었습니다.\n\n책을 사는 것으로 공부를 시작했습니다. 책은 한빛미디어에서 나온 <a href=\"http://www.hanbit.co.kr/book/look.html?isbn=978-89-6848-218-2\" target=\"_blank\"><풀스택 개발자를 위한 MEAN 스택 입문></a>이라는 책입니다. 한권을 독파하면 Human Resource Management Application을 구현할 수 있습니다. 1월말부터 조금씩 공부해서 오늘까지 총 23장 중 21장을 공부했습니다. 나름대로 열심히 했는데 아직은 책 없이 구현할 수 있는 정도는 아닙니다. 이번주 중으로 23장까지 마무리 짓고 다음달부터는 제가 자체적으로 기획한 앱을 구현해 볼 생각입니다. (적용이 없으면 제대로된 학습이 되질 않죠.)\n\n지금까지 MEAN stack 을 공부하면서 코딩한 내용을 Github 에 올려뒀습니다. 아직까지는 예제 소스를 막 써보느라 난잡한 감이 있습니다. 차츰 정리해나가도록 하겠습니다. 주소는 아래와 같습니다.\n\n<a href=\"https://github.com/joeunha/learn-about-meanstack\" target=\"_blank\">https://github.com/joeunha/learn-about-meanstack</a>\n\n&nbsp;\n\n다음주부터 개강이라 바쁠것 같습니다. 그래도 조금 느리더라도 github 뿐만 아니라 블로그에도 꾸준히 배우는 내용 올리도록 하겠습니다. 지켜봐주세요.","source":"_posts/learn-about-mean-stack.md","raw":"---\nid: 402\ntitle: Learn about MEAN stack\ndate: 2016-02-25T15:42:11+00:00\nauthor: rabby\nlayout: post\nguid: https://rabbylab.wordpress.com/?p=402\npermalink: /learn-about-mean-stack/\ncategories:\n  - javascript\ntags:\n  - github\n  - javascript\n  - meanstack\n---\n자바스크립트 공부로 시작한 블로그인데 자바스크립트 관련 글을 너무 오랫동안 쓰지 않았습니다. 오랜만에 다시 글을 씁니다. 그동안 인턴이다 영어공부다 해서 블로그 관리에 소홀했습니다. 그렇다고 공부를 소홀히 하진 않았습니다. 제목처럼 한동안 <a href=\"http://mean.io/\" target=\"_blank\">MEAN stack</a> 을 공부하고 있었습니다. 아시다시피 MEAN stack 은 MongoDB, Express, Angular, Node 의미합니다. 모두 자바스크립트로 코딩할 수 있습니다. MEAN stack 을 활용하면 저같은 초보 개발자도 풀스택 개발을 할 수 있다기에 시작했습니다. 인턴으로 일하면서 혼자서는 제대로된 서비스를 만들지 못해 늘 아쉬웠던 탓에 풀스택 개발에 대한 욕구가 있었습니다.\n\n책을 사는 것으로 공부를 시작했습니다. 책은 한빛미디어에서 나온 <a href=\"http://www.hanbit.co.kr/book/look.html?isbn=978-89-6848-218-2\" target=\"_blank\"><풀스택 개발자를 위한 MEAN 스택 입문></a>이라는 책입니다. 한권을 독파하면 Human Resource Management Application을 구현할 수 있습니다. 1월말부터 조금씩 공부해서 오늘까지 총 23장 중 21장을 공부했습니다. 나름대로 열심히 했는데 아직은 책 없이 구현할 수 있는 정도는 아닙니다. 이번주 중으로 23장까지 마무리 짓고 다음달부터는 제가 자체적으로 기획한 앱을 구현해 볼 생각입니다. (적용이 없으면 제대로된 학습이 되질 않죠.)\n\n지금까지 MEAN stack 을 공부하면서 코딩한 내용을 Github 에 올려뒀습니다. 아직까지는 예제 소스를 막 써보느라 난잡한 감이 있습니다. 차츰 정리해나가도록 하겠습니다. 주소는 아래와 같습니다.\n\n<a href=\"https://github.com/joeunha/learn-about-meanstack\" target=\"_blank\">https://github.com/joeunha/learn-about-meanstack</a>\n\n&nbsp;\n\n다음주부터 개강이라 바쁠것 같습니다. 그래도 조금 느리더라도 github 뿐만 아니라 블로그에도 꾸준히 배우는 내용 올리도록 하겠습니다. 지켜봐주세요.","slug":"/learn-about-mean-stack/","published":1,"updated":"2017-03-01T06:37:55.000Z","comments":1,"photos":[],"link":"","_id":"cizqle7qw000ihyvgqz31dp5s","content":"<p>자바스크립트 공부로 시작한 블로그인데 자바스크립트 관련 글을 너무 오랫동안 쓰지 않았습니다. 오랜만에 다시 글을 씁니다. 그동안 인턴이다 영어공부다 해서 블로그 관리에 소홀했습니다. 그렇다고 공부를 소홀히 하진 않았습니다. 제목처럼 한동안 <a href=\"http://mean.io/\" target=\"_blank\">MEAN stack</a> 을 공부하고 있었습니다. 아시다시피 MEAN stack 은 MongoDB, Express, Angular, Node 의미합니다. 모두 자바스크립트로 코딩할 수 있습니다. MEAN stack 을 활용하면 저같은 초보 개발자도 풀스택 개발을 할 수 있다기에 시작했습니다. 인턴으로 일하면서 혼자서는 제대로된 서비스를 만들지 못해 늘 아쉬웠던 탓에 풀스택 개발에 대한 욕구가 있었습니다.</p>\n<p>책을 사는 것으로 공부를 시작했습니다. 책은 한빛미디어에서 나온 <a href=\"http://www.hanbit.co.kr/book/look.html?isbn=978-89-6848-218-2\" target=\"_blank\">&lt;풀스택 개발자를 위한 MEAN 스택 입문&gt;</a>이라는 책입니다. 한권을 독파하면 Human Resource Management Application을 구현할 수 있습니다. 1월말부터 조금씩 공부해서 오늘까지 총 23장 중 21장을 공부했습니다. 나름대로 열심히 했는데 아직은 책 없이 구현할 수 있는 정도는 아닙니다. 이번주 중으로 23장까지 마무리 짓고 다음달부터는 제가 자체적으로 기획한 앱을 구현해 볼 생각입니다. (적용이 없으면 제대로된 학습이 되질 않죠.)</p>\n<p>지금까지 MEAN stack 을 공부하면서 코딩한 내용을 Github 에 올려뒀습니다. 아직까지는 예제 소스를 막 써보느라 난잡한 감이 있습니다. 차츰 정리해나가도록 하겠습니다. 주소는 아래와 같습니다.</p>\n<p><a href=\"https://github.com/joeunha/learn-about-meanstack\" target=\"_blank\">https://github.com/joeunha/learn-about-meanstack</a></p>\n<p>&nbsp;</p>\n<p>다음주부터 개강이라 바쁠것 같습니다. 그래도 조금 느리더라도 github 뿐만 아니라 블로그에도 꾸준히 배우는 내용 올리도록 하겠습니다. 지켜봐주세요.</p>\n","excerpt":"","more":"<p>자바스크립트 공부로 시작한 블로그인데 자바스크립트 관련 글을 너무 오랫동안 쓰지 않았습니다. 오랜만에 다시 글을 씁니다. 그동안 인턴이다 영어공부다 해서 블로그 관리에 소홀했습니다. 그렇다고 공부를 소홀히 하진 않았습니다. 제목처럼 한동안 <a href=\"http://mean.io/\" target=\"_blank\">MEAN stack</a> 을 공부하고 있었습니다. 아시다시피 MEAN stack 은 MongoDB, Express, Angular, Node 의미합니다. 모두 자바스크립트로 코딩할 수 있습니다. MEAN stack 을 활용하면 저같은 초보 개발자도 풀스택 개발을 할 수 있다기에 시작했습니다. 인턴으로 일하면서 혼자서는 제대로된 서비스를 만들지 못해 늘 아쉬웠던 탓에 풀스택 개발에 대한 욕구가 있었습니다.</p>\n<p>책을 사는 것으로 공부를 시작했습니다. 책은 한빛미디어에서 나온 <a href=\"http://www.hanbit.co.kr/book/look.html?isbn=978-89-6848-218-2\" target=\"_blank\">&lt;풀스택 개발자를 위한 MEAN 스택 입문&gt;</a>이라는 책입니다. 한권을 독파하면 Human Resource Management Application을 구현할 수 있습니다. 1월말부터 조금씩 공부해서 오늘까지 총 23장 중 21장을 공부했습니다. 나름대로 열심히 했는데 아직은 책 없이 구현할 수 있는 정도는 아닙니다. 이번주 중으로 23장까지 마무리 짓고 다음달부터는 제가 자체적으로 기획한 앱을 구현해 볼 생각입니다. (적용이 없으면 제대로된 학습이 되질 않죠.)</p>\n<p>지금까지 MEAN stack 을 공부하면서 코딩한 내용을 Github 에 올려뒀습니다. 아직까지는 예제 소스를 막 써보느라 난잡한 감이 있습니다. 차츰 정리해나가도록 하겠습니다. 주소는 아래와 같습니다.</p>\n<p><a href=\"https://github.com/joeunha/learn-about-meanstack\" target=\"_blank\">https://github.com/joeunha/learn-about-meanstack</a></p>\n<p>&nbsp;</p>\n<p>다음주부터 개강이라 바쁠것 같습니다. 그래도 조금 느리더라도 github 뿐만 아니라 블로그에도 꾸준히 배우는 내용 올리도록 하겠습니다. 지켜봐주세요.</p>\n"},{"id":"488","title":"[Practice] 동물 쉼터(Animal Shelter)를 구현하라!","date":"2016-04-01T15:16:46.000Z","author":"rabby","layout":"post","guid":"http://rabbylab.xyz/?p=488","_content":"###### Practice 시리즈를 연재합니다. 지난 3월 3일부터 COIN(코딩인터뷰 준비하는 모임)이라는 이름으로 함께 취업스터디를 진행하고 있는 5명의 친구들과 함께 교재 <코딩인터뷰 완전분석> 이라는 책을 가지고 공부를 시작했습니다. Practice 시리즈는 이 과정에서 함께 고민하며 풀었던 문제에 대해 이야기하는 시리즈입니다.\n\n* * *\n\n**코딩인터뷰 완전분석 – 연습문제 3.7**\n\n**“먼저 들어온 동물이 먼저 나가는 동물 쉼터(animal shelter)가 있다고 하자. 이 쉼터는 개와 고양이만 수용할 수 있다. 사람들은 쉼터의 동물들 가운데 들어온 지 가장 오래된 동물부터 입양할 수 있는데, 개와 고양이 중 어떤 동물을 데려갈지 선택할 수도 있다. 특정한 동물을 지정해 데려가는 것은 금지되어 있다. 이 시스템을 자료구조로 구현하라. 해당 자료구조는 enqueue, dequeueAny, dequeueDog, dequeueCat의 연산들을 제공해야 한다. 언어에 기본 탑재되어 있는 LinkedList (Java) 자료구조를 이용해도 좋다.”**\n\n이번부터는 자바로 구현하겠습니다. [이전 글](http://rabbylab.xyz/practice-1/)에서 C로 코딩을 했는데, COIN에서 사용하는 공용 언어로 자바를 선정함에 따라 자바로 코딩하겠습니다.\n\n코드를 보시기에 앞서 문제를 먼저 해부(?)하겠습니다. 동물 쉼터는 &#8216;먼저 들어온 동물이 먼저 나가는&#8217; 곳 입니다. First In First Out(FIFO)라는거죠. 큐를 의미합니다. 그리고 문제의 끝에서 &#8216;LinkedList&#8217;를 사용해도 좋다고 합니다. 결국 LikedList로 표현된 Queue를 구현하라는 것입니다. 그리고 그 큐는 몇가지 제약조건을 가지고 있습니다. 들어온 지 가장 오래된 동물부터 입양하되, 개나 고양이 중에서 선택은 할 수 있도록 해줘라는 것입니다. 그래서 dequeueDog, dequeueCat 연산을 제공합니다. 대충 그림나옵니다. 그럼 시작할까요?\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">private Node head;\nprivate Node tail;\nprivate int size = 0;\nprivate class Node {\n\tprivate String name;\n\tprivate int id;\n\tprivate Node next;\n\tpublic Node(String animal, int num){\n\t\tthis.name = animal;\n\t\tthis.id = num;\n\t\tthis.next = null;\n\t}\n}\n</pre>\n\n링크드리스트를 구현해야하기 때문에 노드를 만들어줍니다. head와 tail은 큐에서 front(앞)와 rear(뒤)를 맡게됩니다. 일단은 4번째 줄 이후를 집중해서 보겠습니다. 이 노드는 동물의 이름 값(name), 개와 고양이를 분류하기 위한 값(id) 그리고 다음 노드를 가르키는 값(next)을 가지고 있습니다. 사실 저는 이 &#8216;가르키는 값&#8217;이 참 익숙하지 않습니다. C에서는 이걸 포인터로 구현하는데 Java에서는 그냥 값을 참조하면 되는데, 그게 은근히 낯섭니다. 포인터의 그 특징이 더 뇌리에 깊게 박힌 것 같습니다. 여하튼 노드는 이렇게 구성되어 있습니다. 이제 본격적인 연산들을 살펴보겠습니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public void enqueue(String animal, int num){\n\tNode newNode = new Node(animal, num);\n\tif(size == 0){\n\t\ttail = head = newNode;\n\t} else{\n\t\thead.next = newNode;\n\t\thead = newNode;\n\t}\n\tsize++;\n}\n</pre>\n\n이 코드는 노드를 추가(enqueue)하는 과정을 보여줍니다. 이 메소드는 인자로 동물의 이름(animal)과 개와 고양이를 구분하는 숫자(num)을 받습니다. 그리고 새로운 노드를 생성합니다. 이때 생성된 노드가 첫번째 노드라면(queue의 size가 0이라면) head와 tail이 동시에 이 노드를 가르킵니다. 만약 그렇지 않다면 head의 다음(next)에 새로운 노드가 붙습니다. 그리고 head는 새로운 노드를 가르킵니다. 그러니까 새로운 노드가 추가되면 tail로 붙는게 아니라 head가 이동합니다. tail은 움직이지 않습니다. 앞에다가 추가하는 방식인거죠. 추가가 끝나면 size를 증가시켜줍니다. 이로써 tail에는 가장 오래된 동물이 주인을 기다리게 됩니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public void dequeueAny(){\n\tSystem.out.println(tail.name);\n\ttail = tail.next;\n\tsize--;\n\treturn;\n}\n</pre>\n\n새로운 주인을 만난 동물을 보내주는 메소드입니다. 가장 먼저 들어온 동물을 보내주겠습니다. 보내주는 걸 확인하기 위해 메세지를 출력합니다. 출력 이후에는 tail을 한칸 뒤로 이동합니다. 다음 차례를 가르키는거죠. 그리곤 size를 감소시켜줍니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public void dequeueDog(){\n\tNode chaser_1 = tail;\n\tNode chaser_2 = tail;\n\twhile(chaser_1.id != 0 && chaser_1.next != null){\n\t\tchaser_2 = chaser_1;\n\t\tchaser_1 = chaser_2.next;\n\t}\n        //개가 첫번째 노드에 있었던 경우\n\tif(chaser_1 == tail){\n\t\tdequeueAny();\n        //개를 발견한 경우\n\t} else if(chaser_1.id == 0){\n\t\tSystem.out.println(chaser_1.name + \", Bye!\\n\");\n\t\tchaser_2.next = chaser_1.next;\n\t//개가 없는 경우\n        } else{\n\t\tSystem.out.println(\"No Dog...\");\n\t\treturn;\n\t}\n\tsize--;\n\treturn;\n}\n</pre>\n\n이제 새로운 주인이 원하는 동물을 골라서 주겠습니다. 개/고양이 중에서 선택이 가능해야겠죠. 위의 코드는 개를 내보내는 코드입니다. id가 0일 때, 개/ 1일 때, 고양이라고 간주했습니다. 이번 코드에서 중요한건 역시 chaser\\_1,chaser\\_2 입니다. 이들의 역할은 원하는 동물을 찾아오는 것입니다. 처음에는 tail부터 시작합니다. 가장 오래된 동물부터 확인하는 것이죠.\n  \nwhile문을 보겠습니다. 본격적인 추적(chase)가 시작됩니다. id가 0이 아닐 경우 계속 반복됩니다. 다시말해, 0이 아니라는 말은 개가 아니라는 것이니까 고양이라는 의미겠죠? 그리고 만약에 더 이상 개가 남아 있지 않을 경우도 있겠죠? 그런 경우에 무한루프를 방지하기 위해서 next값이 null이면 탈출할 수 있도록 조건을 만들어둡니다. 이제 chaser의 이동을 살펴보겠습니다. 5번 줄에서 chaser\\_2가 chaser\\_1의 위치로 갑니다. 그리고 다음 줄에서 chaser\\_1은 다음 노드로 이동합니다. 이렇게 chaser\\_1이 앞으로 한 노드씩 움직이며 개를 찾습니다. 결국 개가 발견되거나 개가 없으면 루프를 벗어납니다.\n  \n만약에 개가 첫번째 노드에 있었다면 그냥 dequeueAny 메소드를 호출해줍니다. 그리고 만약에 개가 맞다면 개에게 작별을 고하고 보내줍니다. chaser\\_2의 다음 노드였던 chaser\\_1의 노드를 없애주기 위해 chaser\\_1 다음의 노드와 chaser\\_2를 이어줍니다. 그렇게 노드를 정리합니다. 만약에 개가 없었다면 더 이상 개가 없다고 메세지를 출력해줍니다.\n\ndequeueCat의 경우는 id 값만 바꿔주면 됩니다. 고로 생략하겠습니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public class Main {\n\n\tpublic static void main(String[] args) {\n\t\tLinkedList animals = new LinkedList();\n\t\t\n\t\tanimals.enqueue(\"귀욤\",1);\n\t\tanimals.enqueue(\"개똥\",0);\n\t\tanimals.enqueue(\"황묘\",1);\n\t\tanimals.enqueue(\"백구\",0);\n\t\t\n\t\tSystem.out.println(animals);\n\t\t\n\t\tanimals.dequeueDog();\n\t\n\t\tSystem.out.println(animals);\n\t}\n\n}\n</pre>\n\n예제 확인을 위한 코드입니다. 개똥이를 보내고 빈자리를 확인하는 것으로 코드가 끝납니다. 아래는 출력결과 입니다.\n  \n<img class=\"alignnone size-full wp-image-501\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/04/Aniqueue-실행-결과.jpg\" alt=\"Anishelter 실행 결과\" width=\"339\" height=\"108\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/04/Aniqueue-실행-결과.jpg 339w, http://rabbylab.xyz/blog/wp-content/uploads/2016/04/Aniqueue-실행-결과-300x96.jpg 300w\" sizes=\"(max-width: 339px) 100vw, 339px\" />\n\n전체 코드는 <a href=\"https://github.com/joeunha/rabbylab-csbasic/blob/master/src/rabbylab/csbasic/coin/animalshelter/LinkedList.java\" target=\"_blank\">이곳</a>에서 확인하실 수 있습니다. 감사합니다.","source":"_posts/practice-animal-shelter.md","raw":"---\nid: 488\ntitle: '[Practice] 동물 쉼터(Animal Shelter)를 구현하라!'\ndate: 2016-04-02T00:16:46+00:00\nauthor: rabby\nlayout: post\nguid: http://rabbylab.xyz/?p=488\npermalink: /practice-animal-shelter/\ncategories:\n  - cs basic\ntags:\n  - coin\n  - csbasic\n---\n###### Practice 시리즈를 연재합니다. 지난 3월 3일부터 COIN(코딩인터뷰 준비하는 모임)이라는 이름으로 함께 취업스터디를 진행하고 있는 5명의 친구들과 함께 교재 <코딩인터뷰 완전분석> 이라는 책을 가지고 공부를 시작했습니다. Practice 시리즈는 이 과정에서 함께 고민하며 풀었던 문제에 대해 이야기하는 시리즈입니다.\n\n* * *\n\n**코딩인터뷰 완전분석 – 연습문제 3.7**\n\n**“먼저 들어온 동물이 먼저 나가는 동물 쉼터(animal shelter)가 있다고 하자. 이 쉼터는 개와 고양이만 수용할 수 있다. 사람들은 쉼터의 동물들 가운데 들어온 지 가장 오래된 동물부터 입양할 수 있는데, 개와 고양이 중 어떤 동물을 데려갈지 선택할 수도 있다. 특정한 동물을 지정해 데려가는 것은 금지되어 있다. 이 시스템을 자료구조로 구현하라. 해당 자료구조는 enqueue, dequeueAny, dequeueDog, dequeueCat의 연산들을 제공해야 한다. 언어에 기본 탑재되어 있는 LinkedList (Java) 자료구조를 이용해도 좋다.”**\n\n이번부터는 자바로 구현하겠습니다. [이전 글](http://rabbylab.xyz/practice-1/)에서 C로 코딩을 했는데, COIN에서 사용하는 공용 언어로 자바를 선정함에 따라 자바로 코딩하겠습니다.\n\n코드를 보시기에 앞서 문제를 먼저 해부(?)하겠습니다. 동물 쉼터는 &#8216;먼저 들어온 동물이 먼저 나가는&#8217; 곳 입니다. First In First Out(FIFO)라는거죠. 큐를 의미합니다. 그리고 문제의 끝에서 &#8216;LinkedList&#8217;를 사용해도 좋다고 합니다. 결국 LikedList로 표현된 Queue를 구현하라는 것입니다. 그리고 그 큐는 몇가지 제약조건을 가지고 있습니다. 들어온 지 가장 오래된 동물부터 입양하되, 개나 고양이 중에서 선택은 할 수 있도록 해줘라는 것입니다. 그래서 dequeueDog, dequeueCat 연산을 제공합니다. 대충 그림나옵니다. 그럼 시작할까요?\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">private Node head;\nprivate Node tail;\nprivate int size = 0;\nprivate class Node {\n\tprivate String name;\n\tprivate int id;\n\tprivate Node next;\n\tpublic Node(String animal, int num){\n\t\tthis.name = animal;\n\t\tthis.id = num;\n\t\tthis.next = null;\n\t}\n}\n</pre>\n\n링크드리스트를 구현해야하기 때문에 노드를 만들어줍니다. head와 tail은 큐에서 front(앞)와 rear(뒤)를 맡게됩니다. 일단은 4번째 줄 이후를 집중해서 보겠습니다. 이 노드는 동물의 이름 값(name), 개와 고양이를 분류하기 위한 값(id) 그리고 다음 노드를 가르키는 값(next)을 가지고 있습니다. 사실 저는 이 &#8216;가르키는 값&#8217;이 참 익숙하지 않습니다. C에서는 이걸 포인터로 구현하는데 Java에서는 그냥 값을 참조하면 되는데, 그게 은근히 낯섭니다. 포인터의 그 특징이 더 뇌리에 깊게 박힌 것 같습니다. 여하튼 노드는 이렇게 구성되어 있습니다. 이제 본격적인 연산들을 살펴보겠습니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public void enqueue(String animal, int num){\n\tNode newNode = new Node(animal, num);\n\tif(size == 0){\n\t\ttail = head = newNode;\n\t} else{\n\t\thead.next = newNode;\n\t\thead = newNode;\n\t}\n\tsize++;\n}\n</pre>\n\n이 코드는 노드를 추가(enqueue)하는 과정을 보여줍니다. 이 메소드는 인자로 동물의 이름(animal)과 개와 고양이를 구분하는 숫자(num)을 받습니다. 그리고 새로운 노드를 생성합니다. 이때 생성된 노드가 첫번째 노드라면(queue의 size가 0이라면) head와 tail이 동시에 이 노드를 가르킵니다. 만약 그렇지 않다면 head의 다음(next)에 새로운 노드가 붙습니다. 그리고 head는 새로운 노드를 가르킵니다. 그러니까 새로운 노드가 추가되면 tail로 붙는게 아니라 head가 이동합니다. tail은 움직이지 않습니다. 앞에다가 추가하는 방식인거죠. 추가가 끝나면 size를 증가시켜줍니다. 이로써 tail에는 가장 오래된 동물이 주인을 기다리게 됩니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public void dequeueAny(){\n\tSystem.out.println(tail.name);\n\ttail = tail.next;\n\tsize--;\n\treturn;\n}\n</pre>\n\n새로운 주인을 만난 동물을 보내주는 메소드입니다. 가장 먼저 들어온 동물을 보내주겠습니다. 보내주는 걸 확인하기 위해 메세지를 출력합니다. 출력 이후에는 tail을 한칸 뒤로 이동합니다. 다음 차례를 가르키는거죠. 그리곤 size를 감소시켜줍니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public void dequeueDog(){\n\tNode chaser_1 = tail;\n\tNode chaser_2 = tail;\n\twhile(chaser_1.id != 0 && chaser_1.next != null){\n\t\tchaser_2 = chaser_1;\n\t\tchaser_1 = chaser_2.next;\n\t}\n        //개가 첫번째 노드에 있었던 경우\n\tif(chaser_1 == tail){\n\t\tdequeueAny();\n        //개를 발견한 경우\n\t} else if(chaser_1.id == 0){\n\t\tSystem.out.println(chaser_1.name + \", Bye!\\n\");\n\t\tchaser_2.next = chaser_1.next;\n\t//개가 없는 경우\n        } else{\n\t\tSystem.out.println(\"No Dog...\");\n\t\treturn;\n\t}\n\tsize--;\n\treturn;\n}\n</pre>\n\n이제 새로운 주인이 원하는 동물을 골라서 주겠습니다. 개/고양이 중에서 선택이 가능해야겠죠. 위의 코드는 개를 내보내는 코드입니다. id가 0일 때, 개/ 1일 때, 고양이라고 간주했습니다. 이번 코드에서 중요한건 역시 chaser\\_1,chaser\\_2 입니다. 이들의 역할은 원하는 동물을 찾아오는 것입니다. 처음에는 tail부터 시작합니다. 가장 오래된 동물부터 확인하는 것이죠.\n  \nwhile문을 보겠습니다. 본격적인 추적(chase)가 시작됩니다. id가 0이 아닐 경우 계속 반복됩니다. 다시말해, 0이 아니라는 말은 개가 아니라는 것이니까 고양이라는 의미겠죠? 그리고 만약에 더 이상 개가 남아 있지 않을 경우도 있겠죠? 그런 경우에 무한루프를 방지하기 위해서 next값이 null이면 탈출할 수 있도록 조건을 만들어둡니다. 이제 chaser의 이동을 살펴보겠습니다. 5번 줄에서 chaser\\_2가 chaser\\_1의 위치로 갑니다. 그리고 다음 줄에서 chaser\\_1은 다음 노드로 이동합니다. 이렇게 chaser\\_1이 앞으로 한 노드씩 움직이며 개를 찾습니다. 결국 개가 발견되거나 개가 없으면 루프를 벗어납니다.\n  \n만약에 개가 첫번째 노드에 있었다면 그냥 dequeueAny 메소드를 호출해줍니다. 그리고 만약에 개가 맞다면 개에게 작별을 고하고 보내줍니다. chaser\\_2의 다음 노드였던 chaser\\_1의 노드를 없애주기 위해 chaser\\_1 다음의 노드와 chaser\\_2를 이어줍니다. 그렇게 노드를 정리합니다. 만약에 개가 없었다면 더 이상 개가 없다고 메세지를 출력해줍니다.\n\ndequeueCat의 경우는 id 값만 바꿔주면 됩니다. 고로 생략하겠습니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public class Main {\n\n\tpublic static void main(String[] args) {\n\t\tLinkedList animals = new LinkedList();\n\t\t\n\t\tanimals.enqueue(\"귀욤\",1);\n\t\tanimals.enqueue(\"개똥\",0);\n\t\tanimals.enqueue(\"황묘\",1);\n\t\tanimals.enqueue(\"백구\",0);\n\t\t\n\t\tSystem.out.println(animals);\n\t\t\n\t\tanimals.dequeueDog();\n\t\n\t\tSystem.out.println(animals);\n\t}\n\n}\n</pre>\n\n예제 확인을 위한 코드입니다. 개똥이를 보내고 빈자리를 확인하는 것으로 코드가 끝납니다. 아래는 출력결과 입니다.\n  \n<img class=\"alignnone size-full wp-image-501\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/04/Aniqueue-실행-결과.jpg\" alt=\"Anishelter 실행 결과\" width=\"339\" height=\"108\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/04/Aniqueue-실행-결과.jpg 339w, http://rabbylab.xyz/blog/wp-content/uploads/2016/04/Aniqueue-실행-결과-300x96.jpg 300w\" sizes=\"(max-width: 339px) 100vw, 339px\" />\n\n전체 코드는 <a href=\"https://github.com/joeunha/rabbylab-csbasic/blob/master/src/rabbylab/csbasic/coin/animalshelter/LinkedList.java\" target=\"_blank\">이곳</a>에서 확인하실 수 있습니다. 감사합니다.","slug":"/practice-animal-shelter/","published":1,"updated":"2017-03-01T06:37:01.000Z","comments":1,"photos":[],"link":"","_id":"cizqle7r0000lhyvgunsahdh4","content":"<h6 id=\"Practice-시리즈를-연재합니다-지난-3월-3일부터-COIN-코딩인터뷰-준비하는-모임-이라는-이름으로-함께-취업스터디를-진행하고-있는-5명의-친구들과-함께-교재-lt-코딩인터뷰-완전분석-gt-이라는-책을-가지고-공부를-시작했습니다-Practice-시리즈는-이-과정에서-함께-고민하며-풀었던-문제에-대해-이야기하는-시리즈입니다\"><a href=\"#Practice-시리즈를-연재합니다-지난-3월-3일부터-COIN-코딩인터뷰-준비하는-모임-이라는-이름으로-함께-취업스터디를-진행하고-있는-5명의-친구들과-함께-교재-lt-코딩인터뷰-완전분석-gt-이라는-책을-가지고-공부를-시작했습니다-Practice-시리즈는-이-과정에서-함께-고민하며-풀었던-문제에-대해-이야기하는-시리즈입니다\" class=\"headerlink\" title=\"Practice 시리즈를 연재합니다. 지난 3월 3일부터 COIN(코딩인터뷰 준비하는 모임)이라는 이름으로 함께 취업스터디를 진행하고 있는 5명의 친구들과 함께 교재 &lt;코딩인터뷰 완전분석&gt; 이라는 책을 가지고 공부를 시작했습니다. Practice 시리즈는 이 과정에서 함께 고민하며 풀었던 문제에 대해 이야기하는 시리즈입니다.\"></a>Practice 시리즈를 연재합니다. 지난 3월 3일부터 COIN(코딩인터뷰 준비하는 모임)이라는 이름으로 함께 취업스터디를 진행하고 있는 5명의 친구들과 함께 교재 &lt;코딩인터뷰 완전분석&gt; 이라는 책을 가지고 공부를 시작했습니다. Practice 시리즈는 이 과정에서 함께 고민하며 풀었던 문제에 대해 이야기하는 시리즈입니다.</h6><hr>\n<p><strong>코딩인터뷰 완전분석 – 연습문제 3.7</strong></p>\n<p><strong>“먼저 들어온 동물이 먼저 나가는 동물 쉼터(animal shelter)가 있다고 하자. 이 쉼터는 개와 고양이만 수용할 수 있다. 사람들은 쉼터의 동물들 가운데 들어온 지 가장 오래된 동물부터 입양할 수 있는데, 개와 고양이 중 어떤 동물을 데려갈지 선택할 수도 있다. 특정한 동물을 지정해 데려가는 것은 금지되어 있다. 이 시스템을 자료구조로 구현하라. 해당 자료구조는 enqueue, dequeueAny, dequeueDog, dequeueCat의 연산들을 제공해야 한다. 언어에 기본 탑재되어 있는 LinkedList (Java) 자료구조를 이용해도 좋다.”</strong></p>\n<p>이번부터는 자바로 구현하겠습니다. <a href=\"http://rabbylab.xyz/practice-1/\" target=\"_blank\" rel=\"external\">이전 글</a>에서 C로 코딩을 했는데, COIN에서 사용하는 공용 언어로 자바를 선정함에 따라 자바로 코딩하겠습니다.</p>\n<p>코드를 보시기에 앞서 문제를 먼저 해부(?)하겠습니다. 동물 쉼터는 &#8216;먼저 들어온 동물이 먼저 나가는&#8217; 곳 입니다. First In First Out(FIFO)라는거죠. 큐를 의미합니다. 그리고 문제의 끝에서 &#8216;LinkedList&#8217;를 사용해도 좋다고 합니다. 결국 LikedList로 표현된 Queue를 구현하라는 것입니다. 그리고 그 큐는 몇가지 제약조건을 가지고 있습니다. 들어온 지 가장 오래된 동물부터 입양하되, 개나 고양이 중에서 선택은 할 수 있도록 해줘라는 것입니다. 그래서 dequeueDog, dequeueCat 연산을 제공합니다. 대충 그림나옵니다. 그럼 시작할까요?</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">private Node head;\nprivate Node tail;\nprivate int size = 0;\nprivate class Node {\n    private String name;\n    private int id;\n    private Node next;\n    public Node(String animal, int num){\n        this.name = animal;\n        this.id = num;\n        this.next = null;\n    }\n}\n</pre>\n\n<p>링크드리스트를 구현해야하기 때문에 노드를 만들어줍니다. head와 tail은 큐에서 front(앞)와 rear(뒤)를 맡게됩니다. 일단은 4번째 줄 이후를 집중해서 보겠습니다. 이 노드는 동물의 이름 값(name), 개와 고양이를 분류하기 위한 값(id) 그리고 다음 노드를 가르키는 값(next)을 가지고 있습니다. 사실 저는 이 &#8216;가르키는 값&#8217;이 참 익숙하지 않습니다. C에서는 이걸 포인터로 구현하는데 Java에서는 그냥 값을 참조하면 되는데, 그게 은근히 낯섭니다. 포인터의 그 특징이 더 뇌리에 깊게 박힌 것 같습니다. 여하튼 노드는 이렇게 구성되어 있습니다. 이제 본격적인 연산들을 살펴보겠습니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public void enqueue(String animal, int num){\n    Node newNode = new Node(animal, num);\n    if(size == 0){\n        tail = head = newNode;\n    } else{\n        head.next = newNode;\n        head = newNode;\n    }\n    size++;\n}\n</pre>\n\n<p>이 코드는 노드를 추가(enqueue)하는 과정을 보여줍니다. 이 메소드는 인자로 동물의 이름(animal)과 개와 고양이를 구분하는 숫자(num)을 받습니다. 그리고 새로운 노드를 생성합니다. 이때 생성된 노드가 첫번째 노드라면(queue의 size가 0이라면) head와 tail이 동시에 이 노드를 가르킵니다. 만약 그렇지 않다면 head의 다음(next)에 새로운 노드가 붙습니다. 그리고 head는 새로운 노드를 가르킵니다. 그러니까 새로운 노드가 추가되면 tail로 붙는게 아니라 head가 이동합니다. tail은 움직이지 않습니다. 앞에다가 추가하는 방식인거죠. 추가가 끝나면 size를 증가시켜줍니다. 이로써 tail에는 가장 오래된 동물이 주인을 기다리게 됩니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public void dequeueAny(){\n    System.out.println(tail.name);\n    tail = tail.next;\n    size--;\n    return;\n}\n</pre>\n\n<p>새로운 주인을 만난 동물을 보내주는 메소드입니다. 가장 먼저 들어온 동물을 보내주겠습니다. 보내주는 걸 확인하기 위해 메세지를 출력합니다. 출력 이후에는 tail을 한칸 뒤로 이동합니다. 다음 차례를 가르키는거죠. 그리곤 size를 감소시켜줍니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public void dequeueDog(){\n    Node chaser_1 = tail;\n    Node chaser_2 = tail;\n    while(chaser_1.id != 0 && chaser_1.next != null){\n        chaser_2 = chaser_1;\n        chaser_1 = chaser_2.next;\n    }\n        //개가 첫번째 노드에 있었던 경우\n    if(chaser_1 == tail){\n        dequeueAny();\n        //개를 발견한 경우\n    } else if(chaser_1.id == 0){\n        System.out.println(chaser_1.name + \", Bye!\\n\");\n        chaser_2.next = chaser_1.next;\n    //개가 없는 경우\n        } else{\n        System.out.println(\"No Dog...\");\n        return;\n    }\n    size--;\n    return;\n}\n</pre>\n\n<p>이제 새로운 주인이 원하는 동물을 골라서 주겠습니다. 개/고양이 중에서 선택이 가능해야겠죠. 위의 코드는 개를 내보내는 코드입니다. id가 0일 때, 개/ 1일 때, 고양이라고 간주했습니다. 이번 코드에서 중요한건 역시 chaser_1,chaser_2 입니다. 이들의 역할은 원하는 동물을 찾아오는 것입니다. 처음에는 tail부터 시작합니다. 가장 오래된 동물부터 확인하는 것이죠.</p>\n<p>while문을 보겠습니다. 본격적인 추적(chase)가 시작됩니다. id가 0이 아닐 경우 계속 반복됩니다. 다시말해, 0이 아니라는 말은 개가 아니라는 것이니까 고양이라는 의미겠죠? 그리고 만약에 더 이상 개가 남아 있지 않을 경우도 있겠죠? 그런 경우에 무한루프를 방지하기 위해서 next값이 null이면 탈출할 수 있도록 조건을 만들어둡니다. 이제 chaser의 이동을 살펴보겠습니다. 5번 줄에서 chaser_2가 chaser_1의 위치로 갑니다. 그리고 다음 줄에서 chaser_1은 다음 노드로 이동합니다. 이렇게 chaser_1이 앞으로 한 노드씩 움직이며 개를 찾습니다. 결국 개가 발견되거나 개가 없으면 루프를 벗어납니다.</p>\n<p>만약에 개가 첫번째 노드에 있었다면 그냥 dequeueAny 메소드를 호출해줍니다. 그리고 만약에 개가 맞다면 개에게 작별을 고하고 보내줍니다. chaser_2의 다음 노드였던 chaser_1의 노드를 없애주기 위해 chaser_1 다음의 노드와 chaser_2를 이어줍니다. 그렇게 노드를 정리합니다. 만약에 개가 없었다면 더 이상 개가 없다고 메세지를 출력해줍니다.</p>\n<p>dequeueCat의 경우는 id 값만 바꿔주면 됩니다. 고로 생략하겠습니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public class Main {\n\n    public static void main(String[] args) {\n        LinkedList animals = new LinkedList();\n\n        animals.enqueue(\"귀욤\",1);\n        animals.enqueue(\"개똥\",0);\n        animals.enqueue(\"황묘\",1);\n        animals.enqueue(\"백구\",0);\n\n        System.out.println(animals);\n\n        animals.dequeueDog();\n\n        System.out.println(animals);\n    }\n\n}\n</pre>\n\n<p>예제 확인을 위한 코드입니다. 개똥이를 보내고 빈자리를 확인하는 것으로 코드가 끝납니다. 아래는 출력결과 입니다.</p>\n<p><img class=\"alignnone size-full wp-image-501\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/04/Aniqueue-실행-결과.jpg\" alt=\"Anishelter 실행 결과\" width=\"339\" height=\"108\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/04/Aniqueue-실행-결과.jpg 339w, http://rabbylab.xyz/blog/wp-content/uploads/2016/04/Aniqueue-실행-결과-300x96.jpg 300w\" sizes=\"(max-width: 339px) 100vw, 339px\"></p>\n<p>전체 코드는 <a href=\"https://github.com/joeunha/rabbylab-csbasic/blob/master/src/rabbylab/csbasic/coin/animalshelter/LinkedList.java\" target=\"_blank\">이곳</a>에서 확인하실 수 있습니다. 감사합니다.</p>\n","excerpt":"","more":"<h6 id=\"Practice-시리즈를-연재합니다-지난-3월-3일부터-COIN-코딩인터뷰-준비하는-모임-이라는-이름으로-함께-취업스터디를-진행하고-있는-5명의-친구들과-함께-교재-lt-코딩인터뷰-완전분석-gt-이라는-책을-가지고-공부를-시작했습니다-Practice-시리즈는-이-과정에서-함께-고민하며-풀었던-문제에-대해-이야기하는-시리즈입니다\"><a href=\"#Practice-시리즈를-연재합니다-지난-3월-3일부터-COIN-코딩인터뷰-준비하는-모임-이라는-이름으로-함께-취업스터디를-진행하고-있는-5명의-친구들과-함께-교재-lt-코딩인터뷰-완전분석-gt-이라는-책을-가지고-공부를-시작했습니다-Practice-시리즈는-이-과정에서-함께-고민하며-풀었던-문제에-대해-이야기하는-시리즈입니다\" class=\"headerlink\" title=\"Practice 시리즈를 연재합니다. 지난 3월 3일부터 COIN(코딩인터뷰 준비하는 모임)이라는 이름으로 함께 취업스터디를 진행하고 있는 5명의 친구들과 함께 교재 &lt;코딩인터뷰 완전분석&gt; 이라는 책을 가지고 공부를 시작했습니다. Practice 시리즈는 이 과정에서 함께 고민하며 풀었던 문제에 대해 이야기하는 시리즈입니다.\"></a>Practice 시리즈를 연재합니다. 지난 3월 3일부터 COIN(코딩인터뷰 준비하는 모임)이라는 이름으로 함께 취업스터디를 진행하고 있는 5명의 친구들과 함께 교재 &lt;코딩인터뷰 완전분석&gt; 이라는 책을 가지고 공부를 시작했습니다. Practice 시리즈는 이 과정에서 함께 고민하며 풀었던 문제에 대해 이야기하는 시리즈입니다.</h6><hr>\n<p><strong>코딩인터뷰 완전분석 – 연습문제 3.7</strong></p>\n<p><strong>“먼저 들어온 동물이 먼저 나가는 동물 쉼터(animal shelter)가 있다고 하자. 이 쉼터는 개와 고양이만 수용할 수 있다. 사람들은 쉼터의 동물들 가운데 들어온 지 가장 오래된 동물부터 입양할 수 있는데, 개와 고양이 중 어떤 동물을 데려갈지 선택할 수도 있다. 특정한 동물을 지정해 데려가는 것은 금지되어 있다. 이 시스템을 자료구조로 구현하라. 해당 자료구조는 enqueue, dequeueAny, dequeueDog, dequeueCat의 연산들을 제공해야 한다. 언어에 기본 탑재되어 있는 LinkedList (Java) 자료구조를 이용해도 좋다.”</strong></p>\n<p>이번부터는 자바로 구현하겠습니다. <a href=\"http://rabbylab.xyz/practice-1/\">이전 글</a>에서 C로 코딩을 했는데, COIN에서 사용하는 공용 언어로 자바를 선정함에 따라 자바로 코딩하겠습니다.</p>\n<p>코드를 보시기에 앞서 문제를 먼저 해부(?)하겠습니다. 동물 쉼터는 &#8216;먼저 들어온 동물이 먼저 나가는&#8217; 곳 입니다. First In First Out(FIFO)라는거죠. 큐를 의미합니다. 그리고 문제의 끝에서 &#8216;LinkedList&#8217;를 사용해도 좋다고 합니다. 결국 LikedList로 표현된 Queue를 구현하라는 것입니다. 그리고 그 큐는 몇가지 제약조건을 가지고 있습니다. 들어온 지 가장 오래된 동물부터 입양하되, 개나 고양이 중에서 선택은 할 수 있도록 해줘라는 것입니다. 그래서 dequeueDog, dequeueCat 연산을 제공합니다. 대충 그림나옵니다. 그럼 시작할까요?</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">private Node head;\nprivate Node tail;\nprivate int size = 0;\nprivate class Node {\n    private String name;\n    private int id;\n    private Node next;\n    public Node(String animal, int num){\n        this.name = animal;\n        this.id = num;\n        this.next = null;\n    }\n}\n</pre>\n\n<p>링크드리스트를 구현해야하기 때문에 노드를 만들어줍니다. head와 tail은 큐에서 front(앞)와 rear(뒤)를 맡게됩니다. 일단은 4번째 줄 이후를 집중해서 보겠습니다. 이 노드는 동물의 이름 값(name), 개와 고양이를 분류하기 위한 값(id) 그리고 다음 노드를 가르키는 값(next)을 가지고 있습니다. 사실 저는 이 &#8216;가르키는 값&#8217;이 참 익숙하지 않습니다. C에서는 이걸 포인터로 구현하는데 Java에서는 그냥 값을 참조하면 되는데, 그게 은근히 낯섭니다. 포인터의 그 특징이 더 뇌리에 깊게 박힌 것 같습니다. 여하튼 노드는 이렇게 구성되어 있습니다. 이제 본격적인 연산들을 살펴보겠습니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public void enqueue(String animal, int num){\n    Node newNode = new Node(animal, num);\n    if(size == 0){\n        tail = head = newNode;\n    } else{\n        head.next = newNode;\n        head = newNode;\n    }\n    size++;\n}\n</pre>\n\n<p>이 코드는 노드를 추가(enqueue)하는 과정을 보여줍니다. 이 메소드는 인자로 동물의 이름(animal)과 개와 고양이를 구분하는 숫자(num)을 받습니다. 그리고 새로운 노드를 생성합니다. 이때 생성된 노드가 첫번째 노드라면(queue의 size가 0이라면) head와 tail이 동시에 이 노드를 가르킵니다. 만약 그렇지 않다면 head의 다음(next)에 새로운 노드가 붙습니다. 그리고 head는 새로운 노드를 가르킵니다. 그러니까 새로운 노드가 추가되면 tail로 붙는게 아니라 head가 이동합니다. tail은 움직이지 않습니다. 앞에다가 추가하는 방식인거죠. 추가가 끝나면 size를 증가시켜줍니다. 이로써 tail에는 가장 오래된 동물이 주인을 기다리게 됩니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public void dequeueAny(){\n    System.out.println(tail.name);\n    tail = tail.next;\n    size--;\n    return;\n}\n</pre>\n\n<p>새로운 주인을 만난 동물을 보내주는 메소드입니다. 가장 먼저 들어온 동물을 보내주겠습니다. 보내주는 걸 확인하기 위해 메세지를 출력합니다. 출력 이후에는 tail을 한칸 뒤로 이동합니다. 다음 차례를 가르키는거죠. 그리곤 size를 감소시켜줍니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public void dequeueDog(){\n    Node chaser_1 = tail;\n    Node chaser_2 = tail;\n    while(chaser_1.id != 0 && chaser_1.next != null){\n        chaser_2 = chaser_1;\n        chaser_1 = chaser_2.next;\n    }\n        //개가 첫번째 노드에 있었던 경우\n    if(chaser_1 == tail){\n        dequeueAny();\n        //개를 발견한 경우\n    } else if(chaser_1.id == 0){\n        System.out.println(chaser_1.name + \", Bye!\\n\");\n        chaser_2.next = chaser_1.next;\n    //개가 없는 경우\n        } else{\n        System.out.println(\"No Dog...\");\n        return;\n    }\n    size--;\n    return;\n}\n</pre>\n\n<p>이제 새로운 주인이 원하는 동물을 골라서 주겠습니다. 개/고양이 중에서 선택이 가능해야겠죠. 위의 코드는 개를 내보내는 코드입니다. id가 0일 때, 개/ 1일 때, 고양이라고 간주했습니다. 이번 코드에서 중요한건 역시 chaser_1,chaser_2 입니다. 이들의 역할은 원하는 동물을 찾아오는 것입니다. 처음에는 tail부터 시작합니다. 가장 오래된 동물부터 확인하는 것이죠.</p>\n<p>while문을 보겠습니다. 본격적인 추적(chase)가 시작됩니다. id가 0이 아닐 경우 계속 반복됩니다. 다시말해, 0이 아니라는 말은 개가 아니라는 것이니까 고양이라는 의미겠죠? 그리고 만약에 더 이상 개가 남아 있지 않을 경우도 있겠죠? 그런 경우에 무한루프를 방지하기 위해서 next값이 null이면 탈출할 수 있도록 조건을 만들어둡니다. 이제 chaser의 이동을 살펴보겠습니다. 5번 줄에서 chaser_2가 chaser_1의 위치로 갑니다. 그리고 다음 줄에서 chaser_1은 다음 노드로 이동합니다. 이렇게 chaser_1이 앞으로 한 노드씩 움직이며 개를 찾습니다. 결국 개가 발견되거나 개가 없으면 루프를 벗어납니다.</p>\n<p>만약에 개가 첫번째 노드에 있었다면 그냥 dequeueAny 메소드를 호출해줍니다. 그리고 만약에 개가 맞다면 개에게 작별을 고하고 보내줍니다. chaser_2의 다음 노드였던 chaser_1의 노드를 없애주기 위해 chaser_1 다음의 노드와 chaser_2를 이어줍니다. 그렇게 노드를 정리합니다. 만약에 개가 없었다면 더 이상 개가 없다고 메세지를 출력해줍니다.</p>\n<p>dequeueCat의 경우는 id 값만 바꿔주면 됩니다. 고로 생략하겠습니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">public class Main {\n\n    public static void main(String[] args) {\n        LinkedList animals = new LinkedList();\n\n        animals.enqueue(\"귀욤\",1);\n        animals.enqueue(\"개똥\",0);\n        animals.enqueue(\"황묘\",1);\n        animals.enqueue(\"백구\",0);\n\n        System.out.println(animals);\n\n        animals.dequeueDog();\n\n        System.out.println(animals);\n    }\n\n}\n</pre>\n\n<p>예제 확인을 위한 코드입니다. 개똥이를 보내고 빈자리를 확인하는 것으로 코드가 끝납니다. 아래는 출력결과 입니다.</p>\n<p><img class=\"alignnone size-full wp-image-501\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/04/Aniqueue-실행-결과.jpg\" alt=\"Anishelter 실행 결과\" width=\"339\" height=\"108\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/04/Aniqueue-실행-결과.jpg 339w, http://rabbylab.xyz/blog/wp-content/uploads/2016/04/Aniqueue-실행-결과-300x96.jpg 300w\" sizes=\"(max-width: 339px) 100vw, 339px\" /></p>\n<p>전체 코드는 <a href=\"https://github.com/joeunha/rabbylab-csbasic/blob/master/src/rabbylab/csbasic/coin/animalshelter/LinkedList.java\" target=\"_blank\">이곳</a>에서 확인하실 수 있습니다. 감사합니다.</p>\n"},{"id":"516","title":"PRATO 개발기 (1)","date":"2016-04-28T06:14:17.000Z","author":"rabby","layout":"post","guid":"http://rabbylab.xyz/?p=516","_content":"### 소개\n\nPRATO는 PraiseTogether의 약자입니다. 함께 찬양하고 노래하기 위해 필요한 콘티(곡의 순서)를 제작하는 과정에 필요한 모든 과정을 제공하는 웹 서비스입니다.\n\n해당 서비스는 기존에 콘티 제작 과정이 웹 검색-문서 편집-출력의 과정에서 웹 브라우저와 문서 편집 도구를 별도로 이용해야만 했던 불편함을 해소하고자 시작되었습니다. 불필요한 다운로드 과정을 생략하고 하나의 웹 페이지에서 모든 과정을 수행할 수 있는 서비스입니다.\n\n주요 기능은 &#8216;**악보 검색**&#8216;, &#8216;**콘티 편집**&#8216;, &#8216;**콘티 출력**&#8216; 입니다.\n\n개발 과정 및 코드는 [Github](https://github.com/joeunha/praisetogether)을 통해 확인하실 수 있습니다.\n\n&nbsp;\n\n### 개발 환경 만들기\n\n그나마 경험이 많은 AngularJS로 프론트엔드를 꾸릴까 합니다. 서버단을 구현할 능력이 있을지 모르나, 시간과 능력이 허락한다면 MEAN Stack으로 전체를 구현해볼 생각입니다. 개발 환경 세팅에 소요되는 시간을 최소화하기 위해 스캐폴딩 도구인 [Yeoman](http://yeoman.io/)을 이용했습니다.\n\n개발 툴은 SourceTree / Atom / Chrome을 사용합니다. 상황에 따라 Windows 10 / OS X를 혼용하고 있습니다. Windows 10의 경우 bash 툴을 지원하지 않지만 SourceTree에서 제공하는 터미널 기능을 이용하여 개발을 진행하고 있습니다.\n\nnode (npm)을 설치한 뒤, yeoman 을 설치하면 yeoman을 사용할 준비가 끝이 납니다. 터미널에서 yo라고 입력하면 generator를 설치할 수 있는 installer가 보입니다. 저는 Grunt / Bower / css 를 선택했습니다. 스캐폴딩이 끝나고 grunt test, grunt build, grunt serve를 순서대로 입력하면 바로 작업 가능한 웹 페이지를 만나보실 수 있습니다. 이로써 개발 환경을 설정 했습니다.\n\n다음 시간에는 페이지 구조를 잡아보겠습니다.","source":"_posts/prato-1.md","raw":"---\nid: 516\ntitle: PRATO 개발기 (1)\ndate: 2016-04-28T15:14:17+00:00\nauthor: rabby\nlayout: post\nguid: http://rabbylab.xyz/?p=516\npermalink: /prato-%ea%b0%9c%eb%b0%9c%ea%b8%b0-1/\ncategories:\n  - prato project\ntags:\n  - praisetogether\n  - prato\n---\n### 소개\n\nPRATO는 PraiseTogether의 약자입니다. 함께 찬양하고 노래하기 위해 필요한 콘티(곡의 순서)를 제작하는 과정에 필요한 모든 과정을 제공하는 웹 서비스입니다.\n\n해당 서비스는 기존에 콘티 제작 과정이 웹 검색-문서 편집-출력의 과정에서 웹 브라우저와 문서 편집 도구를 별도로 이용해야만 했던 불편함을 해소하고자 시작되었습니다. 불필요한 다운로드 과정을 생략하고 하나의 웹 페이지에서 모든 과정을 수행할 수 있는 서비스입니다.\n\n주요 기능은 &#8216;**악보 검색**&#8216;, &#8216;**콘티 편집**&#8216;, &#8216;**콘티 출력**&#8216; 입니다.\n\n개발 과정 및 코드는 [Github](https://github.com/joeunha/praisetogether)을 통해 확인하실 수 있습니다.\n\n&nbsp;\n\n### 개발 환경 만들기\n\n그나마 경험이 많은 AngularJS로 프론트엔드를 꾸릴까 합니다. 서버단을 구현할 능력이 있을지 모르나, 시간과 능력이 허락한다면 MEAN Stack으로 전체를 구현해볼 생각입니다. 개발 환경 세팅에 소요되는 시간을 최소화하기 위해 스캐폴딩 도구인 [Yeoman](http://yeoman.io/)을 이용했습니다.\n\n개발 툴은 SourceTree / Atom / Chrome을 사용합니다. 상황에 따라 Windows 10 / OS X를 혼용하고 있습니다. Windows 10의 경우 bash 툴을 지원하지 않지만 SourceTree에서 제공하는 터미널 기능을 이용하여 개발을 진행하고 있습니다.\n\nnode (npm)을 설치한 뒤, yeoman 을 설치하면 yeoman을 사용할 준비가 끝이 납니다. 터미널에서 yo라고 입력하면 generator를 설치할 수 있는 installer가 보입니다. 저는 Grunt / Bower / css 를 선택했습니다. 스캐폴딩이 끝나고 grunt test, grunt build, grunt serve를 순서대로 입력하면 바로 작업 가능한 웹 페이지를 만나보실 수 있습니다. 이로써 개발 환경을 설정 했습니다.\n\n다음 시간에는 페이지 구조를 잡아보겠습니다.","slug":"/prato-%ea%b0%9c%eb%b0%9c%ea%b8%b0-1/","published":1,"updated":"2017-03-01T06:36:21.000Z","comments":1,"photos":[],"link":"","_id":"cizqle7r4000ohyvgff8oyf39","content":"<h3 id=\"소개\"><a href=\"#소개\" class=\"headerlink\" title=\"소개\"></a>소개</h3><p>PRATO는 PraiseTogether의 약자입니다. 함께 찬양하고 노래하기 위해 필요한 콘티(곡의 순서)를 제작하는 과정에 필요한 모든 과정을 제공하는 웹 서비스입니다.</p>\n<p>해당 서비스는 기존에 콘티 제작 과정이 웹 검색-문서 편집-출력의 과정에서 웹 브라우저와 문서 편집 도구를 별도로 이용해야만 했던 불편함을 해소하고자 시작되었습니다. 불필요한 다운로드 과정을 생략하고 하나의 웹 페이지에서 모든 과정을 수행할 수 있는 서비스입니다.</p>\n<p>주요 기능은 &#8216;<strong>악보 검색</strong>&#8216;, &#8216;<strong>콘티 편집</strong>&#8216;, &#8216;<strong>콘티 출력</strong>&#8216; 입니다.</p>\n<p>개발 과정 및 코드는 <a href=\"https://github.com/joeunha/praisetogether\" target=\"_blank\" rel=\"external\">Github</a>을 통해 확인하실 수 있습니다.</p>\n<p>&nbsp;</p>\n<h3 id=\"개발-환경-만들기\"><a href=\"#개발-환경-만들기\" class=\"headerlink\" title=\"개발 환경 만들기\"></a>개발 환경 만들기</h3><p>그나마 경험이 많은 AngularJS로 프론트엔드를 꾸릴까 합니다. 서버단을 구현할 능력이 있을지 모르나, 시간과 능력이 허락한다면 MEAN Stack으로 전체를 구현해볼 생각입니다. 개발 환경 세팅에 소요되는 시간을 최소화하기 위해 스캐폴딩 도구인 <a href=\"http://yeoman.io/\" target=\"_blank\" rel=\"external\">Yeoman</a>을 이용했습니다.</p>\n<p>개발 툴은 SourceTree / Atom / Chrome을 사용합니다. 상황에 따라 Windows 10 / OS X를 혼용하고 있습니다. Windows 10의 경우 bash 툴을 지원하지 않지만 SourceTree에서 제공하는 터미널 기능을 이용하여 개발을 진행하고 있습니다.</p>\n<p>node (npm)을 설치한 뒤, yeoman 을 설치하면 yeoman을 사용할 준비가 끝이 납니다. 터미널에서 yo라고 입력하면 generator를 설치할 수 있는 installer가 보입니다. 저는 Grunt / Bower / css 를 선택했습니다. 스캐폴딩이 끝나고 grunt test, grunt build, grunt serve를 순서대로 입력하면 바로 작업 가능한 웹 페이지를 만나보실 수 있습니다. 이로써 개발 환경을 설정 했습니다.</p>\n<p>다음 시간에는 페이지 구조를 잡아보겠습니다.</p>\n","excerpt":"","more":"<h3 id=\"소개\"><a href=\"#소개\" class=\"headerlink\" title=\"소개\"></a>소개</h3><p>PRATO는 PraiseTogether의 약자입니다. 함께 찬양하고 노래하기 위해 필요한 콘티(곡의 순서)를 제작하는 과정에 필요한 모든 과정을 제공하는 웹 서비스입니다.</p>\n<p>해당 서비스는 기존에 콘티 제작 과정이 웹 검색-문서 편집-출력의 과정에서 웹 브라우저와 문서 편집 도구를 별도로 이용해야만 했던 불편함을 해소하고자 시작되었습니다. 불필요한 다운로드 과정을 생략하고 하나의 웹 페이지에서 모든 과정을 수행할 수 있는 서비스입니다.</p>\n<p>주요 기능은 &#8216;<strong>악보 검색</strong>&#8216;, &#8216;<strong>콘티 편집</strong>&#8216;, &#8216;<strong>콘티 출력</strong>&#8216; 입니다.</p>\n<p>개발 과정 및 코드는 <a href=\"https://github.com/joeunha/praisetogether\">Github</a>을 통해 확인하실 수 있습니다.</p>\n<p>&nbsp;</p>\n<h3 id=\"개발-환경-만들기\"><a href=\"#개발-환경-만들기\" class=\"headerlink\" title=\"개발 환경 만들기\"></a>개발 환경 만들기</h3><p>그나마 경험이 많은 AngularJS로 프론트엔드를 꾸릴까 합니다. 서버단을 구현할 능력이 있을지 모르나, 시간과 능력이 허락한다면 MEAN Stack으로 전체를 구현해볼 생각입니다. 개발 환경 세팅에 소요되는 시간을 최소화하기 위해 스캐폴딩 도구인 <a href=\"http://yeoman.io/\">Yeoman</a>을 이용했습니다.</p>\n<p>개발 툴은 SourceTree / Atom / Chrome을 사용합니다. 상황에 따라 Windows 10 / OS X를 혼용하고 있습니다. Windows 10의 경우 bash 툴을 지원하지 않지만 SourceTree에서 제공하는 터미널 기능을 이용하여 개발을 진행하고 있습니다.</p>\n<p>node (npm)을 설치한 뒤, yeoman 을 설치하면 yeoman을 사용할 준비가 끝이 납니다. 터미널에서 yo라고 입력하면 generator를 설치할 수 있는 installer가 보입니다. 저는 Grunt / Bower / css 를 선택했습니다. 스캐폴딩이 끝나고 grunt test, grunt build, grunt serve를 순서대로 입력하면 바로 작업 가능한 웹 페이지를 만나보실 수 있습니다. 이로써 개발 환경을 설정 했습니다.</p>\n<p>다음 시간에는 페이지 구조를 잡아보겠습니다.</p>\n"},{"id":"518","title":"PRATO 개발기 (2)","date":"2016-05-23T00:05:29.000Z","author":"rabby","layout":"post","guid":"http://rabbylab.xyz/?p=518","_content":"페이지 구조를 잡아보기로 했습니다. 기획 부분이라고 보시면 될 것 같습니다. 기존에 PPT 파일로 만들어둔 목업을 조금 더 세련된 형태로 다듬어 보여 드리는 것으로 자질구레한 설명을 대체하겠습니다. 목업은 [이곳](https://goo.gl/OMW0rb)에서 보실 수 있습니다. 도구는 [페이지 구조를 잡아보기로 했습니다. 기획 부분이라고 보시면 될 것 같습니다. 기존에 PPT 파일로 만들어둔 목업을 조금 더 세련된 형태로 다듬어 보여 드리는 것으로 자질구레한 설명을 대체하겠습니다. 목업은 [이곳](https://goo.gl/OMW0rb)에서 보실 수 있습니다. 도구는 ](https://ovenapp.io/) 를 활용했습니다.\n\n분홍 툴팁을 따라가면 대략적인 플로우를 이해하실 수 있습니다. 더 많은 이들이 이해하기 쉽도록 만들어야하는 기획 프로토타입이지만 저만 이해할 수준으로 만들어서 부끄럽습니다. 시간 나는대로 디테일을 더할 생각입니다. 계속 지켜봐주세요.\n\n* * *\n\n(16&#8217;07.05 업데이트) ovenapp 을 대신해 codepen 에 프로토타입을 만들었습니다. 학교 수업에서 발표를 위해 이전의 프로토타입보다 조금 더 발전한 수준으로 만들었습니다. 발전이라고 했으나, 플로우를 이해할 수 있는 정도입니다. 해당 목업은 [이곳](http://codepen.io/rabbylab/full/jrWKPR/)에서 보실 수 있습니다.","source":"_posts/prato-2.md","raw":"---\nid: 518\ntitle: PRATO 개발기 (2)\ndate: 2016-05-23T09:05:29+00:00\nauthor: rabby\nlayout: post\nguid: http://rabbylab.xyz/?p=518\npermalink: /prato-%ea%b0%9c%eb%b0%9c%ea%b8%b0-2/\ncategories:\n  - prato project\ntags:\n  - praisetogether\n  - prato\n  - 기획\n---\n페이지 구조를 잡아보기로 했습니다. 기획 부분이라고 보시면 될 것 같습니다. 기존에 PPT 파일로 만들어둔 목업을 조금 더 세련된 형태로 다듬어 보여 드리는 것으로 자질구레한 설명을 대체하겠습니다. 목업은 [이곳](https://goo.gl/OMW0rb)에서 보실 수 있습니다. 도구는 [페이지 구조를 잡아보기로 했습니다. 기획 부분이라고 보시면 될 것 같습니다. 기존에 PPT 파일로 만들어둔 목업을 조금 더 세련된 형태로 다듬어 보여 드리는 것으로 자질구레한 설명을 대체하겠습니다. 목업은 [이곳](https://goo.gl/OMW0rb)에서 보실 수 있습니다. 도구는 ](https://ovenapp.io/) 를 활용했습니다.\n\n분홍 툴팁을 따라가면 대략적인 플로우를 이해하실 수 있습니다. 더 많은 이들이 이해하기 쉽도록 만들어야하는 기획 프로토타입이지만 저만 이해할 수준으로 만들어서 부끄럽습니다. 시간 나는대로 디테일을 더할 생각입니다. 계속 지켜봐주세요.\n\n* * *\n\n(16&#8217;07.05 업데이트) ovenapp 을 대신해 codepen 에 프로토타입을 만들었습니다. 학교 수업에서 발표를 위해 이전의 프로토타입보다 조금 더 발전한 수준으로 만들었습니다. 발전이라고 했으나, 플로우를 이해할 수 있는 정도입니다. 해당 목업은 [이곳](http://codepen.io/rabbylab/full/jrWKPR/)에서 보실 수 있습니다.","slug":"/prato-%ea%b0%9c%eb%b0%9c%ea%b8%b0-2/","published":1,"updated":"2017-03-01T06:36:34.000Z","comments":1,"photos":[],"link":"","_id":"cizqle7r6000rhyvgk5912hky","content":"<p>페이지 구조를 잡아보기로 했습니다. 기획 부분이라고 보시면 될 것 같습니다. 기존에 PPT 파일로 만들어둔 목업을 조금 더 세련된 형태로 다듬어 보여 드리는 것으로 자질구레한 설명을 대체하겠습니다. 목업은 <a href=\"https://goo.gl/OMW0rb\" target=\"_blank\" rel=\"external\">이곳</a>에서 보실 수 있습니다. 도구는 <a href=\"https://ovenapp.io/\" target=\"_blank\" rel=\"external\">페이지 구조를 잡아보기로 했습니다. 기획 부분이라고 보시면 될 것 같습니다. 기존에 PPT 파일로 만들어둔 목업을 조금 더 세련된 형태로 다듬어 보여 드리는 것으로 자질구레한 설명을 대체하겠습니다. 목업은 <a href=\"https://goo.gl/OMW0rb\" target=\"_blank\" rel=\"external\">이곳</a>에서 보실 수 있습니다. 도구는 </a> 를 활용했습니다.</p>\n<p>분홍 툴팁을 따라가면 대략적인 플로우를 이해하실 수 있습니다. 더 많은 이들이 이해하기 쉽도록 만들어야하는 기획 프로토타입이지만 저만 이해할 수준으로 만들어서 부끄럽습니다. 시간 나는대로 디테일을 더할 생각입니다. 계속 지켜봐주세요.</p>\n<hr>\n<p>(16&#8217;07.05 업데이트) ovenapp 을 대신해 codepen 에 프로토타입을 만들었습니다. 학교 수업에서 발표를 위해 이전의 프로토타입보다 조금 더 발전한 수준으로 만들었습니다. 발전이라고 했으나, 플로우를 이해할 수 있는 정도입니다. 해당 목업은 <a href=\"http://codepen.io/rabbylab/full/jrWKPR/\" target=\"_blank\" rel=\"external\">이곳</a>에서 보실 수 있습니다.</p>\n","excerpt":"","more":"<p>페이지 구조를 잡아보기로 했습니다. 기획 부분이라고 보시면 될 것 같습니다. 기존에 PPT 파일로 만들어둔 목업을 조금 더 세련된 형태로 다듬어 보여 드리는 것으로 자질구레한 설명을 대체하겠습니다. 목업은 <a href=\"https://goo.gl/OMW0rb\">이곳</a>에서 보실 수 있습니다. 도구는 <a href=\"https://ovenapp.io/\">페이지 구조를 잡아보기로 했습니다. 기획 부분이라고 보시면 될 것 같습니다. 기존에 PPT 파일로 만들어둔 목업을 조금 더 세련된 형태로 다듬어 보여 드리는 것으로 자질구레한 설명을 대체하겠습니다. 목업은 <a href=\"https://goo.gl/OMW0rb\">이곳</a>에서 보실 수 있습니다. 도구는 </a> 를 활용했습니다.</p>\n<p>분홍 툴팁을 따라가면 대략적인 플로우를 이해하실 수 있습니다. 더 많은 이들이 이해하기 쉽도록 만들어야하는 기획 프로토타입이지만 저만 이해할 수준으로 만들어서 부끄럽습니다. 시간 나는대로 디테일을 더할 생각입니다. 계속 지켜봐주세요.</p>\n<hr>\n<p>(16&#8217;07.05 업데이트) ovenapp 을 대신해 codepen 에 프로토타입을 만들었습니다. 학교 수업에서 발표를 위해 이전의 프로토타입보다 조금 더 발전한 수준으로 만들었습니다. 발전이라고 했으나, 플로우를 이해할 수 있는 정도입니다. 해당 목업은 <a href=\"http://codepen.io/rabbylab/full/jrWKPR/\">이곳</a>에서 보실 수 있습니다.</p>\n"},{"id":"540","title":"[Challenge] Tribute Page 만들기","date":"2016-05-26T08:51:04.000Z","author":"rabby","layout":"post","guid":"http://rabbylab.xyz/?p=540","_content":"[FreeCodeCamp](https://www.freecodecamp.com/)를 시작한지 3주가 되어갑니다. 지금까지 [13시간 분량의 공부를 진행했네요.](https://www.freecodecamp.com/joeunha) Challenge 부분에서는 HTML, Bootstrap, jQuery 를 이수했습니다. 그리고 이제는 Project를 하게 되었는데요. 이런 실전적인 과제를 내어준다는 점에서 다른 코딩 학습 서비스와 차별점이 있는 것 같습니다. (중간 중간에 계속 커뮤니티와 소통할 수 있는 미션을 주는 것도 FCC가 가진 장점 중에 하납니다.)\n\n첫번째 과제는 Tribute Page를 만드는 건데요. Tribute는 공헌, 봉헌, 헌사 등의 이미를 갖는데 죽은 이를 기리는 페이지입니다. [예시](https://codepen.io/FreeCodeCamp/full/NNvBQW/)를 주고 코드를 보지 않고 이와 유사한 형태의 페이지를 만들라는 것이 주요 내용입니다.\n\n과제를 위해 [CodePen](https://codepen.io/)이라는 서비스를 사용하는데요. 일전에 인턴으로 일하면서 프론트엔드에 필요한 효과의 코드를 얻기 위해 사용했었는데 이렇게 개인 프로젝트로도 사용이 가능하군요.\n\n저는 존경하는 Steve Jobs를 기리는 페이지를 만들어보았습니다. 특별할 건 없구요. 예시를 최대한 따라하면서 Challenge를 통해 배운 기술들을 활용했습니다. [이곳](https://codepen.io/rabbylab/pen/mEbVNJ)에서 확인하실 수 있습니다. 조금 엉성한 구조로 만든 탓인지 자료 조사를 포함해서 40분 정도 소요되었습니다. (제 기준에서는 제법 금방 한 것 같습니다.)\n\n다음 프로젝트는 개인 포트폴리오를 만드는 겁니다. 늘 포트폴리오 하나 만들어야겠다고 생각해왔었는데 이참에 하나 만들어야겠습니다. FCC, 이거 은근히 중독됩니다. 공부도 되고 재미도 있는 참 좋은 서비스인 것 같습니다.","source":"_posts/project-tribute-page.md","raw":"---\nid: 540\ntitle: '[Challenge] Tribute Page 만들기'\ndate: 2016-05-26T17:51:04+00:00\nauthor: rabby\nlayout: post\nguid: http://rabbylab.xyz/?p=540\npermalink: /project-tribute-page-%eb%a7%8c%eb%93%a4%ea%b8%b0/\ncategories:\n  - freecodecamp\ntags:\n  - codepen\n  - fcc\n  - freecodecamp\n  - practice\n  - project\n---\n[FreeCodeCamp](https://www.freecodecamp.com/)를 시작한지 3주가 되어갑니다. 지금까지 [13시간 분량의 공부를 진행했네요.](https://www.freecodecamp.com/joeunha) Challenge 부분에서는 HTML, Bootstrap, jQuery 를 이수했습니다. 그리고 이제는 Project를 하게 되었는데요. 이런 실전적인 과제를 내어준다는 점에서 다른 코딩 학습 서비스와 차별점이 있는 것 같습니다. (중간 중간에 계속 커뮤니티와 소통할 수 있는 미션을 주는 것도 FCC가 가진 장점 중에 하납니다.)\n\n첫번째 과제는 Tribute Page를 만드는 건데요. Tribute는 공헌, 봉헌, 헌사 등의 이미를 갖는데 죽은 이를 기리는 페이지입니다. [예시](https://codepen.io/FreeCodeCamp/full/NNvBQW/)를 주고 코드를 보지 않고 이와 유사한 형태의 페이지를 만들라는 것이 주요 내용입니다.\n\n과제를 위해 [CodePen](https://codepen.io/)이라는 서비스를 사용하는데요. 일전에 인턴으로 일하면서 프론트엔드에 필요한 효과의 코드를 얻기 위해 사용했었는데 이렇게 개인 프로젝트로도 사용이 가능하군요.\n\n저는 존경하는 Steve Jobs를 기리는 페이지를 만들어보았습니다. 특별할 건 없구요. 예시를 최대한 따라하면서 Challenge를 통해 배운 기술들을 활용했습니다. [이곳](https://codepen.io/rabbylab/pen/mEbVNJ)에서 확인하실 수 있습니다. 조금 엉성한 구조로 만든 탓인지 자료 조사를 포함해서 40분 정도 소요되었습니다. (제 기준에서는 제법 금방 한 것 같습니다.)\n\n다음 프로젝트는 개인 포트폴리오를 만드는 겁니다. 늘 포트폴리오 하나 만들어야겠다고 생각해왔었는데 이참에 하나 만들어야겠습니다. FCC, 이거 은근히 중독됩니다. 공부도 되고 재미도 있는 참 좋은 서비스인 것 같습니다.","slug":"/project-tribute-page-%eb%a7%8c%eb%93%a4%ea%b8%b0/","published":1,"updated":"2017-03-01T06:35:53.000Z","comments":1,"photos":[],"link":"","_id":"cizqle7ra000uhyvgomjecfc8","content":"<p><a href=\"https://www.freecodecamp.com/\" target=\"_blank\" rel=\"external\">FreeCodeCamp</a>를 시작한지 3주가 되어갑니다. 지금까지 <a href=\"https://www.freecodecamp.com/joeunha\" target=\"_blank\" rel=\"external\">13시간 분량의 공부를 진행했네요.</a> Challenge 부분에서는 HTML, Bootstrap, jQuery 를 이수했습니다. 그리고 이제는 Project를 하게 되었는데요. 이런 실전적인 과제를 내어준다는 점에서 다른 코딩 학습 서비스와 차별점이 있는 것 같습니다. (중간 중간에 계속 커뮤니티와 소통할 수 있는 미션을 주는 것도 FCC가 가진 장점 중에 하납니다.)</p>\n<p>첫번째 과제는 Tribute Page를 만드는 건데요. Tribute는 공헌, 봉헌, 헌사 등의 이미를 갖는데 죽은 이를 기리는 페이지입니다. <a href=\"https://codepen.io/FreeCodeCamp/full/NNvBQW/\" target=\"_blank\" rel=\"external\">예시</a>를 주고 코드를 보지 않고 이와 유사한 형태의 페이지를 만들라는 것이 주요 내용입니다.</p>\n<p>과제를 위해 <a href=\"https://codepen.io/\" target=\"_blank\" rel=\"external\">CodePen</a>이라는 서비스를 사용하는데요. 일전에 인턴으로 일하면서 프론트엔드에 필요한 효과의 코드를 얻기 위해 사용했었는데 이렇게 개인 프로젝트로도 사용이 가능하군요.</p>\n<p>저는 존경하는 Steve Jobs를 기리는 페이지를 만들어보았습니다. 특별할 건 없구요. 예시를 최대한 따라하면서 Challenge를 통해 배운 기술들을 활용했습니다. <a href=\"https://codepen.io/rabbylab/pen/mEbVNJ\" target=\"_blank\" rel=\"external\">이곳</a>에서 확인하실 수 있습니다. 조금 엉성한 구조로 만든 탓인지 자료 조사를 포함해서 40분 정도 소요되었습니다. (제 기준에서는 제법 금방 한 것 같습니다.)</p>\n<p>다음 프로젝트는 개인 포트폴리오를 만드는 겁니다. 늘 포트폴리오 하나 만들어야겠다고 생각해왔었는데 이참에 하나 만들어야겠습니다. FCC, 이거 은근히 중독됩니다. 공부도 되고 재미도 있는 참 좋은 서비스인 것 같습니다.</p>\n","excerpt":"","more":"<p><a href=\"https://www.freecodecamp.com/\">FreeCodeCamp</a>를 시작한지 3주가 되어갑니다. 지금까지 <a href=\"https://www.freecodecamp.com/joeunha\">13시간 분량의 공부를 진행했네요.</a> Challenge 부분에서는 HTML, Bootstrap, jQuery 를 이수했습니다. 그리고 이제는 Project를 하게 되었는데요. 이런 실전적인 과제를 내어준다는 점에서 다른 코딩 학습 서비스와 차별점이 있는 것 같습니다. (중간 중간에 계속 커뮤니티와 소통할 수 있는 미션을 주는 것도 FCC가 가진 장점 중에 하납니다.)</p>\n<p>첫번째 과제는 Tribute Page를 만드는 건데요. Tribute는 공헌, 봉헌, 헌사 등의 이미를 갖는데 죽은 이를 기리는 페이지입니다. <a href=\"https://codepen.io/FreeCodeCamp/full/NNvBQW/\">예시</a>를 주고 코드를 보지 않고 이와 유사한 형태의 페이지를 만들라는 것이 주요 내용입니다.</p>\n<p>과제를 위해 <a href=\"https://codepen.io/\">CodePen</a>이라는 서비스를 사용하는데요. 일전에 인턴으로 일하면서 프론트엔드에 필요한 효과의 코드를 얻기 위해 사용했었는데 이렇게 개인 프로젝트로도 사용이 가능하군요.</p>\n<p>저는 존경하는 Steve Jobs를 기리는 페이지를 만들어보았습니다. 특별할 건 없구요. 예시를 최대한 따라하면서 Challenge를 통해 배운 기술들을 활용했습니다. <a href=\"https://codepen.io/rabbylab/pen/mEbVNJ\">이곳</a>에서 확인하실 수 있습니다. 조금 엉성한 구조로 만든 탓인지 자료 조사를 포함해서 40분 정도 소요되었습니다. (제 기준에서는 제법 금방 한 것 같습니다.)</p>\n<p>다음 프로젝트는 개인 포트폴리오를 만드는 겁니다. 늘 포트폴리오 하나 만들어야겠다고 생각해왔었는데 이참에 하나 만들어야겠습니다. FCC, 이거 은근히 중독됩니다. 공부도 되고 재미도 있는 참 좋은 서비스인 것 같습니다.</p>\n"},{"id":"472","title":"[Practice] min연산을 갖춘 stack을 구현하라!","date":"2016-03-26T10:29:50.000Z","author":"rabby","layout":"post","guid":"http://rabbylab.xyz/?p=472","_content":"###### <span style=\"color: #999999;\">Practice 시리즈를 연재합니다. 지난 3월 3일부터 COIN(코딩인터뷰 준비하는 모임)이라는 이름으로 함께 취업스터디를 진행하고 있는 5명의 친구들과 함께 교재 <코딩인터뷰 완전분석> 이라는 책을 가지고 공부를 시작했습니다. Practice 시리즈는 이 과정에서 함께 고민하며 풀었던 문제에 대해 이야기하는 시리즈입니다.</span>\n\n* * *\n\n###### \n\n**코딩인터뷰 완전분석 &#8211; 연습문제 3.2**\n\n**&#8220;push와 pop의 두 가지 연산뿐 아니라, 최솟값을 갖는 원소를 반환하는 min연산을 갖춘 stack은 어떻게 구현할 수 있겠는가? push, pop, 그리고 min은 공히 O(1) 시간에 처리되어야 한다.&#8221;**\n\n이 문제의 포인트는 &#8216;min연산&#8217;, &#8216;O(1)&#8217;에 있습니다. min연산은 어떻게 검색을 통해 해낸다고 해도 O(1) 시간에 처리해야하는 문제로 인해 반복문을 사용할 수가 없게되죠. 결국 min연산부터 다시 생각해야합니다. 이 문제를 해결하는 아이디어를 낸 친구가 이렇게 말했습니다. &#8216;그냥 stack을 하나 더 만들면 안돼?&#8217;라고 말입니다. 이때부터 함께 이것저것 아이디어를 덧붙여가며 이야기를 나눠보니 &#8216;옳다쿠나&#8217; 정답이었습니다.\n\n구현은 그리 어렵지 않습니다. 차근차근 해보겠습니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n\nint main_stack[10];\nint min_chaser[10];\nint main_top = 0, chaser_top = 0;\nint cur_min;\n\n</pre>\n\n우선 배열을 두개를 선언해줍니다. 하나는 기본 스택을 위한 배열, 다른 하나는 최소값을 추적하는 배열입니다. 그리고 각 스택별로 가장 마지막에 들어온 숫자를 체크하는 top 변수를 스택마다 하나씩 선언하고 0으로 초기화시킵니다. 마지막으로 현재의 최소값을 기억하고 있는 변수를 하나 선언합니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">//chaser_push function\nvoid chaser_push(num) {\n   if(chaser_top &gt;= 10) {\n      printf(\"Stack is overflow!\\n\");\n   } else {\n      min_chaser[chaser_top] = num;\n      chaser_top++;\n   }\n}\n\n//chaser_pop function\nvoid chaser_pop() {\n   chaser_top--;\n   printf(\"I am number %d. I was a min number!\\n\", min_chaser[chaser_top]);\n   min_chaser[chaser_top] = 0;\n   cur_min = min_chaser[chaser_top - 1];\n}\n</pre>\n\n다음은 함수를 만들어줄 차례입니다. 우선 chaser와 관련된 함수를 먼저 만들겠습니다. 왜냐하면 뒤이어 나오는 기본 스택 함수들이 이 함수들을 사용해야하기 때문입니다. chaser\\_push는 인자로 num값을 받습니다. 만약에 chaser\\_top값이 스택의 범주(10)를 넘어선다면 이는 오버플로우가 발생한 것이라고 경고하는 메세지를 출력합니다. 만약 오버플로우가 아니라면 chaser에 인자로 받은 값을 넣습니다. 그리고 chaser_top 값을 증가시켜줍니다. 기본적인 push구현 방식입니다.\n  \n이어사 등장하는 chaser\\_pop도 일반적인 pop과 같습니다. 우선 chaser\\_top을 감소시켜줍니다. 그리고 min\\_chaser에서 가장 위에 있는 값을 꺼내줍니다. 출력문을 통해 최소값이었다는 것을 밝힙니다. 원래 최소값이 들어있던 자리를 비워주고 cur\\_min값을 바꿔줍니다.\n\n_<span style=\"color: #999999;\">*저는 이 부분에서 chaser가 제일 작은 놈을 가두는 경찰소라는 추상적인 관념을 가지고 작업했습니다. 각 숫자들에 인격을 부여하고 함수 역시 어떤 역할을 감당하는 객체(?)라는 느낌을 가지고 작업하다보니 &#8220;I am number 5. I was a min number!&#8221; 같은 메세지가 나왔습니다.</span>_\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">//main_stack push function\nvoid push(int num) {\n   if(main_top &gt;= 10) {\n      printf(\"Stack is overflow.\\n\");\n   } else if (main_top == 0) {\n      main_stack[main_top] = num;\n      cur_num = num;\n      chaser_push(cur_num);\n      main_top++;\n  } else {\n      main_stack[main_top] = num;\n      main_top++;\n      if(num &lt; cur_num) {\n          cur_num = num;\n          chaser_push(cur_num);\n      }\n   }  \n}\n\n//main_stack pop function\nvoid pop() {\n   if(main_top == 0) {\n      printf(\"Stack is empty.\\n\");\n   } else {\n      main_top--;\n      \n      if(main_stack[main_top] == cur_num) {\n         chaser_pop();\n      } else {\n          printf(\"I am number %d.\\n\", main_stack[main_top]);\n      }\n        main_stack[main_top] = 0;\n   }\n}\n</pre>\n\n기본적인 push&pop 함수를 크게 벗어나지 않습니다. 특이점만 살펴보겠습니다. 우선 main\\_stack에 처음으로 push를 하는 경우가 나옵니다. main\\_top가 0인 경우죠. 이 경우에는 홀로 존재하기 때문에 곧장 최소값이 됩니다. 때문에 cur\\_num에 num을 넣어주고 chaser에도 push를 합니다. 그리고 top을 증가시키구요. 그 이후로는 cur\\_num값과 비교해서 더 작은 경우에만 chaser\\_push를 호출합니다. pop을 살펴보면 비어있는 경우를 메세지로 알려줍니다. 그렇지 않은 경우 중에서 빼내려고 하는 값과 cur\\_num가 같을 경우, main\\_stack의 pop이 아니라 chaser\\_pop으로 넘어갑니다. 거기서 &#8220;I was a min number!&#8221;라는 메세지를 출력한 뒤에 다시 돌아와 빠진 자리를 비워줍니다. 일반적인 경우에는 main_stack에서 메세지를 출력하고 함수가 끝납니다.\n\n이제 테스트해보겠습니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">int main() {\n\n   push(20);\n   push(16);\n   push(3);\n   push(26);\n   push(19);\n   push(21);\n\n   pop();\n   pop();\n   pop();\n   pop();\n   pop();\n   pop();\n\n   return 0;\n}\n</pre>\n\n결과 값은 아래와 같습니다. (20과 16은 각기 들어갔을 때 당시에 최소값이었습니다.)<img class=\"size-full wp-image-473 aligncenter\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/03/스크린샷-2016-03-26-오후-7.23.52.png\" alt=\"스크린샷 2016-03-26 오후 7.23.52\" width=\"520\" height=\"176\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/03/스크린샷-2016-03-26-오후-7.23.52.png 520w, http://rabbylab.xyz/blog/wp-content/uploads/2016/03/스크린샷-2016-03-26-오후-7.23.52-300x102.png 300w\" sizes=\"(max-width: 520px) 100vw, 520px\" />\n\n&nbsp;\n\n[Practice 1] &#8220;min연산을 갖춘 stack을 구현하라!&#8221; 끝.\n\n질문 혹은 문제 제기 환영합니다. 댓글 남겨주세요. ^^","source":"_posts/practice-1.md","raw":"---\nid: 472\ntitle: '[Practice] min연산을 갖춘 stack을 구현하라!'\ndate: 2016-03-26T19:29:50+00:00\nauthor: rabby\nlayout: post\nguid: http://rabbylab.xyz/?p=472\npermalink: /practice-1/\ncategories:\n  - cs basic\n  - study\ntags:\n  - coin\n  - csbasic\n  - practice\n  - stack\n---\n###### <span style=\"color: #999999;\">Practice 시리즈를 연재합니다. 지난 3월 3일부터 COIN(코딩인터뷰 준비하는 모임)이라는 이름으로 함께 취업스터디를 진행하고 있는 5명의 친구들과 함께 교재 <코딩인터뷰 완전분석> 이라는 책을 가지고 공부를 시작했습니다. Practice 시리즈는 이 과정에서 함께 고민하며 풀었던 문제에 대해 이야기하는 시리즈입니다.</span>\n\n* * *\n\n###### \n\n**코딩인터뷰 완전분석 &#8211; 연습문제 3.2**\n\n**&#8220;push와 pop의 두 가지 연산뿐 아니라, 최솟값을 갖는 원소를 반환하는 min연산을 갖춘 stack은 어떻게 구현할 수 있겠는가? push, pop, 그리고 min은 공히 O(1) 시간에 처리되어야 한다.&#8221;**\n\n이 문제의 포인트는 &#8216;min연산&#8217;, &#8216;O(1)&#8217;에 있습니다. min연산은 어떻게 검색을 통해 해낸다고 해도 O(1) 시간에 처리해야하는 문제로 인해 반복문을 사용할 수가 없게되죠. 결국 min연산부터 다시 생각해야합니다. 이 문제를 해결하는 아이디어를 낸 친구가 이렇게 말했습니다. &#8216;그냥 stack을 하나 더 만들면 안돼?&#8217;라고 말입니다. 이때부터 함께 이것저것 아이디어를 덧붙여가며 이야기를 나눠보니 &#8216;옳다쿠나&#8217; 정답이었습니다.\n\n구현은 그리 어렵지 않습니다. 차근차근 해보겠습니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n\nint main_stack[10];\nint min_chaser[10];\nint main_top = 0, chaser_top = 0;\nint cur_min;\n\n</pre>\n\n우선 배열을 두개를 선언해줍니다. 하나는 기본 스택을 위한 배열, 다른 하나는 최소값을 추적하는 배열입니다. 그리고 각 스택별로 가장 마지막에 들어온 숫자를 체크하는 top 변수를 스택마다 하나씩 선언하고 0으로 초기화시킵니다. 마지막으로 현재의 최소값을 기억하고 있는 변수를 하나 선언합니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">//chaser_push function\nvoid chaser_push(num) {\n   if(chaser_top &gt;= 10) {\n      printf(\"Stack is overflow!\\n\");\n   } else {\n      min_chaser[chaser_top] = num;\n      chaser_top++;\n   }\n}\n\n//chaser_pop function\nvoid chaser_pop() {\n   chaser_top--;\n   printf(\"I am number %d. I was a min number!\\n\", min_chaser[chaser_top]);\n   min_chaser[chaser_top] = 0;\n   cur_min = min_chaser[chaser_top - 1];\n}\n</pre>\n\n다음은 함수를 만들어줄 차례입니다. 우선 chaser와 관련된 함수를 먼저 만들겠습니다. 왜냐하면 뒤이어 나오는 기본 스택 함수들이 이 함수들을 사용해야하기 때문입니다. chaser\\_push는 인자로 num값을 받습니다. 만약에 chaser\\_top값이 스택의 범주(10)를 넘어선다면 이는 오버플로우가 발생한 것이라고 경고하는 메세지를 출력합니다. 만약 오버플로우가 아니라면 chaser에 인자로 받은 값을 넣습니다. 그리고 chaser_top 값을 증가시켜줍니다. 기본적인 push구현 방식입니다.\n  \n이어사 등장하는 chaser\\_pop도 일반적인 pop과 같습니다. 우선 chaser\\_top을 감소시켜줍니다. 그리고 min\\_chaser에서 가장 위에 있는 값을 꺼내줍니다. 출력문을 통해 최소값이었다는 것을 밝힙니다. 원래 최소값이 들어있던 자리를 비워주고 cur\\_min값을 바꿔줍니다.\n\n_<span style=\"color: #999999;\">*저는 이 부분에서 chaser가 제일 작은 놈을 가두는 경찰소라는 추상적인 관념을 가지고 작업했습니다. 각 숫자들에 인격을 부여하고 함수 역시 어떤 역할을 감당하는 객체(?)라는 느낌을 가지고 작업하다보니 &#8220;I am number 5. I was a min number!&#8221; 같은 메세지가 나왔습니다.</span>_\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">//main_stack push function\nvoid push(int num) {\n   if(main_top &gt;= 10) {\n      printf(\"Stack is overflow.\\n\");\n   } else if (main_top == 0) {\n      main_stack[main_top] = num;\n      cur_num = num;\n      chaser_push(cur_num);\n      main_top++;\n  } else {\n      main_stack[main_top] = num;\n      main_top++;\n      if(num &lt; cur_num) {\n          cur_num = num;\n          chaser_push(cur_num);\n      }\n   }  \n}\n\n//main_stack pop function\nvoid pop() {\n   if(main_top == 0) {\n      printf(\"Stack is empty.\\n\");\n   } else {\n      main_top--;\n      \n      if(main_stack[main_top] == cur_num) {\n         chaser_pop();\n      } else {\n          printf(\"I am number %d.\\n\", main_stack[main_top]);\n      }\n        main_stack[main_top] = 0;\n   }\n}\n</pre>\n\n기본적인 push&pop 함수를 크게 벗어나지 않습니다. 특이점만 살펴보겠습니다. 우선 main\\_stack에 처음으로 push를 하는 경우가 나옵니다. main\\_top가 0인 경우죠. 이 경우에는 홀로 존재하기 때문에 곧장 최소값이 됩니다. 때문에 cur\\_num에 num을 넣어주고 chaser에도 push를 합니다. 그리고 top을 증가시키구요. 그 이후로는 cur\\_num값과 비교해서 더 작은 경우에만 chaser\\_push를 호출합니다. pop을 살펴보면 비어있는 경우를 메세지로 알려줍니다. 그렇지 않은 경우 중에서 빼내려고 하는 값과 cur\\_num가 같을 경우, main\\_stack의 pop이 아니라 chaser\\_pop으로 넘어갑니다. 거기서 &#8220;I was a min number!&#8221;라는 메세지를 출력한 뒤에 다시 돌아와 빠진 자리를 비워줍니다. 일반적인 경우에는 main_stack에서 메세지를 출력하고 함수가 끝납니다.\n\n이제 테스트해보겠습니다.\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">int main() {\n\n   push(20);\n   push(16);\n   push(3);\n   push(26);\n   push(19);\n   push(21);\n\n   pop();\n   pop();\n   pop();\n   pop();\n   pop();\n   pop();\n\n   return 0;\n}\n</pre>\n\n결과 값은 아래와 같습니다. (20과 16은 각기 들어갔을 때 당시에 최소값이었습니다.)<img class=\"size-full wp-image-473 aligncenter\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/03/스크린샷-2016-03-26-오후-7.23.52.png\" alt=\"스크린샷 2016-03-26 오후 7.23.52\" width=\"520\" height=\"176\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/03/스크린샷-2016-03-26-오후-7.23.52.png 520w, http://rabbylab.xyz/blog/wp-content/uploads/2016/03/스크린샷-2016-03-26-오후-7.23.52-300x102.png 300w\" sizes=\"(max-width: 520px) 100vw, 520px\" />\n\n&nbsp;\n\n[Practice 1] &#8220;min연산을 갖춘 stack을 구현하라!&#8221; 끝.\n\n질문 혹은 문제 제기 환영합니다. 댓글 남겨주세요. ^^","slug":"/practice-1/","published":1,"updated":"2017-02-01T15:14:08.000Z","comments":1,"photos":[],"link":"","_id":"cizqle7rc000xhyvgmk4llj7w","content":"<h6 id=\"Practice-시리즈를-연재합니다-지난-3월-3일부터-COIN-코딩인터뷰-준비하는-모임-이라는-이름으로-함께-취업스터디를-진행하고-있는-5명의-친구들과-함께-교재-lt-코딩인터뷰-완전분석-gt-이라는-책을-가지고-공부를-시작했습니다-Practice-시리즈는-이-과정에서-함께-고민하며-풀었던-문제에-대해-이야기하는-시리즈입니다\"><a href=\"#Practice-시리즈를-연재합니다-지난-3월-3일부터-COIN-코딩인터뷰-준비하는-모임-이라는-이름으로-함께-취업스터디를-진행하고-있는-5명의-친구들과-함께-교재-lt-코딩인터뷰-완전분석-gt-이라는-책을-가지고-공부를-시작했습니다-Practice-시리즈는-이-과정에서-함께-고민하며-풀었던-문제에-대해-이야기하는-시리즈입니다\" class=\"headerlink\" title=\"Practice 시리즈를 연재합니다. 지난 3월 3일부터 COIN(코딩인터뷰 준비하는 모임)이라는 이름으로 함께 취업스터디를 진행하고 있는 5명의 친구들과 함께 교재 &lt;코딩인터뷰 완전분석&gt; 이라는 책을 가지고 공부를 시작했습니다. Practice 시리즈는 이 과정에서 함께 고민하며 풀었던 문제에 대해 이야기하는 시리즈입니다.\"></a><span style=\"color: #999999;\">Practice 시리즈를 연재합니다. 지난 3월 3일부터 COIN(코딩인터뷰 준비하는 모임)이라는 이름으로 함께 취업스터디를 진행하고 있는 5명의 친구들과 함께 교재 &lt;코딩인터뷰 완전분석&gt; 이라는 책을 가지고 공부를 시작했습니다. Practice 시리즈는 이 과정에서 함께 고민하며 풀었던 문제에 대해 이야기하는 시리즈입니다.</span></h6><hr>\n<p>###### </p>\n<p><strong>코딩인터뷰 완전분석 &#8211; 연습문제 3.2</strong></p>\n<p><strong>&#8220;push와 pop의 두 가지 연산뿐 아니라, 최솟값을 갖는 원소를 반환하는 min연산을 갖춘 stack은 어떻게 구현할 수 있겠는가? push, pop, 그리고 min은 공히 O(1) 시간에 처리되어야 한다.&#8221;</strong></p>\n<p>이 문제의 포인트는 &#8216;min연산&#8217;, &#8216;O(1)&#8217;에 있습니다. min연산은 어떻게 검색을 통해 해낸다고 해도 O(1) 시간에 처리해야하는 문제로 인해 반복문을 사용할 수가 없게되죠. 결국 min연산부터 다시 생각해야합니다. 이 문제를 해결하는 아이디어를 낸 친구가 이렇게 말했습니다. &#8216;그냥 stack을 하나 더 만들면 안돼?&#8217;라고 말입니다. 이때부터 함께 이것저것 아이디어를 덧붙여가며 이야기를 나눠보니 &#8216;옳다쿠나&#8217; 정답이었습니다.</p>\n<p>구현은 그리 어렵지 않습니다. 차근차근 해보겠습니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n\nint main_stack[10];\nint min_chaser[10];\nint main_top = 0, chaser_top = 0;\nint cur_min;\n\n</pre>\n\n<p>우선 배열을 두개를 선언해줍니다. 하나는 기본 스택을 위한 배열, 다른 하나는 최소값을 추적하는 배열입니다. 그리고 각 스택별로 가장 마지막에 들어온 숫자를 체크하는 top 변수를 스택마다 하나씩 선언하고 0으로 초기화시킵니다. 마지막으로 현재의 최소값을 기억하고 있는 변수를 하나 선언합니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">//chaser_push function\nvoid chaser_push(num) {\n   if(chaser_top &gt;= 10) {\n      printf(\"Stack is overflow!\\n\");\n   } else {\n      min_chaser[chaser_top] = num;\n      chaser_top++;\n   }\n}\n\n//chaser_pop function\nvoid chaser_pop() {\n   chaser_top--;\n   printf(\"I am number %d. I was a min number!\\n\", min_chaser[chaser_top]);\n   min_chaser[chaser_top] = 0;\n   cur_min = min_chaser[chaser_top - 1];\n}\n</pre>\n\n<p>다음은 함수를 만들어줄 차례입니다. 우선 chaser와 관련된 함수를 먼저 만들겠습니다. 왜냐하면 뒤이어 나오는 기본 스택 함수들이 이 함수들을 사용해야하기 때문입니다. chaser_push는 인자로 num값을 받습니다. 만약에 chaser_top값이 스택의 범주(10)를 넘어선다면 이는 오버플로우가 발생한 것이라고 경고하는 메세지를 출력합니다. 만약 오버플로우가 아니라면 chaser에 인자로 받은 값을 넣습니다. 그리고 chaser_top 값을 증가시켜줍니다. 기본적인 push구현 방식입니다.</p>\n<p>이어사 등장하는 chaser_pop도 일반적인 pop과 같습니다. 우선 chaser_top을 감소시켜줍니다. 그리고 min_chaser에서 가장 위에 있는 값을 꺼내줍니다. 출력문을 통해 최소값이었다는 것을 밝힙니다. 원래 최소값이 들어있던 자리를 비워주고 cur_min값을 바꿔줍니다.</p>\n<p><em><span style=\"color: #999999;\">*저는 이 부분에서 chaser가 제일 작은 놈을 가두는 경찰소라는 추상적인 관념을 가지고 작업했습니다. 각 숫자들에 인격을 부여하고 함수 역시 어떤 역할을 감당하는 객체(?)라는 느낌을 가지고 작업하다보니 &#8220;I am number 5. I was a min number!&#8221; 같은 메세지가 나왔습니다.</span></em></p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">//main_stack push function\nvoid push(int num) {\n   if(main_top &gt;= 10) {\n      printf(\"Stack is overflow.\\n\");\n   } else if (main_top == 0) {\n      main_stack[main_top] = num;\n      cur_num = num;\n      chaser_push(cur_num);\n      main_top++;\n  } else {\n      main_stack[main_top] = num;\n      main_top++;\n      if(num &lt; cur_num) {\n          cur_num = num;\n          chaser_push(cur_num);\n      }\n   }  \n}\n\n//main_stack pop function\nvoid pop() {\n   if(main_top == 0) {\n      printf(\"Stack is empty.\\n\");\n   } else {\n      main_top--;\n\n      if(main_stack[main_top] == cur_num) {\n         chaser_pop();\n      } else {\n          printf(\"I am number %d.\\n\", main_stack[main_top]);\n      }\n        main_stack[main_top] = 0;\n   }\n}\n</pre>\n\n<p>기본적인 push&amp;pop 함수를 크게 벗어나지 않습니다. 특이점만 살펴보겠습니다. 우선 main_stack에 처음으로 push를 하는 경우가 나옵니다. main_top가 0인 경우죠. 이 경우에는 홀로 존재하기 때문에 곧장 최소값이 됩니다. 때문에 cur_num에 num을 넣어주고 chaser에도 push를 합니다. 그리고 top을 증가시키구요. 그 이후로는 cur_num값과 비교해서 더 작은 경우에만 chaser_push를 호출합니다. pop을 살펴보면 비어있는 경우를 메세지로 알려줍니다. 그렇지 않은 경우 중에서 빼내려고 하는 값과 cur_num가 같을 경우, main_stack의 pop이 아니라 chaser_pop으로 넘어갑니다. 거기서 &#8220;I was a min number!&#8221;라는 메세지를 출력한 뒤에 다시 돌아와 빠진 자리를 비워줍니다. 일반적인 경우에는 main_stack에서 메세지를 출력하고 함수가 끝납니다.</p>\n<p>이제 테스트해보겠습니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">int main() {\n\n   push(20);\n   push(16);\n   push(3);\n   push(26);\n   push(19);\n   push(21);\n\n   pop();\n   pop();\n   pop();\n   pop();\n   pop();\n   pop();\n\n   return 0;\n}\n</pre>\n\n<p>결과 값은 아래와 같습니다. (20과 16은 각기 들어갔을 때 당시에 최소값이었습니다.)<img class=\"size-full wp-image-473 aligncenter\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/03/스크린샷-2016-03-26-오후-7.23.52.png\" alt=\"스크린샷 2016-03-26 오후 7.23.52\" width=\"520\" height=\"176\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/03/스크린샷-2016-03-26-오후-7.23.52.png 520w, http://rabbylab.xyz/blog/wp-content/uploads/2016/03/스크린샷-2016-03-26-오후-7.23.52-300x102.png 300w\" sizes=\"(max-width: 520px) 100vw, 520px\"></p>\n<p>&nbsp;</p>\n<p>[Practice 1] &#8220;min연산을 갖춘 stack을 구현하라!&#8221; 끝.</p>\n<p>질문 혹은 문제 제기 환영합니다. 댓글 남겨주세요. ^^</p>\n","excerpt":"","more":"<h6 id=\"Practice-시리즈를-연재합니다-지난-3월-3일부터-COIN-코딩인터뷰-준비하는-모임-이라는-이름으로-함께-취업스터디를-진행하고-있는-5명의-친구들과-함께-교재-lt-코딩인터뷰-완전분석-gt-이라는-책을-가지고-공부를-시작했습니다-Practice-시리즈는-이-과정에서-함께-고민하며-풀었던-문제에-대해-이야기하는-시리즈입니다\"><a href=\"#Practice-시리즈를-연재합니다-지난-3월-3일부터-COIN-코딩인터뷰-준비하는-모임-이라는-이름으로-함께-취업스터디를-진행하고-있는-5명의-친구들과-함께-교재-lt-코딩인터뷰-완전분석-gt-이라는-책을-가지고-공부를-시작했습니다-Practice-시리즈는-이-과정에서-함께-고민하며-풀었던-문제에-대해-이야기하는-시리즈입니다\" class=\"headerlink\" title=\"Practice 시리즈를 연재합니다. 지난 3월 3일부터 COIN(코딩인터뷰 준비하는 모임)이라는 이름으로 함께 취업스터디를 진행하고 있는 5명의 친구들과 함께 교재 &lt;코딩인터뷰 완전분석&gt; 이라는 책을 가지고 공부를 시작했습니다. Practice 시리즈는 이 과정에서 함께 고민하며 풀었던 문제에 대해 이야기하는 시리즈입니다.\"></a><span style=\"color: #999999;\">Practice 시리즈를 연재합니다. 지난 3월 3일부터 COIN(코딩인터뷰 준비하는 모임)이라는 이름으로 함께 취업스터디를 진행하고 있는 5명의 친구들과 함께 교재 &lt;코딩인터뷰 완전분석&gt; 이라는 책을 가지고 공부를 시작했습니다. Practice 시리즈는 이 과정에서 함께 고민하며 풀었던 문제에 대해 이야기하는 시리즈입니다.</span></h6><hr>\n<p>###### </p>\n<p><strong>코딩인터뷰 완전분석 &#8211; 연습문제 3.2</strong></p>\n<p><strong>&#8220;push와 pop의 두 가지 연산뿐 아니라, 최솟값을 갖는 원소를 반환하는 min연산을 갖춘 stack은 어떻게 구현할 수 있겠는가? push, pop, 그리고 min은 공히 O(1) 시간에 처리되어야 한다.&#8221;</strong></p>\n<p>이 문제의 포인트는 &#8216;min연산&#8217;, &#8216;O(1)&#8217;에 있습니다. min연산은 어떻게 검색을 통해 해낸다고 해도 O(1) 시간에 처리해야하는 문제로 인해 반복문을 사용할 수가 없게되죠. 결국 min연산부터 다시 생각해야합니다. 이 문제를 해결하는 아이디어를 낸 친구가 이렇게 말했습니다. &#8216;그냥 stack을 하나 더 만들면 안돼?&#8217;라고 말입니다. 이때부터 함께 이것저것 아이디어를 덧붙여가며 이야기를 나눠보니 &#8216;옳다쿠나&#8217; 정답이었습니다.</p>\n<p>구현은 그리 어렵지 않습니다. 차근차근 해보겠습니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">#include &lt;stdio.h&gt;\n\nint main_stack[10];\nint min_chaser[10];\nint main_top = 0, chaser_top = 0;\nint cur_min;\n\n</pre>\n\n<p>우선 배열을 두개를 선언해줍니다. 하나는 기본 스택을 위한 배열, 다른 하나는 최소값을 추적하는 배열입니다. 그리고 각 스택별로 가장 마지막에 들어온 숫자를 체크하는 top 변수를 스택마다 하나씩 선언하고 0으로 초기화시킵니다. 마지막으로 현재의 최소값을 기억하고 있는 변수를 하나 선언합니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">//chaser_push function\nvoid chaser_push(num) {\n   if(chaser_top &gt;= 10) {\n      printf(\"Stack is overflow!\\n\");\n   } else {\n      min_chaser[chaser_top] = num;\n      chaser_top++;\n   }\n}\n\n//chaser_pop function\nvoid chaser_pop() {\n   chaser_top--;\n   printf(\"I am number %d. I was a min number!\\n\", min_chaser[chaser_top]);\n   min_chaser[chaser_top] = 0;\n   cur_min = min_chaser[chaser_top - 1];\n}\n</pre>\n\n<p>다음은 함수를 만들어줄 차례입니다. 우선 chaser와 관련된 함수를 먼저 만들겠습니다. 왜냐하면 뒤이어 나오는 기본 스택 함수들이 이 함수들을 사용해야하기 때문입니다. chaser_push는 인자로 num값을 받습니다. 만약에 chaser_top값이 스택의 범주(10)를 넘어선다면 이는 오버플로우가 발생한 것이라고 경고하는 메세지를 출력합니다. 만약 오버플로우가 아니라면 chaser에 인자로 받은 값을 넣습니다. 그리고 chaser_top 값을 증가시켜줍니다. 기본적인 push구현 방식입니다.</p>\n<p>이어사 등장하는 chaser_pop도 일반적인 pop과 같습니다. 우선 chaser_top을 감소시켜줍니다. 그리고 min_chaser에서 가장 위에 있는 값을 꺼내줍니다. 출력문을 통해 최소값이었다는 것을 밝힙니다. 원래 최소값이 들어있던 자리를 비워주고 cur_min값을 바꿔줍니다.</p>\n<p><em><span style=\"color: #999999;\">*저는 이 부분에서 chaser가 제일 작은 놈을 가두는 경찰소라는 추상적인 관념을 가지고 작업했습니다. 각 숫자들에 인격을 부여하고 함수 역시 어떤 역할을 감당하는 객체(?)라는 느낌을 가지고 작업하다보니 &#8220;I am number 5. I was a min number!&#8221; 같은 메세지가 나왔습니다.</span></em></p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">//main_stack push function\nvoid push(int num) {\n   if(main_top &gt;= 10) {\n      printf(\"Stack is overflow.\\n\");\n   } else if (main_top == 0) {\n      main_stack[main_top] = num;\n      cur_num = num;\n      chaser_push(cur_num);\n      main_top++;\n  } else {\n      main_stack[main_top] = num;\n      main_top++;\n      if(num &lt; cur_num) {\n          cur_num = num;\n          chaser_push(cur_num);\n      }\n   }  \n}\n\n//main_stack pop function\nvoid pop() {\n   if(main_top == 0) {\n      printf(\"Stack is empty.\\n\");\n   } else {\n      main_top--;\n\n      if(main_stack[main_top] == cur_num) {\n         chaser_pop();\n      } else {\n          printf(\"I am number %d.\\n\", main_stack[main_top]);\n      }\n        main_stack[main_top] = 0;\n   }\n}\n</pre>\n\n<p>기본적인 push&amp;pop 함수를 크게 벗어나지 않습니다. 특이점만 살펴보겠습니다. 우선 main_stack에 처음으로 push를 하는 경우가 나옵니다. main_top가 0인 경우죠. 이 경우에는 홀로 존재하기 때문에 곧장 최소값이 됩니다. 때문에 cur_num에 num을 넣어주고 chaser에도 push를 합니다. 그리고 top을 증가시키구요. 그 이후로는 cur_num값과 비교해서 더 작은 경우에만 chaser_push를 호출합니다. pop을 살펴보면 비어있는 경우를 메세지로 알려줍니다. 그렇지 않은 경우 중에서 빼내려고 하는 값과 cur_num가 같을 경우, main_stack의 pop이 아니라 chaser_pop으로 넘어갑니다. 거기서 &#8220;I was a min number!&#8221;라는 메세지를 출력한 뒤에 다시 돌아와 빠진 자리를 비워줍니다. 일반적인 경우에는 main_stack에서 메세지를 출력하고 함수가 끝납니다.</p>\n<p>이제 테스트해보겠습니다.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">int main() {\n\n   push(20);\n   push(16);\n   push(3);\n   push(26);\n   push(19);\n   push(21);\n\n   pop();\n   pop();\n   pop();\n   pop();\n   pop();\n   pop();\n\n   return 0;\n}\n</pre>\n\n<p>결과 값은 아래와 같습니다. (20과 16은 각기 들어갔을 때 당시에 최소값이었습니다.)<img class=\"size-full wp-image-473 aligncenter\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/03/스크린샷-2016-03-26-오후-7.23.52.png\" alt=\"스크린샷 2016-03-26 오후 7.23.52\" width=\"520\" height=\"176\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2016/03/스크린샷-2016-03-26-오후-7.23.52.png 520w, http://rabbylab.xyz/blog/wp-content/uploads/2016/03/스크린샷-2016-03-26-오후-7.23.52-300x102.png 300w\" sizes=\"(max-width: 520px) 100vw, 520px\" /></p>\n<p>&nbsp;</p>\n<p>[Practice 1] &#8220;min연산을 갖춘 stack을 구현하라!&#8221; 끝.</p>\n<p>질문 혹은 문제 제기 환영합니다. 댓글 남겨주세요. ^^</p>\n"},{"id":"15","title":"자바스크립트를 선택한 이유","date":"2015-07-17T12:10:11.000Z","author":"rabby","layout":"post","guid":"https://rabbylab.wordpress.com/?p=15","geo_public":[0],"_content":"<p style=\"text-align:left;\">\n  세상에는 수 많은 프로그래밍 언어가 존재하고 그 언어들은 제 각기 배움의 가치가 있습니다. 때문에 제 각기 배움의 이유가 존재합니다. 다수의 프로그래밍 언어 서적들은 &#8216;왜 많은 언어 중에 이 언어를 배워야하는가?&#8217; 하는 질문을 답하며 책을 시작합니다. 그렇다면 저는 왜 자바스크립트를 선택했을까요?\n</p>\n\n<h4 style=\"text-align:left;\">\n  <strong>프로그래밍 경험</strong>\n</h4>\n\n<p style=\"text-align:left;\">\n  대다수의 컴퓨터공학 전공자들이 그러하듯 저 역시 C언어로 프로그래밍에 입문했습니다. &#8216;hello world&#8217;를 출력하고 기본적인 연산 프로그램을 만들며 별거 아닌데? 라는 생각이 들때쯤 배열과 포인터의 늪을 허덕였습니다. 이후 다양한 응용 과제와 씨름하며 밤새워 한번 앉아서 8시간씩 코딩을 하면서도 문제를 해결했을 때의 그 쾌감 때문에 프로그래밍에 빠져들게 되었습니다. 이어서 자바, C++등을 배웠습니다. 이후 배운 것을 근간으로 프로젝트를 수행하기도 했습니다. 자바를 이용한 안드로이드 앱 개발이 대표적이죠. 제가 배운 언어를 사용할 일이 있을 때 그 언어는 빛을 발하고 정말 재밌다는 것을 느낄 수 있었습니다.\n</p>\n\n<p style=\"text-align:left;\">\n  아쉬운 것은 스마트 디바이스의 출현으로 실질적으로 와닿는 프로그램을 만들기 위해서는 C나 자바가 다소 어렵게 느껴지는 경우가 많다는 것이었습니다. 물론 오랜 시간을 투자해서 네이티브 앱을 만들어내려고 한다면 자바는 충분히 가치가 있습니다. 허나 학회활동이나 수업에서 사용되고 만들어야 하는 수준의 프로그램은 실제 배포판이 아닌 어느정도 구색을 갖춘 프로토 타입 수준의 어플리케이션이면 되는 것이었습니다. 조금 간편하게 만들고 운영체제에 무관하게 사용해볼 수 있는 프로그램이 필요했던 것입니다.\n</p>\n\n<p style=\"text-align:left;\">\n  웹앱(web app)이 이에 적합한 형태의 프로그램이었습니다. 방학 중 Do it! 시리즈 중 한권인 &#8216;<a href=\"http://www.easyspub.co.kr/20_Menu/BookView/B001/90\" target=\"_blank\">쉽게 배우는 웹앱&하이브리드앱</a>&#8216;을 잡고 공부를 했습니다. <a href=\"https://opentutorials.org/course/668\" target=\"_blank\">생활코딩 &#8211; 클라이언트</a> 강의와 함께 HTML, CSS, jQuery의 기초를 공부하면서 웹앱의 기초를 익혔습니다. 허나 책을 다봤는데도 실제 어플리케이션을 만들 수준이 되지 않음을 깨달았습니다. 이에 <a href=\"https://opentutorials.org/course/1688\" target=\"_blank\">생활코딩 &#8211; 웹 애플리케이션 만들기</a> 강의를 보며 php, mysql, javascript 에 대해 배웠습니다. 이를 배우는 과정에서 간단하게 만들어 본 1차 결과물이 <a href=\"https://github.com/joeunha/taleline\" target=\"_blank\">taleline</a> 입니다. 지금은 정말 아무것도 아닌 상태로 남아있는 이 웹앱을 제대로 만들어보고 싶은 마음이 생긴 것이 발단이었습니다.\n</p>\n\n<p style=\"text-align:left;\">\n  어떻게하면 이 앱을 제대로 만들어 볼 수 있을까 하는 고민을 하기 시작했습니다. 현재 제가 처한 여러가지 상황을 놓고 고민했을때 저에게는 두가지 선택지가 있음을 깨달았습니다. 첫째, 지금처럼 얇고 넓게 조금씩 배우며 혼자 개발한다. 둘째, 한가지 언어를 깊게 파서 내공을 쌓은 뒤 누군가와 협력해서 개발한다. 주위의 선배들과 커뮤니티의 선배님들의 조언을 살펴 저는 한가지 언어를 깊게 파는 것을 선택했습니다.\n</p>\n\n<h4 style=\"text-align:left;\">\n  <strong>왜 자바스크립트를 선택했나? </strong>\n</h4>\n\n<p style=\"text-align:left;\">\n  사실 딱히 어떤 이유로 자바스크립트를 배워야겠다고 생각한 것은 아닙니다. 매력에 이끌렸다고 할까요? 특히 자바스크립트가 가지는 자유로움에 끌렸습니다. 운영체제를 가리지 않는 자유로움, 변수 타입에 제한을 두지 않는 자유로움, 또 웹이 확장되어가고 탈웹의 흐름에 따라 더 많은 곳에서 사용될 가능성이 저를 매료시켰습니다. 생활코딩 강의를 들으면서도 jQuery 같은 강력한 라이브러리가 자바스크립트에 기반을 두고 있다는 사실이 이 언어를 매력적으로 보이게 만들었습니다.\n</p>\n\n<p style=\"text-align:left;\">\n  앞선 자바스크립트의 매력 요소가 분명 이 언어를 선택함에 어느정도 영향을 준 것이 분명합니다. 하지만 자바스크립트가 저에게 필요하지 않았더라면 아무리 매력적이라고 해도 이 언어를 선택하지 않았을 것입니다. 그 필요는 연습삼아 만들어본 taleline 이라는 앱을 완성시키고 싶은 마음에서 출발합니다. 이 앱을 완성하기 위해 C나 자바를 배우는 것은 무의미합니다. 필요한 서비스를 구현하기 위해 필요한 언어를 배우기로 한 것이죠. 또한 지대한 영향을 끼쳤던 것은 제가 사용하는 스마트워치 &#8216;Pebble Time&#8217;의 개발 언어가 자바스크립트를 기반으로 한 <a href=\"http://developer.getpebble.com/getting-started/pebble-js-tutorial/part1/\" target=\"_blank\">pepple.js</a>(originally <a href=\"http://simplyjs.io/\" target=\"_blank\">simply.js</a>)였기 때문입니다. 가까이 두고 사용하고 있는 기기인만큼 새로운 앱에 대한 아이디어가 종종 떠올랐는데 이를 직접 만들어보고 싶었기 때문입니다.\n</p>\n\n<h4 style=\"text-align:left;\">\n  <strong>필요해서 배운다!<br /> </strong>\n</h4>\n\n<p style=\"text-align:left;\">\n  결국 필요에 의해 자바스크립트를 선택했다라고 말할 수 있겠습니다. 결론은 너무 당연한 것을 이야기하는 것 같습니다. 결국 모든 언어를 배우는 이유는 해당 언어가 자신이 만들고자 하는 서비스에 꼭 필요한 기능을 가졌거나 그 언어로 작업했을 때 발생하는 효용이 있기 때문이라는 겁니다.\n</p>","source":"_posts/javascript-intro-1.md","raw":"---\nid: 15\ntitle: 자바스크립트를 선택한 이유\ndate: 2015-07-17T21:10:11+00:00\nauthor: rabby\nlayout: post\nguid: https://rabbylab.wordpress.com/?p=15\npermalink: /javascript_intro_1/\ngeo_public:\n  - 0\ncategories:\n  - javascript\n  - study\n---\n<p style=\"text-align:left;\">\n  세상에는 수 많은 프로그래밍 언어가 존재하고 그 언어들은 제 각기 배움의 가치가 있습니다. 때문에 제 각기 배움의 이유가 존재합니다. 다수의 프로그래밍 언어 서적들은 &#8216;왜 많은 언어 중에 이 언어를 배워야하는가?&#8217; 하는 질문을 답하며 책을 시작합니다. 그렇다면 저는 왜 자바스크립트를 선택했을까요?\n</p>\n\n<h4 style=\"text-align:left;\">\n  <strong>프로그래밍 경험</strong>\n</h4>\n\n<p style=\"text-align:left;\">\n  대다수의 컴퓨터공학 전공자들이 그러하듯 저 역시 C언어로 프로그래밍에 입문했습니다. &#8216;hello world&#8217;를 출력하고 기본적인 연산 프로그램을 만들며 별거 아닌데? 라는 생각이 들때쯤 배열과 포인터의 늪을 허덕였습니다. 이후 다양한 응용 과제와 씨름하며 밤새워 한번 앉아서 8시간씩 코딩을 하면서도 문제를 해결했을 때의 그 쾌감 때문에 프로그래밍에 빠져들게 되었습니다. 이어서 자바, C++등을 배웠습니다. 이후 배운 것을 근간으로 프로젝트를 수행하기도 했습니다. 자바를 이용한 안드로이드 앱 개발이 대표적이죠. 제가 배운 언어를 사용할 일이 있을 때 그 언어는 빛을 발하고 정말 재밌다는 것을 느낄 수 있었습니다.\n</p>\n\n<p style=\"text-align:left;\">\n  아쉬운 것은 스마트 디바이스의 출현으로 실질적으로 와닿는 프로그램을 만들기 위해서는 C나 자바가 다소 어렵게 느껴지는 경우가 많다는 것이었습니다. 물론 오랜 시간을 투자해서 네이티브 앱을 만들어내려고 한다면 자바는 충분히 가치가 있습니다. 허나 학회활동이나 수업에서 사용되고 만들어야 하는 수준의 프로그램은 실제 배포판이 아닌 어느정도 구색을 갖춘 프로토 타입 수준의 어플리케이션이면 되는 것이었습니다. 조금 간편하게 만들고 운영체제에 무관하게 사용해볼 수 있는 프로그램이 필요했던 것입니다.\n</p>\n\n<p style=\"text-align:left;\">\n  웹앱(web app)이 이에 적합한 형태의 프로그램이었습니다. 방학 중 Do it! 시리즈 중 한권인 &#8216;<a href=\"http://www.easyspub.co.kr/20_Menu/BookView/B001/90\" target=\"_blank\">쉽게 배우는 웹앱&하이브리드앱</a>&#8216;을 잡고 공부를 했습니다. <a href=\"https://opentutorials.org/course/668\" target=\"_blank\">생활코딩 &#8211; 클라이언트</a> 강의와 함께 HTML, CSS, jQuery의 기초를 공부하면서 웹앱의 기초를 익혔습니다. 허나 책을 다봤는데도 실제 어플리케이션을 만들 수준이 되지 않음을 깨달았습니다. 이에 <a href=\"https://opentutorials.org/course/1688\" target=\"_blank\">생활코딩 &#8211; 웹 애플리케이션 만들기</a> 강의를 보며 php, mysql, javascript 에 대해 배웠습니다. 이를 배우는 과정에서 간단하게 만들어 본 1차 결과물이 <a href=\"https://github.com/joeunha/taleline\" target=\"_blank\">taleline</a> 입니다. 지금은 정말 아무것도 아닌 상태로 남아있는 이 웹앱을 제대로 만들어보고 싶은 마음이 생긴 것이 발단이었습니다.\n</p>\n\n<p style=\"text-align:left;\">\n  어떻게하면 이 앱을 제대로 만들어 볼 수 있을까 하는 고민을 하기 시작했습니다. 현재 제가 처한 여러가지 상황을 놓고 고민했을때 저에게는 두가지 선택지가 있음을 깨달았습니다. 첫째, 지금처럼 얇고 넓게 조금씩 배우며 혼자 개발한다. 둘째, 한가지 언어를 깊게 파서 내공을 쌓은 뒤 누군가와 협력해서 개발한다. 주위의 선배들과 커뮤니티의 선배님들의 조언을 살펴 저는 한가지 언어를 깊게 파는 것을 선택했습니다.\n</p>\n\n<h4 style=\"text-align:left;\">\n  <strong>왜 자바스크립트를 선택했나? </strong>\n</h4>\n\n<p style=\"text-align:left;\">\n  사실 딱히 어떤 이유로 자바스크립트를 배워야겠다고 생각한 것은 아닙니다. 매력에 이끌렸다고 할까요? 특히 자바스크립트가 가지는 자유로움에 끌렸습니다. 운영체제를 가리지 않는 자유로움, 변수 타입에 제한을 두지 않는 자유로움, 또 웹이 확장되어가고 탈웹의 흐름에 따라 더 많은 곳에서 사용될 가능성이 저를 매료시켰습니다. 생활코딩 강의를 들으면서도 jQuery 같은 강력한 라이브러리가 자바스크립트에 기반을 두고 있다는 사실이 이 언어를 매력적으로 보이게 만들었습니다.\n</p>\n\n<p style=\"text-align:left;\">\n  앞선 자바스크립트의 매력 요소가 분명 이 언어를 선택함에 어느정도 영향을 준 것이 분명합니다. 하지만 자바스크립트가 저에게 필요하지 않았더라면 아무리 매력적이라고 해도 이 언어를 선택하지 않았을 것입니다. 그 필요는 연습삼아 만들어본 taleline 이라는 앱을 완성시키고 싶은 마음에서 출발합니다. 이 앱을 완성하기 위해 C나 자바를 배우는 것은 무의미합니다. 필요한 서비스를 구현하기 위해 필요한 언어를 배우기로 한 것이죠. 또한 지대한 영향을 끼쳤던 것은 제가 사용하는 스마트워치 &#8216;Pebble Time&#8217;의 개발 언어가 자바스크립트를 기반으로 한 <a href=\"http://developer.getpebble.com/getting-started/pebble-js-tutorial/part1/\" target=\"_blank\">pepple.js</a>(originally <a href=\"http://simplyjs.io/\" target=\"_blank\">simply.js</a>)였기 때문입니다. 가까이 두고 사용하고 있는 기기인만큼 새로운 앱에 대한 아이디어가 종종 떠올랐는데 이를 직접 만들어보고 싶었기 때문입니다.\n</p>\n\n<h4 style=\"text-align:left;\">\n  <strong>필요해서 배운다!<br /> </strong>\n</h4>\n\n<p style=\"text-align:left;\">\n  결국 필요에 의해 자바스크립트를 선택했다라고 말할 수 있겠습니다. 결론은 너무 당연한 것을 이야기하는 것 같습니다. 결국 모든 언어를 배우는 이유는 해당 언어가 자신이 만들고자 하는 서비스에 꼭 필요한 기능을 가졌거나 그 언어로 작업했을 때 발생하는 효용이 있기 때문이라는 겁니다.\n</p>","slug":"/javascript_intro_1/","published":1,"updated":"2017-02-01T15:14:08.000Z","comments":1,"photos":[],"link":"","_id":"cizqle7rf0010hyvg3kicgtgd","content":"<p style=\"text-align:left;\"><br>  세상에는 수 많은 프로그래밍 언어가 존재하고 그 언어들은 제 각기 배움의 가치가 있습니다. 때문에 제 각기 배움의 이유가 존재합니다. 다수의 프로그래밍 언어 서적들은 &#8216;왜 많은 언어 중에 이 언어를 배워야하는가?&#8217; 하는 질문을 답하며 책을 시작합니다. 그렇다면 저는 왜 자바스크립트를 선택했을까요?<br></p>\n\n<h4 style=\"text-align:left;\"><br>  <strong>프로그래밍 경험</strong><br></h4>\n\n<p style=\"text-align:left;\"><br>  대다수의 컴퓨터공학 전공자들이 그러하듯 저 역시 C언어로 프로그래밍에 입문했습니다. &#8216;hello world&#8217;를 출력하고 기본적인 연산 프로그램을 만들며 별거 아닌데? 라는 생각이 들때쯤 배열과 포인터의 늪을 허덕였습니다. 이후 다양한 응용 과제와 씨름하며 밤새워 한번 앉아서 8시간씩 코딩을 하면서도 문제를 해결했을 때의 그 쾌감 때문에 프로그래밍에 빠져들게 되었습니다. 이어서 자바, C++등을 배웠습니다. 이후 배운 것을 근간으로 프로젝트를 수행하기도 했습니다. 자바를 이용한 안드로이드 앱 개발이 대표적이죠. 제가 배운 언어를 사용할 일이 있을 때 그 언어는 빛을 발하고 정말 재밌다는 것을 느낄 수 있었습니다.<br></p>\n\n<p style=\"text-align:left;\"><br>  아쉬운 것은 스마트 디바이스의 출현으로 실질적으로 와닿는 프로그램을 만들기 위해서는 C나 자바가 다소 어렵게 느껴지는 경우가 많다는 것이었습니다. 물론 오랜 시간을 투자해서 네이티브 앱을 만들어내려고 한다면 자바는 충분히 가치가 있습니다. 허나 학회활동이나 수업에서 사용되고 만들어야 하는 수준의 프로그램은 실제 배포판이 아닌 어느정도 구색을 갖춘 프로토 타입 수준의 어플리케이션이면 되는 것이었습니다. 조금 간편하게 만들고 운영체제에 무관하게 사용해볼 수 있는 프로그램이 필요했던 것입니다.<br></p>\n\n<p style=\"text-align:left;\"><br>  웹앱(web app)이 이에 적합한 형태의 프로그램이었습니다. 방학 중 Do it! 시리즈 중 한권인 &#8216;<a href=\"http://www.easyspub.co.kr/20_Menu/BookView/B001/90\" target=\"_blank\">쉽게 배우는 웹앱&amp;하이브리드앱</a>&#8216;을 잡고 공부를 했습니다. <a href=\"https://opentutorials.org/course/668\" target=\"_blank\">생활코딩 &#8211; 클라이언트</a> 강의와 함께 HTML, CSS, jQuery의 기초를 공부하면서 웹앱의 기초를 익혔습니다. 허나 책을 다봤는데도 실제 어플리케이션을 만들 수준이 되지 않음을 깨달았습니다. 이에 <a href=\"https://opentutorials.org/course/1688\" target=\"_blank\">생활코딩 &#8211; 웹 애플리케이션 만들기</a> 강의를 보며 php, mysql, javascript 에 대해 배웠습니다. 이를 배우는 과정에서 간단하게 만들어 본 1차 결과물이 <a href=\"https://github.com/joeunha/taleline\" target=\"_blank\">taleline</a> 입니다. 지금은 정말 아무것도 아닌 상태로 남아있는 이 웹앱을 제대로 만들어보고 싶은 마음이 생긴 것이 발단이었습니다.<br></p>\n\n<p style=\"text-align:left;\"><br>  어떻게하면 이 앱을 제대로 만들어 볼 수 있을까 하는 고민을 하기 시작했습니다. 현재 제가 처한 여러가지 상황을 놓고 고민했을때 저에게는 두가지 선택지가 있음을 깨달았습니다. 첫째, 지금처럼 얇고 넓게 조금씩 배우며 혼자 개발한다. 둘째, 한가지 언어를 깊게 파서 내공을 쌓은 뒤 누군가와 협력해서 개발한다. 주위의 선배들과 커뮤니티의 선배님들의 조언을 살펴 저는 한가지 언어를 깊게 파는 것을 선택했습니다.<br></p>\n\n<h4 style=\"text-align:left;\"><br>  <strong>왜 자바스크립트를 선택했나? </strong><br></h4>\n\n<p style=\"text-align:left;\"><br>  사실 딱히 어떤 이유로 자바스크립트를 배워야겠다고 생각한 것은 아닙니다. 매력에 이끌렸다고 할까요? 특히 자바스크립트가 가지는 자유로움에 끌렸습니다. 운영체제를 가리지 않는 자유로움, 변수 타입에 제한을 두지 않는 자유로움, 또 웹이 확장되어가고 탈웹의 흐름에 따라 더 많은 곳에서 사용될 가능성이 저를 매료시켰습니다. 생활코딩 강의를 들으면서도 jQuery 같은 강력한 라이브러리가 자바스크립트에 기반을 두고 있다는 사실이 이 언어를 매력적으로 보이게 만들었습니다.<br></p>\n\n<p style=\"text-align:left;\"><br>  앞선 자바스크립트의 매력 요소가 분명 이 언어를 선택함에 어느정도 영향을 준 것이 분명합니다. 하지만 자바스크립트가 저에게 필요하지 않았더라면 아무리 매력적이라고 해도 이 언어를 선택하지 않았을 것입니다. 그 필요는 연습삼아 만들어본 taleline 이라는 앱을 완성시키고 싶은 마음에서 출발합니다. 이 앱을 완성하기 위해 C나 자바를 배우는 것은 무의미합니다. 필요한 서비스를 구현하기 위해 필요한 언어를 배우기로 한 것이죠. 또한 지대한 영향을 끼쳤던 것은 제가 사용하는 스마트워치 &#8216;Pebble Time&#8217;의 개발 언어가 자바스크립트를 기반으로 한 <a href=\"http://developer.getpebble.com/getting-started/pebble-js-tutorial/part1/\" target=\"_blank\">pepple.js</a>(originally <a href=\"http://simplyjs.io/\" target=\"_blank\">simply.js</a>)였기 때문입니다. 가까이 두고 사용하고 있는 기기인만큼 새로운 앱에 대한 아이디어가 종종 떠올랐는데 이를 직접 만들어보고 싶었기 때문입니다.<br></p>\n\n<h4 style=\"text-align:left;\"><br>  <strong>필요해서 배운다!<br> </strong><br></h4>\n\n<p style=\"text-align:left;\"><br>  결국 필요에 의해 자바스크립트를 선택했다라고 말할 수 있겠습니다. 결론은 너무 당연한 것을 이야기하는 것 같습니다. 결국 모든 언어를 배우는 이유는 해당 언어가 자신이 만들고자 하는 서비스에 꼭 필요한 기능을 가졌거나 그 언어로 작업했을 때 발생하는 효용이 있기 때문이라는 겁니다.<br></p>","excerpt":"","more":"<p style=\"text-align:left;\"><br>  세상에는 수 많은 프로그래밍 언어가 존재하고 그 언어들은 제 각기 배움의 가치가 있습니다. 때문에 제 각기 배움의 이유가 존재합니다. 다수의 프로그래밍 언어 서적들은 &#8216;왜 많은 언어 중에 이 언어를 배워야하는가?&#8217; 하는 질문을 답하며 책을 시작합니다. 그렇다면 저는 왜 자바스크립트를 선택했을까요?<br></p>\n\n<h4 style=\"text-align:left;\"><br>  <strong>프로그래밍 경험</strong><br></h4>\n\n<p style=\"text-align:left;\"><br>  대다수의 컴퓨터공학 전공자들이 그러하듯 저 역시 C언어로 프로그래밍에 입문했습니다. &#8216;hello world&#8217;를 출력하고 기본적인 연산 프로그램을 만들며 별거 아닌데? 라는 생각이 들때쯤 배열과 포인터의 늪을 허덕였습니다. 이후 다양한 응용 과제와 씨름하며 밤새워 한번 앉아서 8시간씩 코딩을 하면서도 문제를 해결했을 때의 그 쾌감 때문에 프로그래밍에 빠져들게 되었습니다. 이어서 자바, C++등을 배웠습니다. 이후 배운 것을 근간으로 프로젝트를 수행하기도 했습니다. 자바를 이용한 안드로이드 앱 개발이 대표적이죠. 제가 배운 언어를 사용할 일이 있을 때 그 언어는 빛을 발하고 정말 재밌다는 것을 느낄 수 있었습니다.<br></p>\n\n<p style=\"text-align:left;\"><br>  아쉬운 것은 스마트 디바이스의 출현으로 실질적으로 와닿는 프로그램을 만들기 위해서는 C나 자바가 다소 어렵게 느껴지는 경우가 많다는 것이었습니다. 물론 오랜 시간을 투자해서 네이티브 앱을 만들어내려고 한다면 자바는 충분히 가치가 있습니다. 허나 학회활동이나 수업에서 사용되고 만들어야 하는 수준의 프로그램은 실제 배포판이 아닌 어느정도 구색을 갖춘 프로토 타입 수준의 어플리케이션이면 되는 것이었습니다. 조금 간편하게 만들고 운영체제에 무관하게 사용해볼 수 있는 프로그램이 필요했던 것입니다.<br></p>\n\n<p style=\"text-align:left;\"><br>  웹앱(web app)이 이에 적합한 형태의 프로그램이었습니다. 방학 중 Do it! 시리즈 중 한권인 &#8216;<a href=\"http://www.easyspub.co.kr/20_Menu/BookView/B001/90\" target=\"_blank\">쉽게 배우는 웹앱&amp;하이브리드앱</a>&#8216;을 잡고 공부를 했습니다. <a href=\"https://opentutorials.org/course/668\" target=\"_blank\">생활코딩 &#8211; 클라이언트</a> 강의와 함께 HTML, CSS, jQuery의 기초를 공부하면서 웹앱의 기초를 익혔습니다. 허나 책을 다봤는데도 실제 어플리케이션을 만들 수준이 되지 않음을 깨달았습니다. 이에 <a href=\"https://opentutorials.org/course/1688\" target=\"_blank\">생활코딩 &#8211; 웹 애플리케이션 만들기</a> 강의를 보며 php, mysql, javascript 에 대해 배웠습니다. 이를 배우는 과정에서 간단하게 만들어 본 1차 결과물이 <a href=\"https://github.com/joeunha/taleline\" target=\"_blank\">taleline</a> 입니다. 지금은 정말 아무것도 아닌 상태로 남아있는 이 웹앱을 제대로 만들어보고 싶은 마음이 생긴 것이 발단이었습니다.<br></p>\n\n<p style=\"text-align:left;\"><br>  어떻게하면 이 앱을 제대로 만들어 볼 수 있을까 하는 고민을 하기 시작했습니다. 현재 제가 처한 여러가지 상황을 놓고 고민했을때 저에게는 두가지 선택지가 있음을 깨달았습니다. 첫째, 지금처럼 얇고 넓게 조금씩 배우며 혼자 개발한다. 둘째, 한가지 언어를 깊게 파서 내공을 쌓은 뒤 누군가와 협력해서 개발한다. 주위의 선배들과 커뮤니티의 선배님들의 조언을 살펴 저는 한가지 언어를 깊게 파는 것을 선택했습니다.<br></p>\n\n<h4 style=\"text-align:left;\"><br>  <strong>왜 자바스크립트를 선택했나? </strong><br></h4>\n\n<p style=\"text-align:left;\"><br>  사실 딱히 어떤 이유로 자바스크립트를 배워야겠다고 생각한 것은 아닙니다. 매력에 이끌렸다고 할까요? 특히 자바스크립트가 가지는 자유로움에 끌렸습니다. 운영체제를 가리지 않는 자유로움, 변수 타입에 제한을 두지 않는 자유로움, 또 웹이 확장되어가고 탈웹의 흐름에 따라 더 많은 곳에서 사용될 가능성이 저를 매료시켰습니다. 생활코딩 강의를 들으면서도 jQuery 같은 강력한 라이브러리가 자바스크립트에 기반을 두고 있다는 사실이 이 언어를 매력적으로 보이게 만들었습니다.<br></p>\n\n<p style=\"text-align:left;\"><br>  앞선 자바스크립트의 매력 요소가 분명 이 언어를 선택함에 어느정도 영향을 준 것이 분명합니다. 하지만 자바스크립트가 저에게 필요하지 않았더라면 아무리 매력적이라고 해도 이 언어를 선택하지 않았을 것입니다. 그 필요는 연습삼아 만들어본 taleline 이라는 앱을 완성시키고 싶은 마음에서 출발합니다. 이 앱을 완성하기 위해 C나 자바를 배우는 것은 무의미합니다. 필요한 서비스를 구현하기 위해 필요한 언어를 배우기로 한 것이죠. 또한 지대한 영향을 끼쳤던 것은 제가 사용하는 스마트워치 &#8216;Pebble Time&#8217;의 개발 언어가 자바스크립트를 기반으로 한 <a href=\"http://developer.getpebble.com/getting-started/pebble-js-tutorial/part1/\" target=\"_blank\">pepple.js</a>(originally <a href=\"http://simplyjs.io/\" target=\"_blank\">simply.js</a>)였기 때문입니다. 가까이 두고 사용하고 있는 기기인만큼 새로운 앱에 대한 아이디어가 종종 떠올랐는데 이를 직접 만들어보고 싶었기 때문입니다.<br></p>\n\n<h4 style=\"text-align:left;\"><br>  <strong>필요해서 배운다!<br /> </strong><br></h4>\n\n<p style=\"text-align:left;\"><br>  결국 필요에 의해 자바스크립트를 선택했다라고 말할 수 있겠습니다. 결론은 너무 당연한 것을 이야기하는 것 같습니다. 결국 모든 언어를 배우는 이유는 해당 언어가 자신이 만들고자 하는 서비스에 꼭 필요한 기능을 가졌거나 그 언어로 작업했을 때 발생하는 효용이 있기 때문이라는 겁니다.<br></p>"},{"id":"47","title":"자바스크립트, 어떻게 공부하지?","date":"2015-07-21T13:39:27.000Z","author":"rabby","layout":"post","guid":"https://rabbylab.wordpress.com/?p=47","geo_public":[0],"_content":"어떤 일의 전문가를 찾아가야 그 일의 전문가가 될 수 있습니다. 배움을 위해 스승을 찾는 것은 너무나 당연한 일이지요. 저는 자바스크립트를 공부하기로 결심하고 이를 가르쳐줄 훌륭한 스승을 찾아야겠다고 생각했습니다.\n\n#### **훌륭한 스승을 찾아서**\n\n훌륭한 스승을 찾겠다는 목적으로 정보의 바다를 뒤지기 시작했습니다. (주위를 둘러볼 수 있었으나 당시에는 여유가 없었습니다.) 역시나 저를 실망시키지 않은 곳은 <a href=\"https://opentutorials.org/course/743\" target=\"_blank\">생활코딩 &#8211; JavaScript </a>강의와 <a href=\"https://www.codecademy.com/en/tracks/javascript\" target=\"_blank\">Codecademy &#8211; JavaScript </a>강의였습니다. 이고잉님을 스승님 삼아 동영상 강의를 듣고 Codecademy의 커리큘럼을 따라 착실히 공부를 1주일쯤 했습니다. 저는 알 수 없는 허전함을 느꼈습니다. 뭔가 배우고 있다는 느낌보다 그냥 강의와 과제를 해치운다는 느낌이었습니다. 온전히 제것이 되지 않는다는 느낌이 들었죠. 이때 저는 인터넷 강의가 가지는 한계가 존재한다는 사실을 깨달았습니다. 곧장 다른 방법을 찾기 시작했습니다.\n\n정보의 바다를 헤매이다 마침내 주옥 같은 글을 발견했습니다. &#8220;<a href=\"http://nolboo.kim/blog/2014/03/13/how-to-learn-javascript-properly/\" target=\"_blank\">자바스크립트 제대로 배우기</a>&#8220;라는 nolbookim님의 글이었습니다. 이 글은 &#8220;<a href=\"http://javascriptissexy.com/how-to-learn-javascript-properly/\" target=\"_blank\">How to Learn JavaScript Properly</a>&#8220;라는 글의 번역글인데 영어가 부족한 저에게 있어서 정말 단비같은 글이었습니다. 글을 보면 아시겠지만 약 6~8주가 걸리는 커리큘럼입니다. 원문 저자에 따르면 주당 20~25시간을 투자해야한다고 합니다. 20시간으로 계산해도 하루에 3시간은 공부해야하는 분량입니다. 마침 일도 관두고 집에서 쉬고 있던 저에게 적절한 커리큘럼이었습니다.\n\n해당 커리큘럼에선 두권의 책을 권장하고 있습니다. 저는 약간의 프로그래밍 경험을 가진 이들을 위한 책인 <a href=\"http://www.insightbook.co.kr/post/5765\" target=\"_blank\">프론트엔드 개발자를 위한 자바스크립트 프로그래밍</a>을 저의 책으로 선정했습니다. 그리고 책이 무척 두껍다는 이야기를 들은터라 휴대하기 좋은 책을 한권 더 구매했습니다. (실제로 받아보니 1130페이지의 엄청난 두께였습니다.) 바로 <a href=\"http://www.hanbit.co.kr/book/look.html?isbn=978-89-7914-598-4\" target=\"_blank\">더글라스 크락포드의 자바스크립트 핵심 가이드</a>입니다. 휴대하고 이동하는 길에 읽기 위해 구매했습니다. 이로써 저에게 두명의 스승이 생긴 것입니다.\n\n책에 관한 평가와 살짝 살펴본 제 견해로는 첫번째 스승인 니콜라스 자카스(Nicholas C. Zakas)는 친절한 선배 같은 스승입니다. 자바스크립트에 관해 해주고 싶은 말이 많아 자바스크립트의 전반적인 이야기를 지루하지 않게 들려줍니다. 두번째 스승인 더글라스 크락포드(Douglas Crockford)는 달인의 경지에 이른 교수님의 포스가 흘러넘칩니다. 그의 책은 두께는 얇지만 깊이가 있다고 알려져있습니다. 생활코딩의 이고잉님은 &#8216;보면 볼수록 씹는 맛이 나는 책&#8217;이라고 평했습니다.<figure id=\"attachment_55\" style=\"width: 264px\" class=\"wp-caption alignleft\">\n\n<img class=\"size-medium wp-image-55\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/nicholas_zakas-264x300.jpg\" alt=\"Nicholas C. Zakas\" width=\"264\" height=\"300\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/nicholas_zakas-264x300.jpg 264w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/nicholas_zakas.jpg 280w\" sizes=\"(max-width: 264px) 100vw, 264px\" /><figcaption class=\"wp-caption-text\">Nicholas C. Zakas</figcaption></figure> <figure id=\"attachment_54\" style=\"width: 300px\" class=\"wp-caption alignright\"><img class=\"size-medium wp-image-54\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford-300x217.jpg\" alt=\"Doublas Crockford\" width=\"300\" height=\"217\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford-300x217.jpg 300w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford-768x555.jpg 768w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford.jpg 800w\" sizes=\"(max-width: 300px) 100vw, 300px\" /><figcaption class=\"wp-caption-text\">Doublas Crockford</figcaption></figure> \n\n#### **이제 훌륭한 제자가 되자!**\n\n위의 블로그에서 소개드린 커리큘럼은 책을 읽으며 병행하는 도구로 Codecademy를 추천하고 있습니다. 저는 이미 해당 과정을 절반정도 수료한 상태임으로 커리큘럼보다 빠른 속도로 공부를 진행할 계획입니다. 하루에 3시간씩 꾸준함을 무기로 야금야금 자바스크립트를 배워나가겠습니다. 분명한 사실은 저는 이번 도전을 통해 자신감을 얻고 훌륭한 제자가 될 것입니다. 그리고 언젠가는 청출어람할 날도 오겠지요. 하지만 오늘은 아닌 것 같습니다. 오늘은 오늘의 공부에 최선을 다하겠습니다.","source":"_posts/javasrcipt-intro-2.md","raw":"---\nid: 47\ntitle: 자바스크립트, 어떻게 공부하지?\ndate: 2015-07-21T22:39:27+00:00\nauthor: rabby\nlayout: post\nguid: https://rabbylab.wordpress.com/?p=47\npermalink: /javasrcipt_intro_2/\ngeo_public:\n  - 0\ncategories:\n  - javascript\n  - study\ntags:\n  - javascript\n  - 도서추천\n  - 자바스크립트\n---\n어떤 일의 전문가를 찾아가야 그 일의 전문가가 될 수 있습니다. 배움을 위해 스승을 찾는 것은 너무나 당연한 일이지요. 저는 자바스크립트를 공부하기로 결심하고 이를 가르쳐줄 훌륭한 스승을 찾아야겠다고 생각했습니다.\n\n#### **훌륭한 스승을 찾아서**\n\n훌륭한 스승을 찾겠다는 목적으로 정보의 바다를 뒤지기 시작했습니다. (주위를 둘러볼 수 있었으나 당시에는 여유가 없었습니다.) 역시나 저를 실망시키지 않은 곳은 <a href=\"https://opentutorials.org/course/743\" target=\"_blank\">생활코딩 &#8211; JavaScript </a>강의와 <a href=\"https://www.codecademy.com/en/tracks/javascript\" target=\"_blank\">Codecademy &#8211; JavaScript </a>강의였습니다. 이고잉님을 스승님 삼아 동영상 강의를 듣고 Codecademy의 커리큘럼을 따라 착실히 공부를 1주일쯤 했습니다. 저는 알 수 없는 허전함을 느꼈습니다. 뭔가 배우고 있다는 느낌보다 그냥 강의와 과제를 해치운다는 느낌이었습니다. 온전히 제것이 되지 않는다는 느낌이 들었죠. 이때 저는 인터넷 강의가 가지는 한계가 존재한다는 사실을 깨달았습니다. 곧장 다른 방법을 찾기 시작했습니다.\n\n정보의 바다를 헤매이다 마침내 주옥 같은 글을 발견했습니다. &#8220;<a href=\"http://nolboo.kim/blog/2014/03/13/how-to-learn-javascript-properly/\" target=\"_blank\">자바스크립트 제대로 배우기</a>&#8220;라는 nolbookim님의 글이었습니다. 이 글은 &#8220;<a href=\"http://javascriptissexy.com/how-to-learn-javascript-properly/\" target=\"_blank\">How to Learn JavaScript Properly</a>&#8220;라는 글의 번역글인데 영어가 부족한 저에게 있어서 정말 단비같은 글이었습니다. 글을 보면 아시겠지만 약 6~8주가 걸리는 커리큘럼입니다. 원문 저자에 따르면 주당 20~25시간을 투자해야한다고 합니다. 20시간으로 계산해도 하루에 3시간은 공부해야하는 분량입니다. 마침 일도 관두고 집에서 쉬고 있던 저에게 적절한 커리큘럼이었습니다.\n\n해당 커리큘럼에선 두권의 책을 권장하고 있습니다. 저는 약간의 프로그래밍 경험을 가진 이들을 위한 책인 <a href=\"http://www.insightbook.co.kr/post/5765\" target=\"_blank\">프론트엔드 개발자를 위한 자바스크립트 프로그래밍</a>을 저의 책으로 선정했습니다. 그리고 책이 무척 두껍다는 이야기를 들은터라 휴대하기 좋은 책을 한권 더 구매했습니다. (실제로 받아보니 1130페이지의 엄청난 두께였습니다.) 바로 <a href=\"http://www.hanbit.co.kr/book/look.html?isbn=978-89-7914-598-4\" target=\"_blank\">더글라스 크락포드의 자바스크립트 핵심 가이드</a>입니다. 휴대하고 이동하는 길에 읽기 위해 구매했습니다. 이로써 저에게 두명의 스승이 생긴 것입니다.\n\n책에 관한 평가와 살짝 살펴본 제 견해로는 첫번째 스승인 니콜라스 자카스(Nicholas C. Zakas)는 친절한 선배 같은 스승입니다. 자바스크립트에 관해 해주고 싶은 말이 많아 자바스크립트의 전반적인 이야기를 지루하지 않게 들려줍니다. 두번째 스승인 더글라스 크락포드(Douglas Crockford)는 달인의 경지에 이른 교수님의 포스가 흘러넘칩니다. 그의 책은 두께는 얇지만 깊이가 있다고 알려져있습니다. 생활코딩의 이고잉님은 &#8216;보면 볼수록 씹는 맛이 나는 책&#8217;이라고 평했습니다.<figure id=\"attachment_55\" style=\"width: 264px\" class=\"wp-caption alignleft\">\n\n<img class=\"size-medium wp-image-55\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/nicholas_zakas-264x300.jpg\" alt=\"Nicholas C. Zakas\" width=\"264\" height=\"300\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/nicholas_zakas-264x300.jpg 264w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/nicholas_zakas.jpg 280w\" sizes=\"(max-width: 264px) 100vw, 264px\" /><figcaption class=\"wp-caption-text\">Nicholas C. Zakas</figcaption></figure> <figure id=\"attachment_54\" style=\"width: 300px\" class=\"wp-caption alignright\"><img class=\"size-medium wp-image-54\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford-300x217.jpg\" alt=\"Doublas Crockford\" width=\"300\" height=\"217\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford-300x217.jpg 300w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford-768x555.jpg 768w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford.jpg 800w\" sizes=\"(max-width: 300px) 100vw, 300px\" /><figcaption class=\"wp-caption-text\">Doublas Crockford</figcaption></figure> \n\n#### **이제 훌륭한 제자가 되자!**\n\n위의 블로그에서 소개드린 커리큘럼은 책을 읽으며 병행하는 도구로 Codecademy를 추천하고 있습니다. 저는 이미 해당 과정을 절반정도 수료한 상태임으로 커리큘럼보다 빠른 속도로 공부를 진행할 계획입니다. 하루에 3시간씩 꾸준함을 무기로 야금야금 자바스크립트를 배워나가겠습니다. 분명한 사실은 저는 이번 도전을 통해 자신감을 얻고 훌륭한 제자가 될 것입니다. 그리고 언젠가는 청출어람할 날도 오겠지요. 하지만 오늘은 아닌 것 같습니다. 오늘은 오늘의 공부에 최선을 다하겠습니다.","slug":"/javasrcipt_intro_2/","published":1,"updated":"2017-02-01T15:14:08.000Z","comments":1,"photos":[],"link":"","_id":"cizqle7ri0013hyvgm9w4ixvz","content":"<p>어떤 일의 전문가를 찾아가야 그 일의 전문가가 될 수 있습니다. 배움을 위해 스승을 찾는 것은 너무나 당연한 일이지요. 저는 자바스크립트를 공부하기로 결심하고 이를 가르쳐줄 훌륭한 스승을 찾아야겠다고 생각했습니다.</p>\n<h4 id=\"훌륭한-스승을-찾아서\"><a href=\"#훌륭한-스승을-찾아서\" class=\"headerlink\" title=\"훌륭한 스승을 찾아서\"></a><strong>훌륭한 스승을 찾아서</strong></h4><p>훌륭한 스승을 찾겠다는 목적으로 정보의 바다를 뒤지기 시작했습니다. (주위를 둘러볼 수 있었으나 당시에는 여유가 없었습니다.) 역시나 저를 실망시키지 않은 곳은 <a href=\"https://opentutorials.org/course/743\" target=\"_blank\">생활코딩 &#8211; JavaScript </a>강의와 <a href=\"https://www.codecademy.com/en/tracks/javascript\" target=\"_blank\">Codecademy &#8211; JavaScript </a>강의였습니다. 이고잉님을 스승님 삼아 동영상 강의를 듣고 Codecademy의 커리큘럼을 따라 착실히 공부를 1주일쯤 했습니다. 저는 알 수 없는 허전함을 느꼈습니다. 뭔가 배우고 있다는 느낌보다 그냥 강의와 과제를 해치운다는 느낌이었습니다. 온전히 제것이 되지 않는다는 느낌이 들었죠. 이때 저는 인터넷 강의가 가지는 한계가 존재한다는 사실을 깨달았습니다. 곧장 다른 방법을 찾기 시작했습니다.</p>\n<p>정보의 바다를 헤매이다 마침내 주옥 같은 글을 발견했습니다. &#8220;<a href=\"http://nolboo.kim/blog/2014/03/13/how-to-learn-javascript-properly/\" target=\"_blank\">자바스크립트 제대로 배우기</a>&#8220;라는 nolbookim님의 글이었습니다. 이 글은 &#8220;<a href=\"http://javascriptissexy.com/how-to-learn-javascript-properly/\" target=\"_blank\">How to Learn JavaScript Properly</a>&#8220;라는 글의 번역글인데 영어가 부족한 저에게 있어서 정말 단비같은 글이었습니다. 글을 보면 아시겠지만 약 6~8주가 걸리는 커리큘럼입니다. 원문 저자에 따르면 주당 20~25시간을 투자해야한다고 합니다. 20시간으로 계산해도 하루에 3시간은 공부해야하는 분량입니다. 마침 일도 관두고 집에서 쉬고 있던 저에게 적절한 커리큘럼이었습니다.</p>\n<p>해당 커리큘럼에선 두권의 책을 권장하고 있습니다. 저는 약간의 프로그래밍 경험을 가진 이들을 위한 책인 <a href=\"http://www.insightbook.co.kr/post/5765\" target=\"_blank\">프론트엔드 개발자를 위한 자바스크립트 프로그래밍</a>을 저의 책으로 선정했습니다. 그리고 책이 무척 두껍다는 이야기를 들은터라 휴대하기 좋은 책을 한권 더 구매했습니다. (실제로 받아보니 1130페이지의 엄청난 두께였습니다.) 바로 <a href=\"http://www.hanbit.co.kr/book/look.html?isbn=978-89-7914-598-4\" target=\"_blank\">더글라스 크락포드의 자바스크립트 핵심 가이드</a>입니다. 휴대하고 이동하는 길에 읽기 위해 구매했습니다. 이로써 저에게 두명의 스승이 생긴 것입니다.</p>\n<p>책에 관한 평가와 살짝 살펴본 제 견해로는 첫번째 스승인 니콜라스 자카스(Nicholas C. Zakas)는 친절한 선배 같은 스승입니다. 자바스크립트에 관해 해주고 싶은 말이 많아 자바스크립트의 전반적인 이야기를 지루하지 않게 들려줍니다. 두번째 스승인 더글라스 크락포드(Douglas Crockford)는 달인의 경지에 이른 교수님의 포스가 흘러넘칩니다. 그의 책은 두께는 얇지만 깊이가 있다고 알려져있습니다. 생활코딩의 이고잉님은 &#8216;보면 볼수록 씹는 맛이 나는 책&#8217;이라고 평했습니다.<figure id=\"attachment_55\" style=\"width: 264px\" class=\"wp-caption alignleft\"></figure></p>\n<p><img class=\"size-medium wp-image-55\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/nicholas_zakas-264x300.jpg\" alt=\"Nicholas C. Zakas\" width=\"264\" height=\"300\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/nicholas_zakas-264x300.jpg 264w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/nicholas_zakas.jpg 280w\" sizes=\"(max-width: 264px) 100vw, 264px\"><figcaption class=\"wp-caption-text\">Nicholas C. Zakas</figcaption> <figure id=\"attachment_54\" style=\"width: 300px\" class=\"wp-caption alignright\"><img class=\"size-medium wp-image-54\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford-300x217.jpg\" alt=\"Doublas Crockford\" width=\"300\" height=\"217\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford-300x217.jpg 300w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford-768x555.jpg 768w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford.jpg 800w\" sizes=\"(max-width: 300px) 100vw, 300px\"><figcaption class=\"wp-caption-text\">Doublas Crockford</figcaption></figure> </p>\n<h4 id=\"이제-훌륭한-제자가-되자\"><a href=\"#이제-훌륭한-제자가-되자\" class=\"headerlink\" title=\"이제 훌륭한 제자가 되자!\"></a><strong>이제 훌륭한 제자가 되자!</strong></h4><p>위의 블로그에서 소개드린 커리큘럼은 책을 읽으며 병행하는 도구로 Codecademy를 추천하고 있습니다. 저는 이미 해당 과정을 절반정도 수료한 상태임으로 커리큘럼보다 빠른 속도로 공부를 진행할 계획입니다. 하루에 3시간씩 꾸준함을 무기로 야금야금 자바스크립트를 배워나가겠습니다. 분명한 사실은 저는 이번 도전을 통해 자신감을 얻고 훌륭한 제자가 될 것입니다. 그리고 언젠가는 청출어람할 날도 오겠지요. 하지만 오늘은 아닌 것 같습니다. 오늘은 오늘의 공부에 최선을 다하겠습니다.</p>\n","excerpt":"","more":"<p>어떤 일의 전문가를 찾아가야 그 일의 전문가가 될 수 있습니다. 배움을 위해 스승을 찾는 것은 너무나 당연한 일이지요. 저는 자바스크립트를 공부하기로 결심하고 이를 가르쳐줄 훌륭한 스승을 찾아야겠다고 생각했습니다.</p>\n<h4 id=\"훌륭한-스승을-찾아서\"><a href=\"#훌륭한-스승을-찾아서\" class=\"headerlink\" title=\"훌륭한 스승을 찾아서\"></a><strong>훌륭한 스승을 찾아서</strong></h4><p>훌륭한 스승을 찾겠다는 목적으로 정보의 바다를 뒤지기 시작했습니다. (주위를 둘러볼 수 있었으나 당시에는 여유가 없었습니다.) 역시나 저를 실망시키지 않은 곳은 <a href=\"https://opentutorials.org/course/743\" target=\"_blank\">생활코딩 &#8211; JavaScript </a>강의와 <a href=\"https://www.codecademy.com/en/tracks/javascript\" target=\"_blank\">Codecademy &#8211; JavaScript </a>강의였습니다. 이고잉님을 스승님 삼아 동영상 강의를 듣고 Codecademy의 커리큘럼을 따라 착실히 공부를 1주일쯤 했습니다. 저는 알 수 없는 허전함을 느꼈습니다. 뭔가 배우고 있다는 느낌보다 그냥 강의와 과제를 해치운다는 느낌이었습니다. 온전히 제것이 되지 않는다는 느낌이 들었죠. 이때 저는 인터넷 강의가 가지는 한계가 존재한다는 사실을 깨달았습니다. 곧장 다른 방법을 찾기 시작했습니다.</p>\n<p>정보의 바다를 헤매이다 마침내 주옥 같은 글을 발견했습니다. &#8220;<a href=\"http://nolboo.kim/blog/2014/03/13/how-to-learn-javascript-properly/\" target=\"_blank\">자바스크립트 제대로 배우기</a>&#8220;라는 nolbookim님의 글이었습니다. 이 글은 &#8220;<a href=\"http://javascriptissexy.com/how-to-learn-javascript-properly/\" target=\"_blank\">How to Learn JavaScript Properly</a>&#8220;라는 글의 번역글인데 영어가 부족한 저에게 있어서 정말 단비같은 글이었습니다. 글을 보면 아시겠지만 약 6~8주가 걸리는 커리큘럼입니다. 원문 저자에 따르면 주당 20~25시간을 투자해야한다고 합니다. 20시간으로 계산해도 하루에 3시간은 공부해야하는 분량입니다. 마침 일도 관두고 집에서 쉬고 있던 저에게 적절한 커리큘럼이었습니다.</p>\n<p>해당 커리큘럼에선 두권의 책을 권장하고 있습니다. 저는 약간의 프로그래밍 경험을 가진 이들을 위한 책인 <a href=\"http://www.insightbook.co.kr/post/5765\" target=\"_blank\">프론트엔드 개발자를 위한 자바스크립트 프로그래밍</a>을 저의 책으로 선정했습니다. 그리고 책이 무척 두껍다는 이야기를 들은터라 휴대하기 좋은 책을 한권 더 구매했습니다. (실제로 받아보니 1130페이지의 엄청난 두께였습니다.) 바로 <a href=\"http://www.hanbit.co.kr/book/look.html?isbn=978-89-7914-598-4\" target=\"_blank\">더글라스 크락포드의 자바스크립트 핵심 가이드</a>입니다. 휴대하고 이동하는 길에 읽기 위해 구매했습니다. 이로써 저에게 두명의 스승이 생긴 것입니다.</p>\n<p>책에 관한 평가와 살짝 살펴본 제 견해로는 첫번째 스승인 니콜라스 자카스(Nicholas C. Zakas)는 친절한 선배 같은 스승입니다. 자바스크립트에 관해 해주고 싶은 말이 많아 자바스크립트의 전반적인 이야기를 지루하지 않게 들려줍니다. 두번째 스승인 더글라스 크락포드(Douglas Crockford)는 달인의 경지에 이른 교수님의 포스가 흘러넘칩니다. 그의 책은 두께는 얇지만 깊이가 있다고 알려져있습니다. 생활코딩의 이고잉님은 &#8216;보면 볼수록 씹는 맛이 나는 책&#8217;이라고 평했습니다.<figure id=\"attachment_55\" style=\"width: 264px\" class=\"wp-caption alignleft\"></p>\n<p><img class=\"size-medium wp-image-55\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/nicholas_zakas-264x300.jpg\" alt=\"Nicholas C. Zakas\" width=\"264\" height=\"300\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/nicholas_zakas-264x300.jpg 264w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/nicholas_zakas.jpg 280w\" sizes=\"(max-width: 264px) 100vw, 264px\" /><figcaption class=\"wp-caption-text\">Nicholas C. Zakas</figcaption></figure> <figure id=\"attachment_54\" style=\"width: 300px\" class=\"wp-caption alignright\"><img class=\"size-medium wp-image-54\" src=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford-300x217.jpg\" alt=\"Doublas Crockford\" width=\"300\" height=\"217\" srcset=\"http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford-300x217.jpg 300w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford-768x555.jpg 768w, http://rabbylab.xyz/blog/wp-content/uploads/2015/07/douglas_crockford.jpg 800w\" sizes=\"(max-width: 300px) 100vw, 300px\" /><figcaption class=\"wp-caption-text\">Doublas Crockford</figcaption></figure> </p>\n<h4 id=\"이제-훌륭한-제자가-되자\"><a href=\"#이제-훌륭한-제자가-되자\" class=\"headerlink\" title=\"이제 훌륭한 제자가 되자!\"></a><strong>이제 훌륭한 제자가 되자!</strong></h4><p>위의 블로그에서 소개드린 커리큘럼은 책을 읽으며 병행하는 도구로 Codecademy를 추천하고 있습니다. 저는 이미 해당 과정을 절반정도 수료한 상태임으로 커리큘럼보다 빠른 속도로 공부를 진행할 계획입니다. 하루에 3시간씩 꾸준함을 무기로 야금야금 자바스크립트를 배워나가겠습니다. 분명한 사실은 저는 이번 도전을 통해 자신감을 얻고 훌륭한 제자가 될 것입니다. 그리고 언젠가는 청출어람할 날도 오겠지요. 하지만 오늘은 아닌 것 같습니다. 오늘은 오늘의 공부에 최선을 다하겠습니다.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cizql1ryz0000envg7kcycfjb","category_id":"cizqkyzrv006bdlvgx4xpme9r","_id":"cizql1rz40001envgpatzncaz"},{"post_id":"cizql1ryz0000envg7kcycfjb","category_id":"cizqkyzsd0070dlvg94gk41dl","_id":"cizql1rz40002envgt6runups"},{"post_id":"cizqle7q40000hyvgswxew5we","category_id":"cizqkyzrv006bdlvgx4xpme9r","_id":"cizqle7qi0004hyvg6ysss6ev"},{"post_id":"cizqle7qb0001hyvgf77wn5sx","category_id":"cizqkyzrh005tdlvgo81qliak","_id":"cizqle7qn0007hyvgr61k6hbl"},{"post_id":"cizqle7qf0003hyvgj3nk87xq","category_id":"cizqkyzrv006bdlvgx4xpme9r","_id":"cizqle7qq000ahyvglkcjxxss"},{"post_id":"cizqle7qi0006hyvg8ku02sdv","category_id":"cizqkyzrv006bdlvgx4xpme9r","_id":"cizqle7qt000dhyvgcvi70g4w"},{"post_id":"cizqle7qo0009hyvgfm5rx1r8","category_id":"cizqkyzmf0007dlvgv74yrj03","_id":"cizqle7qw000ghyvgixvcckdk"},{"post_id":"cizqle7qr000chyvg6lcf1jd4","category_id":"cizqkyzma0002dlvg72i2xeo4","_id":"cizqle7r0000jhyvgzfe5vxx4"},{"post_id":"cizqle7qu000fhyvgqunpjtav","category_id":"cizqkyzqn0056dlvgf3y2292q","_id":"cizqle7r3000mhyvgv66ccmex"},{"post_id":"cizqle7qw000ihyvgqz31dp5s","category_id":"cizqkyzma0002dlvg72i2xeo4","_id":"cizqle7r6000phyvg8l1tyh1k"},{"post_id":"cizqle7r0000lhyvgunsahdh4","category_id":"cizqkyzqn0056dlvgf3y2292q","_id":"cizqle7r8000shyvgs4n1t02w"},{"post_id":"cizqle7r4000ohyvgff8oyf39","category_id":"cizqkyzrp0061dlvgrbq91uqv","_id":"cizqle7rb000vhyvg2anctjmn"},{"post_id":"cizqle7r6000rhyvgk5912hky","category_id":"cizqkyzrp0061dlvgrbq91uqv","_id":"cizqle7rf000yhyvgymu06tk0"},{"post_id":"cizqle7ra000uhyvgomjecfc8","category_id":"cizqkyzrv006bdlvgx4xpme9r","_id":"cizqle7ri0011hyvgha8qznm6"},{"post_id":"cizqle7rc000xhyvgmk4llj7w","category_id":"cizqkyzqn0056dlvgf3y2292q","_id":"cizqle7rl0015hyvgveummfwv"},{"post_id":"cizqle7rc000xhyvgmk4llj7w","category_id":"cizqkyzrc005pdlvgu6fto0jh","_id":"cizqle7rm0017hyvgztj7lwjg"},{"post_id":"cizqle7rf0010hyvg3kicgtgd","category_id":"cizqkyzma0002dlvg72i2xeo4","_id":"cizqle7rm0019hyvglwweyoxb"},{"post_id":"cizqle7rf0010hyvg3kicgtgd","category_id":"cizqkyzmq000gdlvg6sgmxjj8","_id":"cizqle7rm001bhyvgm3qe0t7i"},{"post_id":"cizqle7ri0013hyvgm9w4ixvz","category_id":"cizqkyzma0002dlvg72i2xeo4","_id":"cizqle7rm001dhyvgzmf3i1ec"},{"post_id":"cizqle7ri0013hyvgm9w4ixvz","category_id":"cizqkyzmq000gdlvg6sgmxjj8","_id":"cizqle7rn001fhyvg8r1btkzm"}],"PostTag":[{"post_id":"cizqle7q40000hyvgswxew5we","tag_id":"cizqkyzsu007odlvgakggce45","_id":"cizqle7qf0002hyvgnsd8eagv"},{"post_id":"cizqle7q40000hyvgswxew5we","tag_id":"cizqkyzsk007gdlvghbhdkpsg","_id":"cizqle7qi0005hyvgc1lxcru9"},{"post_id":"cizqle7q40000hyvgswxew5we","tag_id":"cizqkyzsm007hdlvgy2t84zj6","_id":"cizqle7qn0008hyvgtexj2r7j"},{"post_id":"cizqle7q40000hyvgswxew5we","tag_id":"cizqkyzrh005sdlvgylcqfl0j","_id":"cizqle7qq000bhyvgi4bk948a"},{"post_id":"cizqle7qb0001hyvgf77wn5sx","tag_id":"cizqkyzmr000hdlvgn5dprmx7","_id":"cizqle7qt000ehyvge5h5rzse"},{"post_id":"cizqle7qb0001hyvgf77wn5sx","tag_id":"cizqkyzra005ndlvg9g3uei9j","_id":"cizqle7qw000hhyvgny931okv"},{"post_id":"cizqle7qb0001hyvgf77wn5sx","tag_id":"cizqkyzrz006gdlvg74w1ed6l","_id":"cizqle7r0000khyvgvuxb2r7q"},{"post_id":"cizqle7qf0003hyvgj3nk87xq","tag_id":"cizqkyzsh007bdlvg1r7blvbl","_id":"cizqle7r3000nhyvggdr49jvh"},{"post_id":"cizqle7qf0003hyvgj3nk87xq","tag_id":"cizqkyzsk007gdlvghbhdkpsg","_id":"cizqle7r6000qhyvgom27nlx0"},{"post_id":"cizqle7qf0003hyvgj3nk87xq","tag_id":"cizqkyzsm007hdlvgy2t84zj6","_id":"cizqle7r9000thyvglhfohm35"},{"post_id":"cizqle7qi0006hyvg8ku02sdv","tag_id":"cizqkyzsh007bdlvg1r7blvbl","_id":"cizqle7rb000whyvgta3vd0n5"},{"post_id":"cizqle7qi0006hyvg8ku02sdv","tag_id":"cizqkyzsk007gdlvghbhdkpsg","_id":"cizqle7rf000zhyvggswwy1cf"},{"post_id":"cizqle7qi0006hyvg8ku02sdv","tag_id":"cizqkyzsm007hdlvgy2t84zj6","_id":"cizqle7ri0012hyvgp4d2x7bg"},{"post_id":"cizqle7qo0009hyvgfm5rx1r8","tag_id":"cizqkyzmr000hdlvgn5dprmx7","_id":"cizqle7rl0014hyvginb88zn0"},{"post_id":"cizqle7qo0009hyvgfm5rx1r8","tag_id":"cizqkyzmw000pdlvgyhy2u2q9","_id":"cizqle7rm0016hyvgtthtma3z"},{"post_id":"cizqle7qo0009hyvgfm5rx1r8","tag_id":"cizqkyzna001gdlvgxmyx2e7j","_id":"cizqle7rm0018hyvgaw8ahwnm"},{"post_id":"cizqle7qo0009hyvgfm5rx1r8","tag_id":"cizqkyznj001ldlvgty0cd5nq","_id":"cizqle7rm001ahyvg4t88e4sj"},{"post_id":"cizqle7qr000chyvg6lcf1jd4","tag_id":"cizqkyzma0003dlvgmap3itqp","_id":"cizqle7rm001chyvglkq8g84p"},{"post_id":"cizqle7qr000chyvg6lcf1jd4","tag_id":"cizqkyzoi0033dlvg9922x4he","_id":"cizqle7rn001ehyvgj0xb4trt"},{"post_id":"cizqle7qr000chyvg6lcf1jd4","tag_id":"cizqkyzoi0038dlvgfloaa1q0","_id":"cizqle7rn001ghyvg26bmkpzd"},{"post_id":"cizqle7qu000fhyvgqunpjtav","tag_id":"cizqkyzqn0057dlvgbedus5ea","_id":"cizqle7rn001hhyvgc4spwkai"},{"post_id":"cizqle7qu000fhyvgqunpjtav","tag_id":"cizqkyzqo005ddlvgntp0mxok","_id":"cizqle7ro001ihyvgesp734ca"},{"post_id":"cizqle7qu000fhyvgqunpjtav","tag_id":"cizqkyzqp005fdlvgejm9c68g","_id":"cizqle7ro001jhyvg9f7p26gp"},{"post_id":"cizqle7qw000ihyvgqz31dp5s","tag_id":"cizqkyzs7006qdlvgkrzbo5pn","_id":"cizqle7ro001khyvgh5t7wnwr"},{"post_id":"cizqle7qw000ihyvgqz31dp5s","tag_id":"cizqkyzma0003dlvgmap3itqp","_id":"cizqle7ro001lhyvg8w4czwgb"},{"post_id":"cizqle7qw000ihyvgqz31dp5s","tag_id":"cizqkyzsc006xdlvg5d0x17hu","_id":"cizqle7ro001mhyvgqk4ah0rb"},{"post_id":"cizqle7r0000lhyvgunsahdh4","tag_id":"cizqkyzra005ndlvg9g3uei9j","_id":"cizqle7ro001nhyvg9djap51o"},{"post_id":"cizqle7r0000lhyvgunsahdh4","tag_id":"cizqkyzqn0057dlvgbedus5ea","_id":"cizqle7ro001ohyvgdfuj3qij"},{"post_id":"cizqle7r4000ohyvgff8oyf39","tag_id":"cizqkyzse0073dlvg8n2ugshf","_id":"cizqle7ro001phyvgxhdotha8"},{"post_id":"cizqle7r4000ohyvgff8oyf39","tag_id":"cizqkyzsf0077dlvgckpiizyp","_id":"cizqle7ro001qhyvgww1izqvl"},{"post_id":"cizqle7r6000rhyvgk5912hky","tag_id":"cizqkyzse0073dlvg8n2ugshf","_id":"cizqle7rp001rhyvgmh8rcd5y"},{"post_id":"cizqle7r6000rhyvgk5912hky","tag_id":"cizqkyzsf0077dlvgckpiizyp","_id":"cizqle7rp001shyvgb12lvbol"},{"post_id":"cizqle7r6000rhyvgk5912hky","tag_id":"cizqkyzsr007ndlvgkbf07mnd","_id":"cizqle7rp001thyvgxyq4rwr2"},{"post_id":"cizqle7ra000uhyvgomjecfc8","tag_id":"cizqkyzsu007odlvgakggce45","_id":"cizqle7rq001uhyvg1ma2ld5z"},{"post_id":"cizqle7ra000uhyvgomjecfc8","tag_id":"cizqkyzsk007gdlvghbhdkpsg","_id":"cizqle7rq001vhyvgwayngypm"},{"post_id":"cizqle7ra000uhyvgomjecfc8","tag_id":"cizqkyzsm007hdlvgy2t84zj6","_id":"cizqle7rq001whyvg8y340idd"},{"post_id":"cizqle7ra000uhyvgomjecfc8","tag_id":"cizqkyzrh005sdlvgylcqfl0j","_id":"cizqle7rr001xhyvg7f3mxw2e"},{"post_id":"cizqle7ra000uhyvgomjecfc8","tag_id":"cizqkyzt80087dlvg3td8g223","_id":"cizqle7rr001yhyvgox02t62n"},{"post_id":"cizqle7rc000xhyvgmk4llj7w","tag_id":"cizqkyzra005ndlvg9g3uei9j","_id":"cizqle7rr001zhyvgamoe8jr3"},{"post_id":"cizqle7rc000xhyvgmk4llj7w","tag_id":"cizqkyzqn0057dlvgbedus5ea","_id":"cizqle7rr0020hyvgbwtg2e9k"},{"post_id":"cizqle7rc000xhyvgmk4llj7w","tag_id":"cizqkyzrh005sdlvgylcqfl0j","_id":"cizqle7rr0021hyvgds9jbh6i"},{"post_id":"cizqle7rc000xhyvgmk4llj7w","tag_id":"cizqkyzrp0060dlvga5d82lbl","_id":"cizqle7rr0022hyvgh72849vs"},{"post_id":"cizqle7ri0013hyvgm9w4ixvz","tag_id":"cizqkyzma0003dlvgmap3itqp","_id":"cizqle7rr0023hyvga4rau9v2"},{"post_id":"cizqle7ri0013hyvgm9w4ixvz","tag_id":"cizqkyzmf0008dlvg43ql3mcj","_id":"cizqle7rr0024hyvg8temcp1i"},{"post_id":"cizqle7ri0013hyvgm9w4ixvz","tag_id":"cizqkyzml000cdlvg2gcjl1u4","_id":"cizqle7rr0025hyvgec6ro9r9"}],"Tag":[{"name":"javascript","_id":"cizqkyzma0003dlvgmap3itqp"},{"name":"도서추천","_id":"cizqkyzmf0008dlvg43ql3mcj"},{"name":"자바스크립트","_id":"cizqkyzml000cdlvg2gcjl1u4"},{"name":"about","_id":"cizqkyzmr000hdlvgn5dprmx7"},{"name":"me","_id":"cizqkyzmw000pdlvgyhy2u2q9"},{"name":"인턴","_id":"cizqkyzn0000wdlvge4axoq9h"},{"name":"rabby","_id":"cizqkyzna001gdlvgxmyx2e7j"},{"name":"rabbylab","_id":"cizqkyznj001ldlvgty0cd5nq"},{"name":"pebble","_id":"cizqkyzo20028dlvgbpvitzj4"},{"name":"pebbletime","_id":"cizqkyzo9002hdlvgxtyvqxf6"},{"name":"smartwatch","_id":"cizqkyzob002ndlvg5o7twbn8"},{"name":"wearable","_id":"cizqkyzod002rdlvghrqe7sj2"},{"name":"스마트워치","_id":"cizqkyzod002wdlvgftivnu6z"},{"name":"페블","_id":"cizqkyzoh0030dlvgmjc7t5hs"},{"name":"예약어","_id":"cizqkyzoi0033dlvg9922x4he"},{"name":"이름","_id":"cizqkyzoi0038dlvgfloaa1q0"},{"name":"toeicspeaking","_id":"cizqkyzqf004wdlvgw08cf23n"},{"name":"csbasic","_id":"cizqkyzqn0057dlvgbedus5ea"},{"name":"operatingsystem","_id":"cizqkyzqo005ddlvgntp0mxok"},{"name":"os","_id":"cizqkyzqp005fdlvgejm9c68g"},{"name":"terms","_id":"cizqkyzqp005gdlvgf98pvy8o"},{"name":"coin","_id":"cizqkyzra005ndlvg9g3uei9j"},{"name":"practice","_id":"cizqkyzrh005sdlvgylcqfl0j"},{"name":"stack","_id":"cizqkyzrp0060dlvga5d82lbl"},{"name":"story","_id":"cizqkyzrz006gdlvg74w1ed6l"},{"name":"github","_id":"cizqkyzs7006qdlvgkrzbo5pn"},{"name":"meanstack","_id":"cizqkyzsc006xdlvg5d0x17hu"},{"name":"praisetogether","_id":"cizqkyzse0073dlvg8n2ugshf"},{"name":"prato","_id":"cizqkyzsf0077dlvgckpiizyp"},{"name":"css","_id":"cizqkyzsh007bdlvg1r7blvbl"},{"name":"fcc","_id":"cizqkyzsk007gdlvghbhdkpsg"},{"name":"freecodecamp","_id":"cizqkyzsm007hdlvgy2t84zj6"},{"name":"기획","_id":"cizqkyzsr007ndlvgkbf07mnd"},{"name":"codepen","_id":"cizqkyzsu007odlvgakggce45"},{"name":"project","_id":"cizqkyzt80087dlvg3td8g223"},{"name":"hobby","_id":"cizqkyzt90088dlvgf2myajif"},{"name":"photo","_id":"cizqkyztb008bdlvg8sby2aej"},{"name":"사진","_id":"cizqkyztd008edlvgka9bkcoy"},{"name":"취미","_id":"cizqkyzte008gdlvg6bfmhb4p"}]}}