<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>joeun.me</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 07 Feb 2017 00:01:53 +0900</pubDate>
    <lastBuildDate>Tue, 07 Feb 2017 00:01:53 +0900</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>[Daily Commit] Today I Learned</title>
        <description>&lt;p&gt;한동안 개발 활동이 뜸했습니다. 취미 관련 글에서 언급한 것처럼 계절학기로 인해 바빴기 때문입니다. 지난 7월 12일 이후로 학교와 관련된 모든 일을 끝냈습니다. 이제 새로운 곳에서 일을 시작할 예정입니다. (바로 내일부터군요!) 앞으로는 조금 더 꾸준히 개발 공부만 할 수 있을 것 같습니다. 직업이 학생에서 개발자로 바뀌는 덕입니다. 그토록 바라던 개발자라는 직업을 갖게된만큼 더 꾸준히, 체계적으로 개발 활동을 하기 위해 주말동안 물밑작업을 좀 했습니다.&lt;/p&gt;

&lt;p&gt;이전부터 다른 블로그에서 &lt;a href=&quot;https://blog.outsider.ne.kr/1141&quot;&gt;‘일일커밋’에 관한 글&lt;/a&gt;을 보면서 도전해보고 싶다는 생각을 해왔습니다. 그 중에서도 &lt;a href=&quot;https://milooy.wordpress.com/2015/10/08/daily-commit/&quot;&gt;Jay Jin님의 블로그&lt;/a&gt;를 통해 알게된 TIL(Today I Learned)을 따라 해보고 싶다는 생각을 해왔습니다. 그래서 주말에 &lt;a href=&quot;https://github.com/milooy/TIL&quot;&gt;Jay Jin님의 Github&lt;/a&gt;을 찾아가 기본 골격을 본따서 &lt;a href=&quot;https://github.com/joeunha/TIL&quot;&gt;저만의 TIL&lt;/a&gt;을 구성했습니다.&lt;/p&gt;

&lt;p&gt;TIL은 말처럼 그날 배운 내용을 정리해서 커밋(commit)하는 저장소입니다. 무의미한 내용은 커밋하지 않는다는 조건에 따라 의미있는 내용을 커밋합니다. 이로써 일일커밋 활동을 해나갈 수 있고 제가 배워나가는 지식을 저장해서 저만의 위키(wiki)를 만들 수 있습니다. 아마 저는 FreeCodeCamp를 통해서 배우는 내용을 정리하는 것으로 커밋하는 경우가 많을 것 같습니다. 더불어 회사에서 일하면서 배우게 되는 내용을 그날 그날 정리하면 커밋할 내용이 제법될 것 같습니다.&lt;/p&gt;

&lt;p&gt;우선은 30일로 일일커밋의 목표를 설정하겠습니다. 무작정 100일로 목표를 세우면 미리부터 지칠것 같아 작게 여러번 가겠습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jul 2016 08:19:46 +0900</pubDate>
        <link>http://localhost:4000/daily-commit-today-i-learned/</link>
        <guid isPermaLink="true">http://localhost:4000/daily-commit-today-i-learned/</guid>
        
        
        <category>freecodecamp</category>
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>취미의 시작 &amp;#8211; Digital Photography</title>
        <description>&lt;p&gt;한동안 블로그가 뜸했는데, 이유인 즉슨 학기말에 과제 및 시험으로 정신이 없었고 학기가 끝나고 곧장 계절학기에 들어갔기 때문입니다. 듣고 있는 두과목 중 하나는 Digital Photography 라는 수업 입니다. 난데없이 사진 수업을 듣는데는 다양한 이유가 있지만, 그 중에 하나는 메말라가는 마음을 감성으로 적실 필요가 있다고 생각했기 때문입니다.&lt;/p&gt;

&lt;p&gt;계절학기로 개설된 수업이다보니 3주 과정입니다. 매일 3시간씩 강의와 실습을 하고 있습니다. 사실 이미 막바지인 3주차 입니다. 3주차 과정으로 제품 사진 촬영을 배우고 있는데, 교수님으로부터 잘 찍는다는 칭찬을 듣고 나니 내심 뽐내고 싶은 마음에 블로그에 Hobby 카테고리를 이용해서 자랑을 해볼까 합니다. 취미를 이야기하는 공간인만큼 가볍게 글을 올리겠습니다.&lt;/p&gt;

&lt;p&gt;제품 사진을 찍을 때는 조명과 배경이 참 중요하다는 걸 배웠습니다. 별것 아닌 일상 속의 물건도 이 두가지 조건을 갖추면 예쁘게 표현되니 참 신기했습니다.&lt;/p&gt;

&lt;p&gt;사진 촬영을 위해서 우선 같은 광(光)질의 빛을 두가지를 쬐어주고 양쪽의 빛의 양을 조절해서 그림자를 예쁘게 만듭니다. 그리고 제품은 흰 배경 위에 올려둡니다. 하단의 판의 종류에 따라 제품의 반사의 정도가 달라져서 사진의 결과물이 달리 나타납니다. 오늘 실습에 사용한 판은 흑(黑)경, 백(白)경, 그리고 라이트박스 세 종류 입니다. 아래는 제가 찍은 결과물입니다.&lt;figure id=&quot;attachment_564&quot; style=&quot;width: 4256px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;wp-image-564 size-full&quot; src=&quot;http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6161.jpg&quot; alt=&quot;DSCF6161&quot; width=&quot;4256&quot; height=&quot;2848&quot; srcset=&quot;http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6161.jpg 4256w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6161-300x201.jpg 300w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6161-768x514.jpg 768w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6161-1024x685.jpg 1024w&quot; sizes=&quot;(max-width: 4256px) 100vw, 4256px&quot; /&gt;&amp;lt;figcaption class=&quot;wp-caption-text&quot;&amp;gt;큐브 (흑경)&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;&lt;/p&gt;

&lt;p&gt;흑경은 반사가 선명한 것이 특징입니다.  이름에서 알 수 있듯이 검은색 유리를 사용하지만 결과물에서는 마치 일반 거울에서 찍은 것처럼 표현됩니다. 노출 값을 높여 찍었기 때문에 벽과의 경계 또한 희미합니다.&lt;/p&gt;

&lt;p&gt; &lt;figure id=&quot;attachment_559&quot; style=&quot;width: 2709px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;wp-image-559 size-full&quot; src=&quot;http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6111.jpg&quot; alt=&quot;DSCF6111&quot; width=&quot;2709&quot; height=&quot;4049&quot; srcset=&quot;http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6111.jpg 2709w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6111-201x300.jpg 201w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6111-768x1148.jpg 768w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6111-685x1024.jpg 685w&quot; sizes=&quot;(max-width: 2709px) 100vw, 2709px&quot; /&gt;&amp;lt;figcaption class=&quot;wp-caption-text&quot;&amp;gt;마카롱의 고향 (백경)&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt; &lt;figure id=&quot;attachment_561&quot; style=&quot;width: 4025px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img class=&quot;wp-image-561 size-full&quot; src=&quot;http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6124.jpg&quot; alt=&quot;DSCF6124&quot; width=&quot;4025&quot; height=&quot;2693&quot; srcset=&quot;http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6124.jpg 4025w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6124-300x201.jpg 300w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6124-768x514.jpg 768w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6124-1024x685.jpg 1024w&quot; sizes=&quot;(max-width: 4025px) 100vw, 4025px&quot; /&gt;&amp;lt;figcaption class=&quot;wp-caption-text&quot;&amp;gt;꽃내음 (백경)&amp;lt;/figcaption&amp;gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;백경은 흑경에 비해 은은하게 반사되는 것이 특징입니다. 조금 더 부드러운 제품군에 어울리는 사진을 표현할 때 좋은 것 같습니다.&lt;/p&gt;

&lt;p&gt; &lt;figure id=&quot;attachment_562&quot; style=&quot;width: 2848px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;wp-image-562 size-full&quot; src=&quot;http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6125.jpg&quot; alt=&quot;DSCF6125&quot; width=&quot;2848&quot; height=&quot;4256&quot; srcset=&quot;http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6125.jpg 2848w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6125-201x300.jpg 201w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6125-768x1148.jpg 768w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6125-685x1024.jpg 685w&quot; sizes=&quot;(max-width: 2848px) 100vw, 2848px&quot; /&gt;&amp;lt;figcaption class=&quot;wp-caption-text&quot;&amp;gt;ck, 여름의 향수 (라이트박스)&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt; &lt;figure id=&quot;attachment_563&quot; style=&quot;width: 2848px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img class=&quot;wp-image-563 size-full&quot; src=&quot;http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6136.jpg&quot; alt=&quot;DSCF6136&quot; width=&quot;2848&quot; height=&quot;2848&quot; srcset=&quot;http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6136.jpg 2848w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6136-150x150.jpg 150w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6136-300x300.jpg 300w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6136-768x768.jpg 768w, http://rabbylab.xyz/blog/wp-content/uploads/2016/07/DSCF6136-1024x1024.jpg 1024w&quot; sizes=&quot;(max-width: 2848px) 100vw, 2848px&quot; /&gt;&amp;lt;figcaption class=&quot;wp-caption-text&quot;&amp;gt;ck, 여름의 향수 (라이트박스)&amp;lt;/figcaption&amp;gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;라이트박스(Light Box)는 이름에서 알 수 있듯이 빛을 내는 판입니다. 때문에 투명하게 빛이 통과하는 물체를 찍을 때 아름답게 표현할 수 있습니다. ck 향수병처럼 색이 예쁠 수록 더 보기 좋았습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;조금 더 가볍게 접근하고 싶었는데, 막상 글을 올리려다보니 격을 갖추게 되는 것 같습니다. 어느정도 예의를 차리는 것은 좋다고 생각하나 감성을 다루는 사진이라는 취미인만큼 조금은 관대하게 편하게 글을 올리려고 노력해야겠습니다. 당초 사진을 배우는 목적이 감성으로 마음을 적시는 것이니 앞으로는 감성적으로 글을 풀어가도록 하겠습니다.&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Jul 2016 08:09:13 +0900</pubDate>
        <link>http://localhost:4000/%ec%b7%a8%eb%af%b8%ec%9d%98-%ec%8b%9c%ec%9e%91-%ec%82%ac%ec%a7%84/</link>
        <guid isPermaLink="true">http://localhost:4000/%ec%b7%a8%eb%af%b8%ec%9d%98-%ec%8b%9c%ec%9e%91-%ec%82%ac%ec%a7%84/</guid>
        
        <category>hobby</category>
        
        <category>photo</category>
        
        <category>사진</category>
        
        <category>취미</category>
        
        
        <category>hobby</category>
        
        <category>photo</category>
        
      </item>
    
      <item>
        <title>[Challenge] Portfolio Page 만들기</title>
        <description>&lt;p&gt;Tribute Page 만들기의 뒤를 잇는 두번째 Challenge는 ‘&lt;a href=&quot;https://www.freecodecamp.com/challenges/build-a-personal-portfolio-webpage&quot;&gt;개인 Portfoilo Page 만들기&lt;/a&gt;‘ 입니다. 예전부터 포트폴리오를 만들어야지 하면서 Github에 페이지를 만들어두기도 했는데 뭐부터 해야할지 몰라 시작조차 못했던 일을 FCC를 통해 하게 되었습니다.&lt;/p&gt;

&lt;p&gt;이전과 마찬가지로 &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;을 사용합니다. 역시나 &lt;a href=&quot;https://codepen.io/FreeCodeCamp/full/YqLyXB/&quot;&gt;예시&lt;/a&gt;를 주는데요. 예시의 코드를 볼 순 없습니다. 사실 클릭 한번이면 코드를 다 볼 수 있지만, 양심에 맡깁니다. 그게 실력이 느는 일 이니까요. 이를 만들기 위해 몇가지 기본적으로 갖춰야할 기능에 대해 설명합니다. 기본적으로 단일 페이지를 스크롤해서 모든 컨텐츠를 볼 수 있도록 만들어야합니다. Bootstrap 이외의 라이브러리를 사용해도 괜찮다고 합니다. 클릭해서 다른 소셜 미디어로의 이동이 가능한  버튼을 만들어야합니다.&lt;/p&gt;

&lt;p&gt;며칠간 바빠서 미루다가 하루정도 마음 잡고 이것 저것 찾아가며 허접한 &lt;a href=&quot;http://codepen.io/rabbylab/full/gMOOBK/&quot;&gt;포트폴리오&lt;/a&gt;를 만들었습니다. 사실 마땅히 들어갈 작업물이 없어서 그냥 형태만 갖췄습니다. 이후에 작업물이 생기면 업데이트할 생각입니다. 전반적인 기능도 미흡합니다. 예시를 보면 스크롤하면 특정 세션에 이를때 버튼이 자동으로 활성화/비활성화 되는데, 저는 그 부분은 구현하지 않았습니다. 또 Contact Me 파트를 통해 연락하는 기능도 없습니다.정말 기본으로 해야할 것만 했습니다.&lt;/p&gt;

&lt;p&gt;이번 과제를 통해 배운 것이 있다면 &amp;lt;section&amp;gt; 이라는 태그가 있다는 점, 이를 이용해서 단일 페이지 내에서 링크로 이동이 가능하다는 점입니다. 그리고 Bootstrap의 스크립트 기능을 사용하기 위해선 .js 파일을 따로 추가해줘야한다는…상식적인 부분도 깨쳤습니다. (이 부분을 몰라서 navbar의 collapse 기능이 동작하지 않아서 제법 오래 당황했었습니다. 부끄럽네요.)&lt;/p&gt;

&lt;p&gt;아직도 모르겠는 부분은 페이지 구조를 구성할 때 얼마나 조밀하게 짜야하는가 하는 부분입니다. 또 얼마나 CSS 를 사용해서 커스텀 해야하고 얼마나 기본의 라이브러리를 활용해야하는 부분입니다. 실컷 CSS 로 스타일을 지정 했는데 막상 더 예쁜 기본값을 라이브러리에서 발견할 때면 어디까지 라이브러리를 써야하고 어디까지 직접 코딩 해야하는지 잘 모르겠습니다.&lt;/p&gt;

&lt;p&gt;이제부터는 Javascript를 사용하는 방법을 배울 것 같습니다. 기초가 되는 부분은 빨리 진행하고 조금 깊은 자바스크립트를 다뤄보고 싶네요. 이후에 객체지향도 다루고 기초적인 알고리즘도 다루는 것 같아 기대가 됩니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jun 2016 05:17:26 +0900</pubDate>
        <link>http://localhost:4000/challenge-portfolio-page-%eb%a7%8c%eb%93%a4%ea%b8%b0/</link>
        <guid isPermaLink="true">http://localhost:4000/challenge-portfolio-page-%eb%a7%8c%eb%93%a4%ea%b8%b0/</guid>
        
        <category>codepen</category>
        
        <category>fcc</category>
        
        <category>freecodecamp</category>
        
        <category>practice</category>
        
        
        <category>freecodecamp</category>
        
      </item>
    
      <item>
        <title>[Challenge] Tribute Page 만들기</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.freecodecamp.com/&quot;&gt;FreeCodeCamp&lt;/a&gt;를 시작한지 3주가 되어갑니다. 지금까지 &lt;a href=&quot;https://www.freecodecamp.com/joeunha&quot;&gt;13시간 분량의 공부를 진행했네요.&lt;/a&gt; Challenge 부분에서는 HTML, Bootstrap, jQuery 를 이수했습니다. 그리고 이제는 Project를 하게 되었는데요. 이런 실전적인 과제를 내어준다는 점에서 다른 코딩 학습 서비스와 차별점이 있는 것 같습니다. (중간 중간에 계속 커뮤니티와 소통할 수 있는 미션을 주는 것도 FCC가 가진 장점 중에 하납니다.)&lt;/p&gt;

&lt;p&gt;첫번째 과제는 Tribute Page를 만드는 건데요. Tribute는 공헌, 봉헌, 헌사 등의 이미를 갖는데 죽은 이를 기리는 페이지입니다. &lt;a href=&quot;https://codepen.io/FreeCodeCamp/full/NNvBQW/&quot;&gt;예시&lt;/a&gt;를 주고 코드를 보지 않고 이와 유사한 형태의 페이지를 만들라는 것이 주요 내용입니다.&lt;/p&gt;

&lt;p&gt;과제를 위해 &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;이라는 서비스를 사용하는데요. 일전에 인턴으로 일하면서 프론트엔드에 필요한 효과의 코드를 얻기 위해 사용했었는데 이렇게 개인 프로젝트로도 사용이 가능하군요.&lt;/p&gt;

&lt;p&gt;저는 존경하는 Steve Jobs를 기리는 페이지를 만들어보았습니다. 특별할 건 없구요. 예시를 최대한 따라하면서 Challenge를 통해 배운 기술들을 활용했습니다. &lt;a href=&quot;https://codepen.io/rabbylab/pen/mEbVNJ&quot;&gt;이곳&lt;/a&gt;에서 확인하실 수 있습니다. 조금 엉성한 구조로 만든 탓인지 자료 조사를 포함해서 40분 정도 소요되었습니다. (제 기준에서는 제법 금방 한 것 같습니다.)&lt;/p&gt;

&lt;p&gt;다음 프로젝트는 개인 포트폴리오를 만드는 겁니다. 늘 포트폴리오 하나 만들어야겠다고 생각해왔었는데 이참에 하나 만들어야겠습니다. FCC, 이거 은근히 중독됩니다. 공부도 되고 재미도 있는 참 좋은 서비스인 것 같습니다.&lt;/p&gt;
</description>
        <pubDate>Fri, 27 May 2016 02:51:04 +0900</pubDate>
        <link>http://localhost:4000/project-tribute-page-%eb%a7%8c%eb%93%a4%ea%b8%b0/</link>
        <guid isPermaLink="true">http://localhost:4000/project-tribute-page-%eb%a7%8c%eb%93%a4%ea%b8%b0/</guid>
        
        <category>codepen</category>
        
        <category>fcc</category>
        
        <category>freecodecamp</category>
        
        <category>practice</category>
        
        <category>project</category>
        
        
        <category>freecodecamp</category>
        
      </item>
    
      <item>
        <title>PRATO 개발기 (2)</title>
        <description>&lt;p&gt;페이지 구조를 잡아보기로 했습니다. 기획 부분이라고 보시면 될 것 같습니다. 기존에 PPT 파일로 만들어둔 목업을 조금 더 세련된 형태로 다듬어 보여 드리는 것으로 자질구레한 설명을 대체하겠습니다. 목업은 &lt;a href=&quot;https://goo.gl/OMW0rb&quot;&gt;이곳&lt;/a&gt;에서 보실 수 있습니다. 도구는 &lt;a href=&quot;https://ovenapp.io/&quot;&gt;페이지 구조를 잡아보기로 했습니다. 기획 부분이라고 보시면 될 것 같습니다. 기존에 PPT 파일로 만들어둔 목업을 조금 더 세련된 형태로 다듬어 보여 드리는 것으로 자질구레한 설명을 대체하겠습니다. 목업은 [이곳](https://goo.gl/OMW0rb)에서 보실 수 있습니다. 도구는 &lt;/a&gt; 를 활용했습니다.&lt;/p&gt;

&lt;p&gt;분홍 툴팁을 따라가면 대략적인 플로우를 이해하실 수 있습니다. 더 많은 이들이 이해하기 쉽도록 만들어야하는 기획 프로토타입이지만 저만 이해할 수준으로 만들어서 부끄럽습니다. 시간 나는대로 디테일을 더할 생각입니다. 계속 지켜봐주세요.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(16’07.05 업데이트) ovenapp 을 대신해 codepen 에 프로토타입을 만들었습니다. 학교 수업에서 발표를 위해 이전의 프로토타입보다 조금 더 발전한 수준으로 만들었습니다. 발전이라고 했으나, 플로우를 이해할 수 있는 정도입니다. 해당 목업은 &lt;a href=&quot;http://codepen.io/rabbylab/full/jrWKPR/&quot;&gt;이곳&lt;/a&gt;에서 보실 수 있습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 May 2016 18:05:29 +0900</pubDate>
        <link>http://localhost:4000/prato-%ea%b0%9c%eb%b0%9c%ea%b8%b0-2/</link>
        <guid isPermaLink="true">http://localhost:4000/prato-%ea%b0%9c%eb%b0%9c%ea%b8%b0-2/</guid>
        
        <category>praisetogether</category>
        
        <category>prato</category>
        
        <category>기획</category>
        
        
        <category>prato project</category>
        
      </item>
    
      <item>
        <title>[CSS] Color, Hex Code and RGB</title>
        <description>&lt;p&gt;CSS에서 색을 표현할 때 간단하게 ‘red’, ‘white’, ‘black’등으로 표기하기도 합니다. 하지만 실제로는 다양한 색을 표현하기 위해 다른 방식을 더 자주 쓰게 됩니다. ‘#FF0000’ 혹은 ‘rgb(255, 0, 0)’처럼 표기하는 경우입니다. 이 두가지 표현 방법에 대해 다루겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hex Code – #&lt;span style=&quot;color: #ff0000;&quot;&gt;00&lt;/span&gt;&lt;span style=&quot;color: #00ff00;&quot;&gt;00&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;00&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;우선은 Hexadecimal Code의 준말인 Hex Code로 &lt;code class=&quot;highlighter-rouge&quot;&gt;#FF0000&lt;/code&gt;처럼 표기하는 방법입니다. Hexadecimal은 16진법을 의미합니다. 일반적으로 표기하는 방식은 10진법입니다. 16진법은 0부터 15까지의 수를 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F로 표기합니다. A는 10을 의미하게 되는 것이죠. 이 방식을 이용하면 한자리 수로 16까지 표기 가능하고 두자리로 255까지 표기 가능합니다.&lt;/p&gt;

&lt;p&gt;해당 표기법으로 색을 표현할 때는 단순한 규칙을 가집니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;샵(#)기호 이후의 여섯자리의 숫자가 온다.&lt;/li&gt;
  &lt;li&gt;첫번째,두번째 숫자는 빨간색(RED)의 정도를 의미한다.&lt;/li&gt;
  &lt;li&gt;세번째,네번째 숫자는 초록색(GREEN)의 정도를 의미한다.&lt;/li&gt;
  &lt;li&gt;다섯번째,여섯번째 숫자는 파란색(BLUE)의 정도를 의미한다.&lt;/li&gt;
  &lt;li&gt;숫자가 클수록 정도(색의 농도)가 높아(짙어)진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예를 들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;#FF0000&lt;/code&gt;의 경우 빨간색입니다. 왜냐하면 가장 앞의 두자리가 FF로 가장 높은 정도를 가지고 뒤의 네자리는 0이기 때문입니다. 같은 원리로 &lt;code class=&quot;highlighter-rouge&quot;&gt;#00FF00&lt;/code&gt;는 초록색입니다. 이때 색을 섞어서 다양한 색을 표현할 수 있는데 그 표현의 가지수는 256*256*256 만큼입니다. 약 1,600만개입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RGB Code – rgb(&lt;span style=&quot;color: #ff0000;&quot;&gt;255&lt;/span&gt;, &lt;span style=&quot;color: #00ff00;&quot;&gt;255&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;255&lt;/span&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음은 RGB Code인데 Red, Green, Blue의 정도를 숫자(10진법)으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;rgb(255, 0, 0)&lt;/code&gt;처럼 표기하는 방법입니다. 쉼표로 각 색의 정도를 구분짓습니다. 앞선 Hex Code를 이해하셨다면 쉽게 사용하실 수 있습니다. 위의 표기는 빨간색이겠죠?&lt;/p&gt;
</description>
        <pubDate>Fri, 13 May 2016 00:21:07 +0900</pubDate>
        <link>http://localhost:4000/css-color-hex-code-and-rgb/</link>
        <guid isPermaLink="true">http://localhost:4000/css-color-hex-code-and-rgb/</guid>
        
        <category>css</category>
        
        <category>fcc</category>
        
        <category>freecodecamp</category>
        
        
        <category>freecodecamp</category>
        
      </item>
    
      <item>
        <title>[CSS] Style Override</title>
        <description>&lt;p&gt;CSS Style Override는 컴포넌트, 라이브러리를 커스텀하기 위해 사용됩니다. 어떤 식으로 Override가 가능한지 살펴보겠습니다.&lt;/p&gt;

&lt;p&gt;CSS 파일은 위에서 아래로 순차적으로 실행됩니다. 때문에 동일한 Element에 동시에 적용되는 경우, 가장 마지막에 선언된 Style이 가장 높은 우선순위를 갖습니다.&lt;/p&gt;

&lt;p&gt;예를 들어 아래와 같은 상황에서 h1은 blue-text 속성 값을 지니고 파란색으로 표기되죠.&lt;/p&gt;

&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;&amp;lt;style&amp;gt;
  body {
    background-color: black;
    font-family: Monospace;
    color: green;
  }
  .pink-text {
    color: pink;
  }
  .blue-text {
    color: blue;
  }
&amp;lt;/style&amp;gt;


&amp;lt;h1 class=&quot;pink-text blue-text&quot;&amp;gt;Hello World!&amp;lt;/h1&amp;gt; //파란색

&lt;/pre&gt;

&lt;p&gt;다만 id로 속성을 지정할 경우에는 어떤 class보다 높은 우선순위를 가집니다. 결국 아래와 같은 코드는 h1이 주황색으로 표기됩니다.&lt;/p&gt;

&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;&amp;lt;style&amp;gt;
  body {
    background-color: black;
    font-family: Monospace;
    color: green;
  }
  #orange-text {
    color: orange;
  }
  .pink-text {
    color: pink;
  }
  .blue-text {
    color: blue;
  }
&amp;lt;/style&amp;gt;


&amp;lt;h1 id=&quot;orange-text&quot; class=&quot;pink-text blue-text&quot;&amp;gt;Hello World!&amp;lt;/h1&amp;gt; //주황색

&lt;/pre&gt;

&lt;p&gt;id 값보다 높은 우선순위를 갖는 방법은 in-line으로 스타일을 지정하는 방법입니다. 위의 코드에서 h1에 &lt;code class=&quot;highlighter-rouge&quot;&gt;style=&quot;color: white&quot;&lt;/code&gt;를 추가해주면 다른 class/id보다 높은 우선순위를 가진 in-line style에 의해 h1는 흰색으로 표기됩니다.&lt;/p&gt;

&lt;p&gt;하지만 이 모든 방법보다 우위의 순위를 가질 수 있는 방법이 있습니다. 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;!important&lt;/code&gt;를 추가하는 것이죠. 예를들어 모든 class와 id 그리고 in-line style에 의해 가장 마지막으로 밀린 pink-text를 최상위 스타일로 적용하고 싶다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;color: pink !important;&lt;/code&gt;를 적용해주면 된다. 이 결과로 h1은 분홍색으로 표기됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정리하자면 CSS Style의 우선순위는&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;동일한 class일 경우 가장 마지막에 선언된 Style이 높다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;(1번을 포함하고) class보다 id가 높다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;id보다 in-line style이 높다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;!important는 앞선 모든 것보다 높다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;라고 정의할 수 있습니다.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 12 May 2016 00:52:47 +0900</pubDate>
        <link>http://localhost:4000/css-style-override/</link>
        <guid isPermaLink="true">http://localhost:4000/css-style-override/</guid>
        
        <category>css</category>
        
        <category>fcc</category>
        
        <category>freecodecamp</category>
        
        
        <category>freecodecamp</category>
        
      </item>
    
      <item>
        <title>PRATO 개발기 (1)</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;소개&lt;/h3&gt;

&lt;p&gt;PRATO는 PraiseTogether의 약자입니다. 함께 찬양하고 노래하기 위해 필요한 콘티(곡의 순서)를 제작하는 과정에 필요한 모든 과정을 제공하는 웹 서비스입니다.&lt;/p&gt;

&lt;p&gt;해당 서비스는 기존에 콘티 제작 과정이 웹 검색-문서 편집-출력의 과정에서 웹 브라우저와 문서 편집 도구를 별도로 이용해야만 했던 불편함을 해소하고자 시작되었습니다. 불필요한 다운로드 과정을 생략하고 하나의 웹 페이지에서 모든 과정을 수행할 수 있는 서비스입니다.&lt;/p&gt;

&lt;p&gt;주요 기능은 ‘&lt;strong&gt;악보 검색&lt;/strong&gt;‘, ‘&lt;strong&gt;콘티 편집&lt;/strong&gt;‘, ‘&lt;strong&gt;콘티 출력&lt;/strong&gt;‘ 입니다.&lt;/p&gt;

&lt;p&gt;개발 과정 및 코드는 &lt;a href=&quot;https://github.com/joeunha/praisetogether&quot;&gt;Github&lt;/a&gt;을 통해 확인하실 수 있습니다.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;개발 환경 만들기&lt;/h3&gt;

&lt;p&gt;그나마 경험이 많은 AngularJS로 프론트엔드를 꾸릴까 합니다. 서버단을 구현할 능력이 있을지 모르나, 시간과 능력이 허락한다면 MEAN Stack으로 전체를 구현해볼 생각입니다. 개발 환경 세팅에 소요되는 시간을 최소화하기 위해 스캐폴딩 도구인 &lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt;을 이용했습니다.&lt;/p&gt;

&lt;p&gt;개발 툴은 SourceTree / Atom / Chrome을 사용합니다. 상황에 따라 Windows 10 / OS X를 혼용하고 있습니다. Windows 10의 경우 bash 툴을 지원하지 않지만 SourceTree에서 제공하는 터미널 기능을 이용하여 개발을 진행하고 있습니다.&lt;/p&gt;

&lt;p&gt;node (npm)을 설치한 뒤, yeoman 을 설치하면 yeoman을 사용할 준비가 끝이 납니다. 터미널에서 yo라고 입력하면 generator를 설치할 수 있는 installer가 보입니다. 저는 Grunt / Bower / css 를 선택했습니다. 스캐폴딩이 끝나고 grunt test, grunt build, grunt serve를 순서대로 입력하면 바로 작업 가능한 웹 페이지를 만나보실 수 있습니다. 이로써 개발 환경을 설정 했습니다.&lt;/p&gt;

&lt;p&gt;다음 시간에는 페이지 구조를 잡아보겠습니다.&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Apr 2016 00:14:17 +0900</pubDate>
        <link>http://localhost:4000/prato-%ea%b0%9c%eb%b0%9c%ea%b8%b0-1/</link>
        <guid isPermaLink="true">http://localhost:4000/prato-%ea%b0%9c%eb%b0%9c%ea%b8%b0-1/</guid>
        
        <category>praisetogether</category>
        
        <category>prato</category>
        
        
        <category>prato project</category>
        
      </item>
    
      <item>
        <title>[Practice] 동물 쉼터(Animal Shelter)를 구현하라!</title>
        <description>&lt;h6 id=&quot;practice----3-3-coin--------5-----------practice----------&quot;&gt;Practice 시리즈를 연재합니다. 지난 3월 3일부터 COIN(코딩인터뷰 준비하는 모임)이라는 이름으로 함께 취업스터디를 진행하고 있는 5명의 친구들과 함께 교재 &lt;코딩인터뷰 완전분석=&quot;&quot;&gt; 이라는 책을 가지고 공부를 시작했습니다. Practice 시리즈는 이 과정에서 함께 고민하며 풀었던 문제에 대해 이야기하는 시리즈입니다.&lt;/코딩인터뷰&gt;&lt;/h6&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;코딩인터뷰 완전분석 – 연습문제 3.7&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“먼저 들어온 동물이 먼저 나가는 동물 쉼터(animal shelter)가 있다고 하자. 이 쉼터는 개와 고양이만 수용할 수 있다. 사람들은 쉼터의 동물들 가운데 들어온 지 가장 오래된 동물부터 입양할 수 있는데, 개와 고양이 중 어떤 동물을 데려갈지 선택할 수도 있다. 특정한 동물을 지정해 데려가는 것은 금지되어 있다. 이 시스템을 자료구조로 구현하라. 해당 자료구조는 enqueue, dequeueAny, dequeueDog, dequeueCat의 연산들을 제공해야 한다. 언어에 기본 탑재되어 있는 LinkedList (Java) 자료구조를 이용해도 좋다.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이번부터는 자바로 구현하겠습니다. &lt;a href=&quot;http://rabbylab.xyz/practice-1/&quot;&gt;이전 글&lt;/a&gt;에서 C로 코딩을 했는데, COIN에서 사용하는 공용 언어로 자바를 선정함에 따라 자바로 코딩하겠습니다.&lt;/p&gt;

&lt;p&gt;코드를 보시기에 앞서 문제를 먼저 해부(?)하겠습니다. 동물 쉼터는 ‘먼저 들어온 동물이 먼저 나가는’ 곳 입니다. First In First Out(FIFO)라는거죠. 큐를 의미합니다. 그리고 문제의 끝에서 ‘LinkedList’를 사용해도 좋다고 합니다. 결국 LikedList로 표현된 Queue를 구현하라는 것입니다. 그리고 그 큐는 몇가지 제약조건을 가지고 있습니다. 들어온 지 가장 오래된 동물부터 입양하되, 개나 고양이 중에서 선택은 할 수 있도록 해줘라는 것입니다. 그래서 dequeueDog, dequeueCat 연산을 제공합니다. 대충 그림나옵니다. 그럼 시작할까요?&lt;/p&gt;

&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;private Node head;
private Node tail;
private int size = 0;
private class Node {
	private String name;
	private int id;
	private Node next;
	public Node(String animal, int num){
		this.name = animal;
		this.id = num;
		this.next = null;
	}
}
&lt;/pre&gt;

&lt;p&gt;링크드리스트를 구현해야하기 때문에 노드를 만들어줍니다. head와 tail은 큐에서 front(앞)와 rear(뒤)를 맡게됩니다. 일단은 4번째 줄 이후를 집중해서 보겠습니다. 이 노드는 동물의 이름 값(name), 개와 고양이를 분류하기 위한 값(id) 그리고 다음 노드를 가르키는 값(next)을 가지고 있습니다. 사실 저는 이 ‘가르키는 값’이 참 익숙하지 않습니다. C에서는 이걸 포인터로 구현하는데 Java에서는 그냥 값을 참조하면 되는데, 그게 은근히 낯섭니다. 포인터의 그 특징이 더 뇌리에 깊게 박힌 것 같습니다. 여하튼 노드는 이렇게 구성되어 있습니다. 이제 본격적인 연산들을 살펴보겠습니다.&lt;/p&gt;

&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;public void enqueue(String animal, int num){
	Node newNode = new Node(animal, num);
	if(size == 0){
		tail = head = newNode;
	} else{
		head.next = newNode;
		head = newNode;
	}
	size++;
}
&lt;/pre&gt;

&lt;p&gt;이 코드는 노드를 추가(enqueue)하는 과정을 보여줍니다. 이 메소드는 인자로 동물의 이름(animal)과 개와 고양이를 구분하는 숫자(num)을 받습니다. 그리고 새로운 노드를 생성합니다. 이때 생성된 노드가 첫번째 노드라면(queue의 size가 0이라면) head와 tail이 동시에 이 노드를 가르킵니다. 만약 그렇지 않다면 head의 다음(next)에 새로운 노드가 붙습니다. 그리고 head는 새로운 노드를 가르킵니다. 그러니까 새로운 노드가 추가되면 tail로 붙는게 아니라 head가 이동합니다. tail은 움직이지 않습니다. 앞에다가 추가하는 방식인거죠. 추가가 끝나면 size를 증가시켜줍니다. 이로써 tail에는 가장 오래된 동물이 주인을 기다리게 됩니다.&lt;/p&gt;

&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;public void dequeueAny(){
	System.out.println(tail.name);
	tail = tail.next;
	size--;
	return;
}
&lt;/pre&gt;

&lt;p&gt;새로운 주인을 만난 동물을 보내주는 메소드입니다. 가장 먼저 들어온 동물을 보내주겠습니다. 보내주는 걸 확인하기 위해 메세지를 출력합니다. 출력 이후에는 tail을 한칸 뒤로 이동합니다. 다음 차례를 가르키는거죠. 그리곤 size를 감소시켜줍니다.&lt;/p&gt;

&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;public void dequeueDog(){
	Node chaser_1 = tail;
	Node chaser_2 = tail;
	while(chaser_1.id != 0 &amp;amp;&amp;amp; chaser_1.next != null){
		chaser_2 = chaser_1;
		chaser_1 = chaser_2.next;
	}
        //개가 첫번째 노드에 있었던 경우
	if(chaser_1 == tail){
		dequeueAny();
        //개를 발견한 경우
	} else if(chaser_1.id == 0){
		System.out.println(chaser_1.name + &quot;, Bye!\n&quot;);
		chaser_2.next = chaser_1.next;
	//개가 없는 경우
        } else{
		System.out.println(&quot;No Dog...&quot;);
		return;
	}
	size--;
	return;
}
&lt;/pre&gt;

&lt;p&gt;이제 새로운 주인이 원하는 동물을 골라서 주겠습니다. 개/고양이 중에서 선택이 가능해야겠죠. 위의 코드는 개를 내보내는 코드입니다. id가 0일 때, 개/ 1일 때, 고양이라고 간주했습니다. 이번 코드에서 중요한건 역시 chaser_1,chaser_2 입니다. 이들의 역할은 원하는 동물을 찾아오는 것입니다. 처음에는 tail부터 시작합니다. 가장 오래된 동물부터 확인하는 것이죠.&lt;/p&gt;

&lt;p&gt;while문을 보겠습니다. 본격적인 추적(chase)가 시작됩니다. id가 0이 아닐 경우 계속 반복됩니다. 다시말해, 0이 아니라는 말은 개가 아니라는 것이니까 고양이라는 의미겠죠? 그리고 만약에 더 이상 개가 남아 있지 않을 경우도 있겠죠? 그런 경우에 무한루프를 방지하기 위해서 next값이 null이면 탈출할 수 있도록 조건을 만들어둡니다. 이제 chaser의 이동을 살펴보겠습니다. 5번 줄에서 chaser_2가 chaser_1의 위치로 갑니다. 그리고 다음 줄에서 chaser_1은 다음 노드로 이동합니다. 이렇게 chaser_1이 앞으로 한 노드씩 움직이며 개를 찾습니다. 결국 개가 발견되거나 개가 없으면 루프를 벗어납니다.&lt;/p&gt;

&lt;p&gt;만약에 개가 첫번째 노드에 있었다면 그냥 dequeueAny 메소드를 호출해줍니다. 그리고 만약에 개가 맞다면 개에게 작별을 고하고 보내줍니다. chaser_2의 다음 노드였던 chaser_1의 노드를 없애주기 위해 chaser_1 다음의 노드와 chaser_2를 이어줍니다. 그렇게 노드를 정리합니다. 만약에 개가 없었다면 더 이상 개가 없다고 메세지를 출력해줍니다.&lt;/p&gt;

&lt;p&gt;dequeueCat의 경우는 id 값만 바꿔주면 됩니다. 고로 생략하겠습니다.&lt;/p&gt;

&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;public class Main {

	public static void main(String[] args) {
		LinkedList animals = new LinkedList();
		
		animals.enqueue(&quot;귀욤&quot;,1);
		animals.enqueue(&quot;개똥&quot;,0);
		animals.enqueue(&quot;황묘&quot;,1);
		animals.enqueue(&quot;백구&quot;,0);
		
		System.out.println(animals);
		
		animals.dequeueDog();
	
		System.out.println(animals);
	}

}
&lt;/pre&gt;

&lt;p&gt;예제 확인을 위한 코드입니다. 개똥이를 보내고 빈자리를 확인하는 것으로 코드가 끝납니다. 아래는 출력결과 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-501&quot; src=&quot;http://rabbylab.xyz/blog/wp-content/uploads/2016/04/Aniqueue-실행-결과.jpg&quot; alt=&quot;Anishelter 실행 결과&quot; width=&quot;339&quot; height=&quot;108&quot; srcset=&quot;http://rabbylab.xyz/blog/wp-content/uploads/2016/04/Aniqueue-실행-결과.jpg 339w, http://rabbylab.xyz/blog/wp-content/uploads/2016/04/Aniqueue-실행-결과-300x96.jpg 300w&quot; sizes=&quot;(max-width: 339px) 100vw, 339px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;전체 코드는 &lt;a href=&quot;https://github.com/joeunha/rabbylab-csbasic/blob/master/src/rabbylab/csbasic/coin/animalshelter/LinkedList.java&quot; target=&quot;_blank&quot;&gt;이곳&lt;/a&gt;에서 확인하실 수 있습니다. 감사합니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Apr 2016 09:16:46 +0900</pubDate>
        <link>http://localhost:4000/practice-animal-shelter/</link>
        <guid isPermaLink="true">http://localhost:4000/practice-animal-shelter/</guid>
        
        <category>coin</category>
        
        <category>csbasic</category>
        
        
        <category>cs basic</category>
        
      </item>
    
      <item>
        <title>객체 2</title>
        <description>&lt;p&gt;오늘은 ‘&lt;strong&gt;prototype(프로토타입)&lt;/strong&gt;‘에 대해 먼저 이야기해보겠습니다. 프로토타입은 사전에서 “(후대 사물의) 원조”라고 정의하고 있습니다. 다른 말로 “원형”이라고도 정의합니다. 코드 먼저 보시겠습니다.&lt;/p&gt;

&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;function GrandFa(){};
GrandFa.prototype.name = &quot;Joeun&quot;;

function Father(){};
Father.prototype = new GrandFa();

function Sun(){};
Sun.prototype = new Father();

var o = new Sun();

console.log(o.name);
&lt;/pre&gt;

&lt;p&gt;위 코드는 “Joeun”을 출력하는 코드입니다. 자세히 살펴보면 첫째줄에서 GrandFa가 선언됩니다. (할아버지가 제일 먼저 계셨죠.) 그리고 두번째 줄에서 그 GrandFa의 이름은 Joeun이라고 GrandFa.prototype.name으로 정의합니다. 이때 프로토타입은 자바스크립트가 객체에 기본적으로 제공하는 프로퍼티입니다. 특정 객체의 원형을 정의하기 위해 사용된다고 생각하면 쉽습니다. 그 후에는 Father가 선언되고 GrandFa의 원형(특징,성질)을 물려받습니다. 상속이죠. 마찬가지로 Sun도 Father의 원형을 물려받습니다. 아들 객체가 마지막으로 o를 생성하고 o가 그 이름을 출력하면 결과물은 Joeun이 됩니다. 무슨 일이 일어난걸까요?&lt;/p&gt;

&lt;p&gt;이 상황을 설명하기 위해 Prototype Chain이라는 개념을 이해해야합니다. 가장 아래에 있는 o.name부터 보겠습니다. 자바스크립트는 o.name을 출력하기 위해 내용물을 들여다봅니다. 그런데 그 안에 아무것도 없는걸 발견하죠. 실제로 저희는 o.name에 아무것도 정의하지 않았으니까요. 그럼 이제 자바스크립트는 o의 원형인 Sun을 찾아갑니다. sun.name을 확인합니다. 역시 비어있습니다. 위로 올라갑니다. Father를 살펴보니 또 없군요. 결국 GrandFa까지 가서 보니 이 가족의 이름은 “Joeun”입니다. 그래서 o.name에 해당 내용을 출력합니다. 어떤가요? name을 Family name이라고 했으면 더 쉬웠을지도 모르겠다는 생각이 듭니다. 결국 Prototype Chain은 원형이 이어져있는 겁니다. 하위 항목에 없으면 상위 항목으로 찾으러 올라가는거죠. 너 성이 뭐니? 라고 물어봐서 아들이 모르면 아빠가 알테고 아빠가 모르면 할아버지가 알겠죠? 위로 올라가면서 묻는겁니다.&lt;/p&gt;

&lt;p&gt;그럼 이런 경우는 어떨까요?&lt;/p&gt;

&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;function GrandFa(){};
GrandFa.prototype.name = &quot;Joeun&quot;;

function Father(){};
Father.prototype = new GrandFa();
Father.prototype.name = &quot;Rabby&quot;

function Sun(){};
Sun.prototype = new Father();

var o = new Sun();

console.log(o.name);
&lt;/pre&gt;

&lt;p&gt;딱 한줄이 추가됐습니다. Father가 생성되고 중간에 이름을 변경합니다. 이때 출력되는 값은 “Rabby”입니다. 체인을 타고 올라가다가보니 중간쯤에 값이 있는데 그게 “Rabby”였기 때문입니다. (아빠가 성을 바꾸면 아들도 그 성을 따라가겠죠.)&lt;/p&gt;

&lt;p&gt;이때 주의하셔야할 부분이 하나 있습니다. 객체를 생성할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;var o = Sun.prototype&lt;/code&gt;라고 하면 안됩니다. 그렇게 되면 o가 변경되면 Sun.prototype 값이 영향을 받습니다. 왜 그럴까요?&lt;/p&gt;

&lt;p&gt;“&lt;em&gt;객체는 결코 복사되지 않는다. 다만 참조된다.&lt;/em&gt;” 바로 이 문장 때문입니다.&lt;/p&gt;

&lt;p&gt;그렇습니다. 객체는 복사되지 않습니다. 객체는 참조됩니다. 코드를 보시면 알 수 있습니다.&lt;/p&gt;

&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;function Dev(){};
Dev.prototype.name = &quot;Joeun&quot;;

var a = b = c = Dev.prototype;

console.log(a.name);
console.log(b.name);
console.log(c.name);

Dev.prototype.name = &quot;Rabby&quot;;

console.log(a.name);
console.log(b.name);
console.log(c.name);
&lt;/pre&gt;

&lt;p&gt;이 코드의 결과는 “Joeun”이 세번 반복되고 이어서 “Rabby”가 세번 반복됩니다. a,b,c를 정의할 때 저희는 Dev.prototype을 참조하게 했습니다. 만약에 복사되었다면 중간에 Dev.prototype.name 값이 바뀐다고 해서 이후 값이 바뀌지 않았겠죠. 하지만 객체는 ‘참조’된다는 특성 때문에 이와 같은 결과가 나온 것입니다. 때문에 객체를 복사하듯 사용하기 위해선 “new”를 이용해 생성자로 사용해주셔야 합니다.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Mar 2016 09:26:18 +0900</pubDate>
        <link>http://localhost:4000/%ea%b0%9d%ec%b2%b4-2/</link>
        <guid isPermaLink="true">http://localhost:4000/%ea%b0%9d%ec%b2%b4-2/</guid>
        
        <category>javascript</category>
        
        
        <category>javascript</category>
        
      </item>
    
  </channel>
</rss>
